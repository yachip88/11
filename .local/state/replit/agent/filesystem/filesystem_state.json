{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an analytical dashboard application for monitoring and analyzing makeup water consumption in Novosibirsk's district heating network. The system tracks Central Thermal Points (CTP) across multiple Regional Thermal Stations (RTS), providing statistical process control using Shewhart control charts, automated recommendations, and comprehensive analytics.\n\nThe application serves Novosibirsk Heat Supply Company (НТСК) to optimize heating system operations, identify anomalies, reduce water consumption, and improve maintenance planning through data-driven insights.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language (Russian).\n\n# Recent Changes (October 2025)\n\n**Trend Chart Visibility Fix (October 4, 2025)**\n- Fixed TrendChart component to display visible lines connecting data points\n- Issue: Charts showed axes and numbers but lines were invisible in the plot area\n- Changes to TrendChart component:\n  - Added automatic YAxis domain calculation with min/max values and 10% padding\n  - Changed line color from CSS variable to explicit blue (#2563eb) for visibility\n  - Increased line thickness from 2 to 3 pixels\n  - Increased dot size from r:4 to r:5\n  - Added legend showing \"Подпитка (т/ч)\"\n  - Added margins for proper chart display\n  - Improved tooltip formatting to show \"XX.X т/ч\"\n- E2e tests confirm: visible blue lines, connected points, correct display of negative values\n- Fixed on all pages: Dashboard (3 charts), Trends page\n\n**Dashboard RTS Percentage Fix (October 4, 2025)**\n- Fixed RTS distribution percentage calculation to handle negative makeup water values correctly\n- Changed algorithm from dividing by signed total to using absolute values for denominator:\n  - Old: `percentage = (rts.total / currentMakeupWater) * 100` → could yield >100% when negatives present\n  - New: `percentage = (|rts.total| / Σ|all rts.total|) * 100` → always sums to ~100%\n- Example: РТС-2 = 140.08, total = 61 → old = 229.6%, new = 47.0%\n- E2e test confirms percentages now sum to 100.1% (within acceptable ±5% rounding tolerance)\n\n**Trend Chart Bank Filtering (October 4, 2025)**\n- Extended TrendChart component to support bank-based RTS filtering for trend visualization\n- Added custom queryFn to properly construct URLs with `rtsFilter` query parameters (`?rtsFilter=right` or `?rtsFilter=left`)\n- Updated server-side `/api/trends/:period` endpoint to accept and process `rtsFilter` parameter\n- Extended `getTrendData` method in storage layer to filter RTS by location field:\n  - `rtsFilter: 'right'` → queries РТС with location = \"Правый берег\" (РТС-1, РТС-3, РТС-5)\n  - `rtsFilter: 'left'` → queries РТС with location = \"Левый берег\" (РТС-2, РТС-4)\n- Updated RTS location data in database: set correct \"Правый берег\" and \"Левый берег\" values for proper filtering\n- Dashboard bank filter now correctly filters both statistics cards AND trend charts (previously only filtered statistics)\n- E2e tests passing: Bank filtering verified for all three modes (All/Right/Left), trend data updates correctly\n\n**Recommendations Page Fix (October 4, 2025)**\n- Fixed recommendations page to use real CTP data instead of hardcoded mock data\n- Changed CTP query type from `CTP[]` to `CTPWithDetails[]` to include related RTS and district information\n- Mock recommendations now dynamically generated from first 3 CTPs with UCL/LCL boundaries\n- Mock CTP names now show real data: `fullName (rts.code, district.name)` format\n- Updated `actions` field handling: converted to JSON string to match schema type (`string | null`)\n- Enhanced RecommendationCard to parse JSON action strings with safe fallback\n- Mock data now calculates UCL/excess values based on actual CTP boundaries\n\n**Upload History Bug Fix (October 4, 2025)**\n- Fixed `/api/import-model` to correctly create `uploaded_files` records with all required fields:\n  - `originalName`: Original filename from uploaded file\n  - `fileType`: MIME type from multer\n  - `size`: File size in bytes\n  - `status`: Tracking progression (processing → completed/error)\n- Fixed `records_processed` calculation to use actual database counts instead of parser results:\n  - Changed from `result.ctpCount + result.measurementCount + result.vyvodCount` (inflated by duplicates)\n  - To `db.cTP.count() + db.measurements.count() + db.vyvod.count()` (actual inserted records)\n  - Example: Parser reports 15 vyvods but database stores 10 unique (after deduplication) → recordsProcessed = 183,343 (not 183,348)\n- Added `/api/clear-database` endpoint for safe database cleanup in correct dependency order\n- Added import `db` from `./db` to routes.ts for database count queries\n- E2e tests passing: Upload history shows accurate record counts, CTP table displays correctly\n- Created `design_guidelines.md` with Carbon Design System guidelines for industrial dashboard\n\n**Previous Bug Fixes and UI Improvements (October 4, 2025)**\n- Fixed nullable handling in CTP table:\n  - `ctp.rts?.code || '—'` for nullable RTS relations\n  - `ctp.district?.name || '—'` for nullable district relations\n  - `measurement ? measurement.makeupWater.toFixed(1) : '—'` for nullable measurements\n- Updated CTP table to display fullName (or name fallback) for all CTPs\n- All LSP diagnostics resolved\n\n**Model_2.5.20.xlsm Parser and Import System (October 4, 2025)**\n- Added `Vyvod` (heat sources) table to database schema with one-to-many relationship to CTPs\n- Extended CTP model with comprehensive fields:\n  - Basic info: fullName, city, address, yearBuilt\n  - Links: vyvodId (heat source), rtsId, districtId\n  - Comments: commentPTU, commentRTS, commentSKIPiA (from different departments)\n  - Status: operational status and notes\n  - Extended statistics: av365G1, av365G2, min730, min365, min30, min7, percentFromG1, normativMinenergo\n- Created `ModelParser` class (`server/model-parser.ts`) to parse the complete analytical model:\n  - Extracts 419 CTPs with full metadata from \"data ЦТП\" sheet\n  - Imports historical measurements from date columns (Excel format dates 45200+)\n  - Auto-creates unique Vyvod entities from \"Вывод\" column\n  - Batch processing for performance (50 CTPs, 100 measurements per batch)\n  - Case-insensitive column mapping for Russian headers (toLowerCase() fix)\n- Added `/api/import-model` endpoint for uploading Model_2.5.20.xlsm\n- Updated Data Upload UI with dedicated Model Import section\n- Prisma schema migrated to support new fields and relationships\n- Successfully imported 307 CTPs with 183,026 measurements and 15 vyvods (heat sources)\n\n**Auto-creation of RTS and Districts from Excel Filename (October 4, 2025)**\n- Excel parser now extracts district name from filename format: \"ЦТП name, address, code, 3-РТС, Кировский, ...\"\n- File upload system automatically creates RTS if not found (e.g., \"РТС-3\" from \"3-РТС\" in filename)\n- File upload system automatically creates district if not found (e.g., \"Кировский\" after РТС in filename)\n- All CTPs created during upload are now properly linked to the correct RTS and district\n- Database completely cleared for fresh production data import\n\n**Migration to Prisma ORM with PostgreSQL (October 4, 2025)**\n- Migrated from MSSQL to PostgreSQL for development and testing\n- Created virtual PostgreSQL database in Replit environment\n- Updated Prisma schema for PostgreSQL compatibility\n- Fixed Russian character encoding (TEXT fields support UTF-8 in PostgreSQL)\n- Fixed file upload functionality (middleware updated to skip multipart/form-data)\n- Successfully tested with seed data (2 RTS, 10 CTPs, 310 measurements)\n\n**Previous Migration to MSSQL with Prisma ORM**\n- Migrated from Drizzle ORM + PostgreSQL to Prisma ORM + MSSQL\n- All database code updated to work with Microsoft SQL Server\n- Prisma schema created in `prisma/schema.prisma`\n- Database connection configured for both `sqlserver://` and `postgresql://` protocols\n- Storage layer (`server/db-storage.ts`) rewritten for Prisma Client API\n- Type definitions updated in `shared/schema.ts` for Prisma compatibility\n\n# System Architecture\n\n## Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool\n\n**UI Library**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n\n**Routing**: wouter for lightweight client-side routing\n\n**State Management**: TanStack Query (React Query) for server state management with query invalidation and caching\n\n**Key Design Decisions**:\n- Component-based architecture with reusable UI components in `client/src/components/ui/`\n- Page-based routing with dedicated pages in `client/src/pages/` for Dashboard, Control Charts, CTP Table, Trends, Tree view, Recommendations, Analytics, and Data Upload\n- Custom chart components wrapping Recharts library for data visualization\n- Path aliases (`@/`, `@shared/`, `@assets/`) for clean imports\n\n## Backend Architecture\n\n**Framework**: Express.js server with TypeScript\n\n**Database ORM**: Prisma ORM configured for PostgreSQL (development) and Microsoft SQL Server (production)\n\n**File Storage**: Multer for handling Excel file uploads (.xlsx, .xlsm, .xlsb formats)\n\n**API Design**: RESTful API endpoints organized in `server/routes.ts`\n\n**Key Design Decisions**:\n- Database storage implementation (`DbStorage`) implementing `IStorage` interface\n- Separation of concerns with `IStorage` interface defining all data operations\n- Middleware for request logging and JSON parsing with conditional multipart/form-data support\n- Vite integration for development server with HMR support\n- Prisma Client singleton pattern in `server/db.ts` for connection management\n- Content-Type based middleware routing (multipart/form-data bypasses JSON parsing)\n\n## Database Schema\n\n**Database**: PostgreSQL (development), Microsoft SQL Server (production)\n\n**Core Tables**:\n- `rts` - Regional Thermal Stations with location and identification\n- `districts` - Microdistricts linked to RTS\n- `ctp` - Central Thermal Points with control chart boundaries (UCL, CL, LCL) and meter status\n- `measurements` - Daily measurements including makeup water, undermix, flow rates, temperature, and pressure\n- `statistical_params` - Statistical parameters for Shewhart control charts\n- `recommendations` - Automated recommendations based on statistical analysis\n- `uploaded_files` - File upload history and processing status\n\n**Design Rationale**: \n- UUID (VarChar) primary keys for scalability and distributed systems compatibility\n- Denormalized control boundaries stored directly in CTP table for query performance\n- Timestamp tracking on all entities for audit trails\n- TEXT fields for flexible error storage in file uploads\n- Referential integrity with cascade/no-action policies for complex relationships\n\n## Statistical Analysis System\n\n**Control Chart Implementation**: Shewhart control charts for statistical process control\n\n**Statistical Functions**:\n- Mean, standard deviation, and variance calculations\n- Upper Control Limit (UCL), Central Line (CL), Lower Control Limit (LCL) computation\n- Out-of-control point detection\n- Trend analysis across multiple time horizons (day, week, month, year)\n\n**Design Rationale**: Statistical calculations are performed server-side for consistency, with results cached and boundaries stored in the database to avoid repeated calculations.\n\n## External Dependencies\n\n**Database**: Microsoft SQL Server via Prisma Client\n\n**Session Management**: Memory-based sessions (configured for production use with database-backed sessions if needed)\n\n**Excel Processing**: \n- Multer for file uploads\n- xlsx library for parsing Excel files (.xlsx, .xlsm, .xlsb formats)\n\n**UI Components**: \n- Radix UI primitives for accessible component foundation\n- Recharts for data visualization\n- Tailwind CSS for styling with CSS variables for theming\n\n**Form Management**: React Hook Form with Zod validation via `@hookform/resolvers`\n\n**Development Tools**: \n- Replit-specific plugins for development environment integration\n- TypeScript for type safety across the stack\n- ESBuild for production bundling\n- Prisma CLI for schema management and migrations\n\n**Design Rationale**: The application uses established, well-maintained libraries to ensure reliability and minimize custom code maintenance. Prisma provides type-safe database access with excellent TypeScript integration.\n\n## Database Setup\n\n**Connection String Format (MSSQL)**:\n```\nsqlserver://host:port;database=dbname;user=username;password=password;encrypt=true;trustServerCertificate=true\n```\n\n**Commands**:\n- `npx prisma generate` - Generate Prisma Client after schema changes\n- `npx prisma db push` - Sync Prisma schema with database (development)\n- `npx prisma studio` - Open Prisma Studio for database GUI\n\n**Schema Location**: `prisma/schema.prisma`\n","size_bytes":12875},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      borderWidth: {\n        '3': '3px',\n      },\n      zIndex: {\n        '100': '100',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2852},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\n\nconst jsonParser = express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n});\n\nconst urlencodedParser = express.urlencoded({ extended: false });\n\napp.use((req, res, next) => {\n  const contentType = req.headers['content-type'] || '';\n  if (contentType.includes('multipart/form-data')) {\n    return next();\n  }\n  jsonParser(req, res, next);\n});\n\napp.use((req, res, next) => {\n  const contentType = req.headers['content-type'] || '';\n  if (contentType.includes('multipart/form-data')) {\n    return next();\n  }\n  urlencodedParser(req, res, next);\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const isWindows = process.platform === 'win32';\n  \n  // On Windows, reusePort is not supported, so we omit it\n  const listenOptions: any = {\n    port,\n    host: \"0.0.0.0\",\n  };\n  \n  if (!isWindows) {\n    listenOptions.reusePort = true;\n  }\n  \n  server.listen(listenOptions, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2841},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { DbStorage } from \"./db-storage\";\nimport { ExcelParser } from \"./excel-parser\";\nimport { TrendsCalculator } from \"./trends-calculator\";\nimport { insertMeasurementSchema, insertRecommendationSchema, insertUploadedFileSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { db } from \"./db\";\n\nconst storage = new DbStorage();\nconst trendsCalculator = new TrendsCalculator(storage);\n\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  fileFilter: (req, file, cb) => {\n    // Fix filename encoding issue (Latin-1 to UTF-8)\n    file.originalname = Buffer.from(file.originalname, 'latin1').toString('utf8');\n    \n    const allowedTypes = [\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\n      'application/vnd.ms-excel.sheet.macroEnabled.12', // .xlsm\n      'application/vnd.ms-excel.sheet.binary.macroEnabled.12', // .xlsb\n    ];\n    \n    if (allowedTypes.includes(file.mimetype) || \n        file.originalname.match(/\\.(xlsx|xlsm|xlsb)$/i)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Поддерживаются только файлы Excel (XLSX, XLSM, XLSB)'));\n    }\n  },\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // RTS routes\n  app.get(\"/api/rts\", async (req, res) => {\n    try {\n      const rtsList = await storage.getRTSList();\n      res.json(rtsList);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения списка РТС\", error });\n    }\n  });\n\n  app.get(\"/api/rts/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getRTSWithStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения статистики РТС\", error });\n    }\n  });\n\n  app.get(\"/api/rts/:id\", async (req, res) => {\n    try {\n      const rts = await storage.getRTSById(req.params.id);\n      if (!rts) {\n        return res.status(404).json({ message: \"РТС не найден\" });\n      }\n      res.json(rts);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения РТС\", error });\n    }\n  });\n\n  // Districts routes\n  app.get(\"/api/districts\", async (req, res) => {\n    try {\n      const { rtsId } = req.query;\n      if (rtsId && typeof rtsId === 'string') {\n        const districts = await storage.getDistrictsByRTS(rtsId);\n        res.json(districts);\n      } else {\n        res.status(400).json({ message: \"Требуется параметр rtsId\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения районов\", error });\n    }\n  });\n\n  // CTP routes\n  app.get(\"/api/ctp\", async (req, res) => {\n    try {\n      const { rtsId, districtId, status } = req.query;\n      const filters: any = {};\n      \n      if (rtsId && typeof rtsId === 'string') filters.rtsId = rtsId;\n      if (districtId && typeof districtId === 'string') filters.districtId = districtId;\n      if (status && typeof status === 'string') filters.status = status;\n      \n      const ctpList = await storage.getCTPList(filters);\n      res.json(ctpList);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения списка ЦТП\", error });\n    }\n  });\n\n  app.get(\"/api/ctp/:id\", async (req, res) => {\n    try {\n      const ctp = await storage.getCTPById(req.params.id);\n      if (!ctp) {\n        return res.status(404).json({ message: \"ЦТП не найден\" });\n      }\n      res.json(ctp);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения ЦТП\", error });\n    }\n  });\n\n  app.get(\"/api/ctp/:id/measurements\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : undefined;\n      const end = endDate ? new Date(endDate as string) : undefined;\n      \n      const measurements = await storage.getMeasurements(req.params.id, start, end);\n      res.json(measurements);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения измерений\", error });\n    }\n  });\n\n  app.get(\"/api/ctp/:id/control-chart\", async (req, res) => {\n    try {\n      const { period = \"60\" } = req.query;\n      const periodDays = parseInt(period as string, 10);\n      \n      const data = await storage.getControlChartData(req.params.id, periodDays);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения данных контрольной карты\", error });\n    }\n  });\n\n  // Measurements routes\n  app.post(\"/api/measurements\", async (req, res) => {\n    try {\n      const validatedData = insertMeasurementSchema.parse(req.body);\n      const measurement = await storage.createMeasurement(validatedData);\n      res.status(201).json(measurement);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Неверные данные\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Ошибка создания измерения\", error });\n    }\n  });\n\n  // Statistical parameters routes\n  app.post(\"/api/ctp/:id/calculate-boundaries\", async (req, res) => {\n    try {\n      const boundaries = await storage.calculateControlBoundaries(req.params.id);\n      await storage.updateCTPBoundaries(req.params.id, boundaries);\n      res.json(boundaries);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка расчета контрольных границ\", error });\n    }\n  });\n\n  // Recommendations routes\n  app.get(\"/api/recommendations\", async (req, res) => {\n    try {\n      const { ctpId, type, priority, status } = req.query;\n      const filters: any = {};\n      \n      if (ctpId && typeof ctpId === 'string') filters.ctpId = ctpId;\n      if (type && typeof type === 'string') filters.type = type;\n      if (priority && typeof priority === 'string') filters.priority = priority;\n      if (status && typeof status === 'string') filters.status = status;\n      \n      const recommendations = await storage.getRecommendations(filters);\n      res.json(recommendations);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения рекомендаций\", error });\n    }\n  });\n\n  app.post(\"/api/recommendations\", async (req, res) => {\n    try {\n      const validatedData = insertRecommendationSchema.parse(req.body);\n      const recommendation = await storage.createRecommendation(validatedData);\n      res.status(201).json(recommendation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Неверные данные\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Ошибка создания рекомендации\", error });\n    }\n  });\n\n  app.patch(\"/api/recommendations/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status || typeof status !== 'string') {\n        return res.status(400).json({ message: \"Требуется параметр status\" });\n      }\n      \n      await storage.updateRecommendationStatus(req.params.id, status);\n      res.json({ message: \"Статус рекомендации обновлен\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка обновления статуса рекомендации\", error });\n    }\n  });\n\n  // Analytics and trends routes\n  app.get(\"/api/trends/:period\", async (req, res) => {\n    try {\n      const { period } = req.params;\n      const { rtsId, rtsFilter, ctpId } = req.query;\n      \n      if (!['day', 'week', 'month', 'year'].includes(period)) {\n        return res.status(400).json({ message: \"Неверный период\" });\n      }\n      \n      const trends = await storage.getTrendData(\n        period as any, \n        rtsId as string, \n        rtsFilter as string,\n        ctpId as string\n      );\n      res.json(trends);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения трендов\", error });\n    }\n  });\n\n  app.get(\"/api/trends/:period/changes\", async (req, res) => {\n    try {\n      const { period } = req.params;\n      \n      if (!['week', 'month', 'year'].includes(period)) {\n        return res.status(400).json({ message: \"Неверный период\" });\n      }\n      \n      const changes = await trendsCalculator.getTopChanges(period as any);\n      res.json(changes);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения изменений трендов\", error });\n    }\n  });\n\n  app.get(\"/api/trends/:period/rts-stats\", async (req, res) => {\n    try {\n      const { period } = req.params;\n      \n      if (!['week', 'month', 'year'].includes(period)) {\n        return res.status(400).json({ message: \"Неверный период\" });\n      }\n      \n      const stats = await trendsCalculator.getRTSStats(period as any);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения статистики РТС\", error });\n    }\n  });\n\n  app.get(\"/api/ctp/:id/weekly-change\", async (req, res) => {\n    try {\n      const change = await trendsCalculator.calculateCTPWeeklyChange(req.params.id);\n      res.json({ change });\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка расчета недельного изменения\", error });\n    }\n  });\n\n  app.get(\"/api/rts/:id/weekly-change\", async (req, res) => {\n    try {\n      const change = await trendsCalculator.calculateRTSWeeklyChange(req.params.id);\n      res.json({ change });\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка расчета недельного изменения РТС\", error });\n    }\n  });\n\n  app.get(\"/api/trends/overall-change/:period\", async (req, res) => {\n    try {\n      const { period } = req.params;\n      \n      if (!['week', 'month', 'year'].includes(period)) {\n        return res.status(400).json({ message: \"Неверный период\" });\n      }\n      \n      const change = await trendsCalculator.calculateOverallChange(period as any);\n      res.json({ change });\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка расчета общего изменения\", error });\n    }\n  });\n\n  // File upload routes\n  app.post(\"/api/upload\", upload.array('files'), async (req, res) => {\n    try {\n      if (!req.files || !Array.isArray(req.files)) {\n        return res.status(400).json({ message: \"Файлы не были загружены\" });\n      }\n\n      const uploadResults = [];\n      \n      for (const file of req.files) {\n        const fileData = insertUploadedFileSchema.parse({\n          filename: file.filename || file.originalname,\n          originalName: file.originalname,\n          fileType: file.originalname.split('.').pop()?.toLowerCase() || 'unknown',\n          size: file.size,\n          status: 'processing',\n        });\n\n        const uploadedFile = await storage.createUploadedFile(fileData);\n        uploadResults.push(uploadedFile);\n\n        // Process Excel file asynchronously\n        processExcelFile(file.buffer, file.originalname, uploadedFile.id).catch(error => {\n          console.error('Error processing file:', error);\n          storage.updateFileStatus(uploadedFile.id, 'error', 0, [String(error)]);\n        });\n      }\n\n      res.json({ \n        message: `Загружено ${uploadResults.length} файлов`,\n        files: uploadResults \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Неверные данные файла\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Ошибка загрузки файла\", error });\n    }\n  });\n\n  async function processExcelFile(buffer: Buffer, filename: string, uploadId: string) {\n    try {\n      const parsedSheets = await ExcelParser.parseFile(buffer, filename);\n      let totalRecords = 0;\n      const errors: string[] = [];\n\n      // Pre-load reference data once\n      let ctpList = await storage.getCTPList();\n      let rtsList = await storage.getRTSList();\n      const ctpCache = new Map(ctpList.map(c => [c.name, c]));\n      const rtsCache = new Map(rtsList.map(r => [r.name, r]));\n      const districtCache = new Map<string, any>();\n\n      // Load all districts into cache\n      for (const rts of rtsList) {\n        const districts = await storage.getDistrictsByRTS(rts.id);\n        for (const district of districts) {\n          districtCache.set(`${rts.id}:${district.name}`, district);\n        }\n      }\n      \n      // Extract RTS and District from file metadata\n      const fileRtsNumber = parsedSheets[0]?.metadata?.rtsNumber;\n      const fileDistrictName = parsedSheets[0]?.metadata?.districtName;\n      \n      console.log(`📦 Метаданные файла: РТС=\"${fileRtsNumber}\", Район=\"${fileDistrictName}\"`);\n      \n      // Auto-create RTS if not found\n      let targetRTS = rtsList[0] || null; // Default fallback\n      if (fileRtsNumber) {\n        const rtsName = `РТС-${fileRtsNumber}`;\n        let foundRTS = rtsCache.get(rtsName) || rtsList.find(r => r.name === rtsName);\n        \n        if (!foundRTS) {\n          console.log(`🆕 Создание нового РТС: ${rtsName}`);\n          foundRTS = await storage.createRTS({\n            name: rtsName,\n            code: `RTS-${fileRtsNumber}`,\n            location: 'Новосибирск'\n          });\n          rtsCache.set(rtsName, foundRTS);\n          rtsList.push(foundRTS);\n        }\n        targetRTS = foundRTS;\n      }\n      \n      // Auto-create District if not found\n      let targetDistrict: any;\n      if (fileDistrictName && targetRTS) {\n        const districtKey = `${targetRTS.id}:${fileDistrictName}`;\n        targetDistrict = districtCache.get(districtKey);\n        \n        if (!targetDistrict) {\n          console.log(`🆕 Создание нового района: ${fileDistrictName} для ${targetRTS.name}`);\n          targetDistrict = await storage.createDistrict({\n            name: fileDistrictName,\n            rtsId: targetRTS.id\n          });\n          districtCache.set(districtKey, targetDistrict);\n        }\n      } else {\n        // Fallback to existing district\n        const districts = await storage.getDistrictsByRTS(targetRTS.id);\n        targetDistrict = districts[0];\n      }\n      \n      if (!targetRTS || !targetDistrict) {\n        throw new Error('Не удалось определить РТС или район для загрузки данных');\n      }\n      \n      console.log(`✅ Используется РТС: ${targetRTS.name}, Район: ${targetDistrict.name}`);\n\n      for (const sheet of parsedSheets) {\n        try {\n          const measurements = ExcelParser.parseMeasurements(sheet);\n          const { valid, errors: validationErrors } = ExcelParser.validateMeasurementData(measurements);\n          \n          errors.push(...validationErrors);\n\n          // Batch process measurements\n          const measurementBatch: any[] = [];\n          const affectedCtpIds = new Set<string>();\n\n          for (const measurement of valid) {\n            try {\n              // Find or create CTP using cache\n              let ctp = ctpCache.get(measurement.ctpName);\n\n              if (!ctp) {\n                // Extract code from name if possible (e.g., \"ЦТП-125\" -> \"125\")\n                const codeMatch = measurement.ctpName.match(/\\d+/);\n                const code = measurement.ctpCode || codeMatch?.[0] || measurement.ctpName;\n\n                const newCtp = await storage.createCTP({\n                  name: measurement.ctpName,\n                  code: code,\n                  rtsId: targetRTS.id,\n                  districtId: targetDistrict.id,\n                  hasMeter: true,\n                  meterStatus: 'working',\n                });\n                \n                // Get full CTP with relations\n                ctp = await storage.getCTPById(newCtp.id);\n                if (ctp) {\n                  ctpCache.set(measurement.ctpName, ctp);\n                }\n              }\n\n              if (!ctp) {\n                throw new Error(`Не удалось создать или найти ЦТП ${measurement.ctpName}`);\n              }\n\n              measurementBatch.push({\n                ctpId: ctp.id,\n                date: measurement.date,\n                makeupWater: measurement.makeupWater,\n                undermix: measurement.undermix,\n                flowG1: measurement.flowG1,\n                temperature: measurement.temperature,\n                pressure: measurement.pressure,\n              });\n\n              affectedCtpIds.add(ctp.id);\n            } catch (error) {\n              errors.push(`Ошибка подготовки данных для ${measurement.ctpName}: ${error}`);\n            }\n          }\n\n          // Batch insert measurements (insert in chunks of 100)\n          const BATCH_SIZE = 100;\n          for (let i = 0; i < measurementBatch.length; i += BATCH_SIZE) {\n            const chunk = measurementBatch.slice(i, i + BATCH_SIZE);\n            for (const meas of chunk) {\n              await storage.createMeasurement(meas);\n              totalRecords++;\n            }\n            \n            // Log progress every batch\n            if (i % 500 === 0 && i > 0) {\n              console.log(`📊 Обработано ${i} из ${measurementBatch.length} записей...`);\n            }\n          }\n\n          console.log(`✅ Обработано ${measurementBatch.length} записей из листа ${sheet.sheetName}`);\n\n          // Update control boundaries only for affected CTPs\n          for (const ctpId of Array.from(affectedCtpIds)) {\n            const measurements = await storage.getMeasurements(ctpId);\n            if (measurements.length >= 10) {\n              const boundaries = await storage.calculateControlBoundaries(ctpId);\n              await storage.updateCTPBoundaries(ctpId, boundaries);\n              await storage.updateStatisticalParams({\n                ctpId: ctpId,\n                mean: boundaries.cl,\n                stdDev: (boundaries.ucl - boundaries.cl) / 3,\n                ucl: boundaries.ucl,\n                cl: boundaries.cl,\n                lcl: boundaries.lcl,\n                sampleSize: measurements.length,\n              });\n            }\n          }\n        } catch (error) {\n          errors.push(`Ошибка обработки листа ${sheet.sheetName}: ${error}`);\n        }\n      }\n\n      // Update file status\n      if (errors.length > 0 && totalRecords === 0) {\n        await storage.updateFileStatus(uploadId, 'error', totalRecords, errors);\n      } else {\n        await storage.updateFileStatus(uploadId, 'completed', totalRecords, errors.length > 0 ? errors : undefined);\n      }\n\n      console.log(`🎉 Загрузка завершена! Обработано ${totalRecords} записей`);\n    } catch (error) {\n      await storage.updateFileStatus(uploadId, 'error', 0, [String(error)]);\n    }\n  }\n\n  app.get(\"/api/upload/history\", async (req, res) => {\n    try {\n      const history = await storage.getUploadHistory();\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения истории загрузок\", error });\n    }\n  });\n\n  // Import Model_2.5.20.xlsm route\n  app.post(\"/api/import-model\", upload.single('file'), async (req, res) => {\n    let uploadId: string | null = null;\n    \n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"Файл не был загружен\" });\n      }\n\n      console.log(`📥 Начало импорта модели из файла: ${req.file.originalname}`);\n\n      // Создаем запись в истории загрузок\n      const uploadedFile = await storage.createUploadedFile({\n        filename: req.file.originalname,\n        originalName: req.file.originalname,\n        fileType: req.file.mimetype,\n        size: req.file.size,\n        status: 'processing'\n      });\n      uploadId = uploadedFile.id;\n\n      // Динамический импорт ModelParser\n      const { ModelParser } = await import('./model-parser.js');\n      const parser = new ModelParser(req.file.buffer);\n      \n      const result = await parser.parseAndImport();\n\n      console.log(`✅ Импорт модели завершен:`, result);\n\n      // Подсчитываем реально созданные записи в базе данных\n      const actualCTPCount = await db.cTP.count();\n      const actualMeasurementCount = await db.measurements.count();\n      const actualVyvodCount = await db.vyvod.count();\n      const totalRecords = actualCTPCount + actualMeasurementCount + actualVyvodCount;\n\n      console.log(`📊 Реально создано записей: ${actualCTPCount} ЦТП + ${actualMeasurementCount} измерений + ${actualVyvodCount} выводов = ${totalRecords}`);\n\n      // Обновляем статус загрузки\n      await storage.updateFileStatus(\n        uploadId, \n        'completed', \n        totalRecords,\n        result.errors.length > 0 ? result.errors : undefined\n      );\n\n      res.json({\n        message: 'Импорт модели успешно завершен',\n        ...result\n      });\n\n    } catch (error) {\n      console.error('❌ Ошибка импорта модели:', error);\n      \n      // Обновляем статус загрузки как ошибку\n      if (uploadId) {\n        await storage.updateFileStatus(\n          uploadId, \n          'error', \n          0, \n          [error instanceof Error ? error.message : String(error)]\n        );\n      }\n      \n      res.status(500).json({ \n        message: \"Ошибка импорта модели\", \n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Dashboard summary route\n  app.get(\"/api/dashboard/summary\", async (req, res) => {\n    try {\n      const rtsList = await storage.getRTSWithStats();\n      const recommendations = await storage.getRecommendations({ status: 'open' });\n      const criticalRecommendations = recommendations.filter(r => r.priority === 'critical');\n      \n      const totalMakeupWater = rtsList.reduce((sum, rts) => sum + rts.totalMakeupWater, 0);\n      const totalCTP = rtsList.reduce((sum, rts) => sum + rts.ctpCount, 0);\n      const totalCritical = rtsList.reduce((sum, rts) => sum + rts.criticalCount, 0);\n      const totalWarning = rtsList.reduce((sum, rts) => sum + rts.warningCount, 0);\n      const totalNormal = rtsList.reduce((sum, rts) => sum + rts.normalCount, 0);\n      \n      const summary = {\n        currentMakeupWater: Math.round(totalMakeupWater),\n        ctpRequiringAttention: totalCritical + totalWarning,\n        ctpInNormal: Math.round((totalNormal / totalCTP) * 100),\n        outOfControlCount: totalCritical,\n        rtsStats: rtsList,\n      };\n\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ message: \"Ошибка получения сводки дашборда\", error });\n    }\n  });\n\n  // Clear database\n  app.post(\"/api/clear-database\", async (req, res) => {\n    try {\n      console.log('🗑️  Начало очистки базы данных...');\n      \n      // Удаляем в правильном порядке (с учетом внешних ключей)\n      await db.measurements.deleteMany({});\n      await db.statisticalParams.deleteMany({});\n      await db.recommendations.deleteMany({});\n      await db.uploadedFiles.deleteMany({});\n      await db.cTP.deleteMany({});\n      await db.vyvod.deleteMany({});\n      await db.districts.deleteMany({});\n      await db.rTS.deleteMany({});\n      \n      console.log('✅ База данных полностью очищена');\n      \n      res.json({ \n        message: 'База данных успешно очищена',\n        cleared: {\n          measurements: true,\n          statisticalParams: true,\n          recommendations: true,\n          uploadedFiles: true,\n          ctp: true,\n          vyvod: true,\n          districts: true,\n          rts: true\n        }\n      });\n    } catch (error) {\n      console.error('Clear database error:', error);\n      res.status(500).json({ message: \"Ошибка очистки базы данных\", error: String(error) });\n    }\n  });\n\n  // Seed database with test data\n  app.post(\"/api/seed\", async (req, res) => {\n    try {\n      const crypto = await import('crypto');\n      \n      // Create RTS\n      const rts1 = await storage.createRTS({\n        name: \"РТС-1 Центральная\",\n        code: \"RTS-1\",\n        location: \"ул. Ленина, 50\"\n      });\n      \n      const rts2 = await storage.createRTS({\n        name: \"РТС-2 Северная\",\n        code: \"RTS-2\",\n        location: \"пр. Карла Маркса, 20\"\n      });\n\n      // Create Districts\n      const district1 = await storage.createDistrict({\n        rtsId: rts1.id,\n        name: \"Центральный район\"\n      });\n\n      const district2 = await storage.createDistrict({\n        rtsId: rts2.id,\n        name: \"Северный район\"\n      });\n\n      // Create CTPs\n      const ctps = [];\n      for (let i = 1; i <= 10; i++) {\n        const rts = i <= 5 ? rts1 : rts2;\n        const district = i <= 5 ? district1 : district2;\n        \n        const ctp = await storage.createCTP({\n          name: `ЦТП-${100 + i}`,\n          code: `${100 + i}`,\n          rtsId: rts.id,\n          districtId: district.id,\n          hasMeter: true,\n          meterStatus: i % 3 === 0 ? 'not_working' : 'working'\n        });\n        ctps.push(ctp);\n      }\n\n      // Create measurements for last 30 days\n      const now = new Date();\n      for (const ctp of ctps) {\n        for (let day = 30; day >= 0; day--) {\n          const date = new Date(now);\n          date.setDate(date.getDate() - day);\n          \n          const baseValue = 50 + Math.random() * 30;\n          const variation = (Math.random() - 0.5) * 10;\n          \n          await storage.createMeasurement({\n            ctpId: ctp.id,\n            date: date,\n            makeupWater: baseValue + variation,\n            undermix: Math.random() * 5,\n            flowG1: 100 + Math.random() * 50,\n            temperature: 70 + Math.random() * 20,\n            pressure: 4 + Math.random() * 2\n          });\n        }\n      }\n\n      // Calculate control boundaries\n      for (const ctp of ctps) {\n        const boundaries = await storage.calculateControlBoundaries(ctp.id);\n        await storage.updateCTPBoundaries(ctp.id, boundaries);\n        \n        const measurements = await storage.getMeasurements(ctp.id);\n        await storage.updateStatisticalParams({\n          ctpId: ctp.id,\n          mean: boundaries.cl,\n          stdDev: (boundaries.ucl - boundaries.cl) / 3,\n          ucl: boundaries.ucl,\n          cl: boundaries.cl,\n          lcl: boundaries.lcl,\n          sampleSize: measurements.length,\n        });\n      }\n\n      // Create some recommendations\n      await storage.createRecommendation({\n        ctpId: ctps[0].id,\n        type: 'high_consumption',\n        priority: 'critical',\n        title: 'Высокий расход подпиточной воды',\n        description: 'Обнаружен повышенный расход воды, превышающий верхнюю контрольную границу',\n        actions: 'Проверить систему на утечки, провести диагностику оборудования',\n        status: 'open'\n      });\n\n      await storage.createRecommendation({\n        ctpId: ctps[1].id,\n        type: 'meter_failure',\n        priority: 'warning',\n        title: 'Неисправность прибора учета',\n        description: 'Прибор учета не передает данные более 24 часов',\n        actions: 'Проверить связь с прибором учета, при необходимости заменить',\n        status: 'open'\n      });\n\n      res.json({ \n        message: 'База данных успешно заполнена тестовыми данными',\n        created: {\n          rts: 2,\n          districts: 2,\n          ctps: ctps.length,\n          measurements: ctps.length * 31,\n          recommendations: 2\n        }\n      });\n    } catch (error) {\n      console.error('Seed error:', error);\n      res.status(500).json({ message: \"Ошибка заполнения базы данных\", error: String(error) });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":29066},"server/storage.ts":{"content":"import { type RTS, type InsertRTS, type District, type InsertDistrict, type CTP, type InsertCTP, \n         type Measurement, type InsertMeasurement, type StatisticalParams, type InsertStatisticalParams,\n         type Recommendation, type InsertRecommendation, type UploadedFile, type InsertUploadedFile,\n         type CTPWithDetails, type RTSWithStats, type TrendData, type ControlChartData } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // RTS methods\n  getRTSList(): Promise<RTS[]>;\n  getRTSById(id: string): Promise<RTS | undefined>;\n  createRTS(rts: InsertRTS): Promise<RTS>;\n  getRTSWithStats(): Promise<RTSWithStats[]>;\n\n  // District methods\n  getDistrictsByRTS(rtsId: string): Promise<District[]>;\n  createDistrict(district: InsertDistrict): Promise<District>;\n\n  // CTP methods\n  getCTPList(filters?: { rtsId?: string; districtId?: string; status?: string }): Promise<CTPWithDetails[]>;\n  getCTPById(id: string): Promise<CTPWithDetails | undefined>;\n  createCTP(ctp: InsertCTP): Promise<CTP>;\n  updateCTPBoundaries(ctpId: string, boundaries: { ucl: number; cl: number; lcl: number }): Promise<void>;\n\n  // Measurements methods\n  getMeasurements(ctpId: string, startDate?: Date, endDate?: Date): Promise<Measurement[]>;\n  createMeasurement(measurement: InsertMeasurement): Promise<Measurement>;\n  getLatestMeasurements(): Promise<Map<string, Measurement>>;\n\n  // Statistical methods\n  getStatisticalParams(ctpId: string): Promise<StatisticalParams | undefined>;\n  updateStatisticalParams(params: InsertStatisticalParams): Promise<StatisticalParams>;\n  calculateControlBoundaries(ctpId: string): Promise<{ ucl: number; cl: number; lcl: number }>;\n\n  // Recommendations methods\n  getRecommendations(filters?: { ctpId?: string; type?: string; priority?: string; status?: string }): Promise<Recommendation[]>;\n  createRecommendation(recommendation: InsertRecommendation): Promise<Recommendation>;\n  updateRecommendationStatus(id: string, status: string): Promise<void>;\n\n  // Trends and Analytics\n  getTrendData(period: 'day' | 'week' | 'month' | 'year', rtsId?: string, rtsFilter?: string, ctpId?: string): Promise<TrendData[]>;\n  getControlChartData(ctpId: string, period: number): Promise<ControlChartData[]>;\n\n  // File upload\n  createUploadedFile(file: InsertUploadedFile): Promise<UploadedFile>;\n  getUploadHistory(): Promise<UploadedFile[]>;\n  updateFileStatus(id: string, status: string, recordsProcessed?: number, errors?: any[]): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private rtsData: Map<string, RTS> = new Map();\n  private districtsData: Map<string, District> = new Map();\n  private ctpData: Map<string, CTP> = new Map();\n  private measurementsData: Map<string, Measurement> = new Map();\n  private statisticalParamsData: Map<string, StatisticalParams> = new Map();\n  private recommendationsData: Map<string, Recommendation> = new Map();\n  private uploadedFilesData: Map<string, UploadedFile> = new Map();\n\n  constructor() {\n    this.initializeTestData();\n  }\n\n  private initializeTestData(): void {\n    // Initialize with sample data structure based on the documents\n    const rts1: RTS = {\n      id: \"rts-1\",\n      name: \"ТЭЦ-5\",\n      code: \"РТС-1\",\n      location: \"Правый берег\",\n      createdAt: new Date(),\n    };\n\n    const rts2: RTS = {\n      id: \"rts-2\",\n      name: \"ТЭЦ-3\",\n      code: \"РТС-2\",\n      location: \"Левый берег\",\n      createdAt: new Date(),\n    };\n\n    const rts3: RTS = {\n      id: \"rts-3\",\n      name: \"ТЭЦ-2\",\n      code: \"РТС-3\",\n      location: \"Правый берег\",\n      createdAt: new Date(),\n    };\n\n    const rts4: RTS = {\n      id: \"rts-4\",\n      name: \"ТЭЦ-4\",\n      code: \"РТС-4\",\n      location: \"Левый берег\",\n      createdAt: new Date(),\n    };\n\n    const rts5: RTS = {\n      id: \"rts-5\",\n      name: \"КРК\",\n      code: \"РТС-5\",\n      location: \"Правый берег\",\n      createdAt: new Date(),\n    };\n\n    [rts1, rts2, rts3, rts4, rts5].forEach(rts => this.rtsData.set(rts.id, rts));\n\n    // Districts\n    const districts = [\n      { id: \"district-1\", name: \"Ленинский\", rtsId: \"rts-1\", createdAt: new Date() },\n      { id: \"district-2\", name: \"Советский\", rtsId: \"rts-2\", createdAt: new Date() },\n      { id: \"district-3\", name: \"Кировский\", rtsId: \"rts-4\", createdAt: new Date() },\n    ];\n    districts.forEach(district => this.districtsData.set(district.id, district));\n\n    // Sample CTPs with control boundaries\n    const ctps: CTP[] = [\n      {\n        id: \"ctp-125\",\n        name: \"ЦТП-125\",\n        code: \"125\",\n        rtsId: \"rts-1\",\n        districtId: \"district-1\",\n        ucl: 36.1,\n        cl: 32.5,\n        lcl: 28.2,\n        hasMeter: true,\n        meterStatus: \"working\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"ctp-156\",\n        name: \"ЦТП-156\",\n        code: \"156\",\n        rtsId: \"rts-4\",\n        districtId: \"district-3\",\n        ucl: 42.5,\n        cl: 38.2,\n        lcl: 33.5,\n        hasMeter: true,\n        meterStatus: \"working\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"ctp-234\",\n        name: \"ЦТП-234\",\n        code: \"234\",\n        rtsId: \"rts-2\",\n        districtId: \"district-2\",\n        ucl: 24.8,\n        cl: 21.2,\n        lcl: 17.9,\n        hasMeter: true,\n        meterStatus: \"working\",\n        createdAt: new Date(),\n      },\n    ];\n    ctps.forEach(ctp => this.ctpData.set(ctp.id, ctp));\n  }\n\n  async getRTSList(): Promise<RTS[]> {\n    return Array.from(this.rtsData.values());\n  }\n\n  async getRTSById(id: string): Promise<RTS | undefined> {\n    return this.rtsData.get(id);\n  }\n\n  async createRTS(rts: InsertRTS): Promise<RTS> {\n    const id = randomUUID();\n    const newRTS: RTS = { ...rts, id, createdAt: new Date() };\n    this.rtsData.set(id, newRTS);\n    return newRTS;\n  }\n\n  async getRTSWithStats(): Promise<RTSWithStats[]> {\n    const rtsList = await this.getRTSList();\n    const stats: RTSWithStats[] = [];\n\n    for (const rts of rtsList) {\n      const ctpList = Array.from(this.ctpData.values()).filter(ctp => ctp.rtsId === rts.id);\n      const latestMeasurements = await this.getLatestMeasurements();\n      \n      let totalMakeupWater = 0;\n      let criticalCount = 0;\n      let warningCount = 0;\n      let normalCount = 0;\n\n      for (const ctp of ctpList) {\n        const measurement = latestMeasurements.get(ctp.id);\n        if (measurement) {\n          totalMakeupWater += measurement.makeupWater;\n          \n          if (measurement.makeupWater > (ctp.ucl || 0)) {\n            criticalCount++;\n          } else if (measurement.makeupWater > (ctp.cl || 0)) {\n            warningCount++;\n          } else {\n            normalCount++;\n          }\n        }\n      }\n\n      stats.push({\n        ...rts,\n        totalMakeupWater,\n        ctpCount: ctpList.length,\n        criticalCount,\n        warningCount,\n        normalCount,\n      });\n    }\n\n    return stats;\n  }\n\n  async getDistrictsByRTS(rtsId: string): Promise<District[]> {\n    return Array.from(this.districtsData.values()).filter(district => district.rtsId === rtsId);\n  }\n\n  async createDistrict(district: InsertDistrict): Promise<District> {\n    const id = randomUUID();\n    const newDistrict: District = { \n      ...district, \n      id, \n      rtsId: district.rtsId ?? null,\n      createdAt: new Date() \n    };\n    this.districtsData.set(id, newDistrict);\n    return newDistrict;\n  }\n\n  async getCTPList(filters?: { rtsId?: string; districtId?: string; status?: string }): Promise<CTPWithDetails[]> {\n    let ctpList = Array.from(this.ctpData.values());\n\n    if (filters?.rtsId) {\n      ctpList = ctpList.filter(ctp => ctp.rtsId === filters.rtsId);\n    }\n    if (filters?.districtId) {\n      ctpList = ctpList.filter(ctp => ctp.districtId === filters.districtId);\n    }\n\n    const latestMeasurements = await this.getLatestMeasurements();\n    \n    const result: CTPWithDetails[] = [];\n    for (const ctp of ctpList) {\n      const rts = this.rtsData.get(ctp.rtsId!);\n      const district = this.districtsData.get(ctp.districtId!);\n      const latestMeasurement = latestMeasurements.get(ctp.id);\n      const statisticalParams = this.statisticalParamsData.get(ctp.id);\n      const recommendations = Array.from(this.recommendationsData.values())\n        .filter(rec => rec.ctpId === ctp.id);\n\n      if (rts && district) {\n        result.push({\n          ...ctp,\n          rts,\n          district,\n          latestMeasurement,\n          statisticalParams,\n          recommendations,\n        });\n      }\n    }\n\n    return result;\n  }\n\n  async getCTPById(id: string): Promise<CTPWithDetails | undefined> {\n    const ctp = this.ctpData.get(id);\n    if (!ctp) return undefined;\n\n    const rts = this.rtsData.get(ctp.rtsId!);\n    const district = this.districtsData.get(ctp.districtId!);\n    const latestMeasurements = await this.getLatestMeasurements();\n    const latestMeasurement = latestMeasurements.get(ctp.id);\n    const statisticalParams = this.statisticalParamsData.get(ctp.id);\n    const recommendations = Array.from(this.recommendationsData.values())\n      .filter(rec => rec.ctpId === ctp.id);\n\n    if (rts && district) {\n      return {\n        ...ctp,\n        rts,\n        district,\n        latestMeasurement,\n        statisticalParams,\n        recommendations,\n      };\n    }\n\n    return undefined;\n  }\n\n  async createCTP(ctp: InsertCTP): Promise<CTP> {\n    const id = randomUUID();\n    const newCTP: CTP = { \n      ...ctp, \n      id, \n      rtsId: ctp.rtsId ?? null,\n      districtId: ctp.districtId ?? null,\n      ucl: ctp.ucl ?? null,\n      cl: ctp.cl ?? null,\n      lcl: ctp.lcl ?? null,\n      hasMeter: ctp.hasMeter ?? null,\n      meterStatus: ctp.meterStatus ?? null,\n      createdAt: new Date() \n    };\n    this.ctpData.set(id, newCTP);\n    return newCTP;\n  }\n\n  async updateCTPBoundaries(ctpId: string, boundaries: { ucl: number; cl: number; lcl: number }): Promise<void> {\n    const ctp = this.ctpData.get(ctpId);\n    if (ctp) {\n      this.ctpData.set(ctpId, { ...ctp, ...boundaries });\n    }\n  }\n\n  async getMeasurements(ctpId: string, startDate?: Date, endDate?: Date): Promise<Measurement[]> {\n    let measurements = Array.from(this.measurementsData.values())\n      .filter(measurement => measurement.ctpId === ctpId);\n\n    if (startDate) {\n      measurements = measurements.filter(m => m.date >= startDate);\n    }\n    if (endDate) {\n      measurements = measurements.filter(m => m.date <= endDate);\n    }\n\n    return measurements.sort((a, b) => a.date.getTime() - b.date.getTime());\n  }\n\n  async createMeasurement(measurement: InsertMeasurement): Promise<Measurement> {\n    const id = randomUUID();\n    const newMeasurement: Measurement = { \n      ...measurement, \n      id, \n      undermix: measurement.undermix ?? null,\n      flowG1: measurement.flowG1 ?? null,\n      temperature: measurement.temperature ?? null,\n      pressure: measurement.pressure ?? null,\n      createdAt: new Date() \n    };\n    this.measurementsData.set(id, newMeasurement);\n    return newMeasurement;\n  }\n\n  async getLatestMeasurements(): Promise<Map<string, Measurement>> {\n    const latest = new Map<string, Measurement>();\n    \n    const measurementsArray = Array.from(this.measurementsData.values());\n    for (const measurement of measurementsArray) {\n      const current = latest.get(measurement.ctpId);\n      if (!current || measurement.date > current.date) {\n        latest.set(measurement.ctpId, measurement);\n      }\n    }\n\n    return latest;\n  }\n\n  async getStatisticalParams(ctpId: string): Promise<StatisticalParams | undefined> {\n    return Array.from(this.statisticalParamsData.values())\n      .find(params => params.ctpId === ctpId);\n  }\n\n  async updateStatisticalParams(params: InsertStatisticalParams): Promise<StatisticalParams> {\n    const existing = Array.from(this.statisticalParamsData.values())\n      .find(p => p.ctpId === params.ctpId);\n    \n    if (existing) {\n      const updated = { ...existing, ...params, calculatedAt: new Date() };\n      this.statisticalParamsData.set(existing.id, updated);\n      return updated;\n    } else {\n      const id = randomUUID();\n      const newParams: StatisticalParams = { ...params, id, calculatedAt: new Date() };\n      this.statisticalParamsData.set(id, newParams);\n      return newParams;\n    }\n  }\n\n  async calculateControlBoundaries(ctpId: string): Promise<{ ucl: number; cl: number; lcl: number }> {\n    const measurements = await this.getMeasurements(ctpId);\n    \n    if (measurements.length < 10) {\n      throw new Error(\"Недостаточно данных для расчета контрольных границ\");\n    }\n\n    const values = measurements.map(m => m.makeupWater);\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / (values.length - 1);\n    const stdDev = Math.sqrt(variance);\n\n    // Shewhart control chart with 3-sigma limits\n    const ucl = mean + 3 * stdDev;\n    const lcl = Math.max(0, mean - 3 * stdDev); // Ensure LCL is not negative\n    \n    return { ucl, cl: mean, lcl };\n  }\n\n  async getRecommendations(filters?: { ctpId?: string; type?: string; priority?: string; status?: string }): Promise<Recommendation[]> {\n    let recommendations = Array.from(this.recommendationsData.values());\n\n    if (filters?.ctpId) {\n      recommendations = recommendations.filter(rec => rec.ctpId === filters.ctpId);\n    }\n    if (filters?.type) {\n      recommendations = recommendations.filter(rec => rec.type === filters.type);\n    }\n    if (filters?.priority) {\n      recommendations = recommendations.filter(rec => rec.priority === filters.priority);\n    }\n    if (filters?.status) {\n      recommendations = recommendations.filter(rec => rec.status === filters.status);\n    }\n\n    return recommendations.sort((a, b) => {\n      const aTime = a.createdAt?.getTime() ?? 0;\n      const bTime = b.createdAt?.getTime() ?? 0;\n      return bTime - aTime;\n    });\n  }\n\n  async createRecommendation(recommendation: InsertRecommendation): Promise<Recommendation> {\n    const id = randomUUID();\n    const newRecommendation: Recommendation = { \n      ...recommendation, \n      id, \n      status: recommendation.status ?? null,\n      actions: recommendation.actions ?? null,\n      createdAt: new Date(), \n      updatedAt: new Date() \n    };\n    this.recommendationsData.set(id, newRecommendation);\n    return newRecommendation;\n  }\n\n  async updateRecommendationStatus(id: string, status: string): Promise<void> {\n    const recommendation = this.recommendationsData.get(id);\n    if (recommendation) {\n      this.recommendationsData.set(id, { ...recommendation, status, updatedAt: new Date() });\n    }\n  }\n\n  async getTrendData(period: 'day' | 'week' | 'month' | 'year', rtsId?: string, rtsFilter?: string, ctpId?: string): Promise<TrendData[]> {\n    // Generate trend data based on period\n    const now = new Date();\n    const data: TrendData[] = [];\n    let days = 7;\n\n    switch (period) {\n      case 'day':\n        days = 1;\n        break;\n      case 'week':\n        days = 7;\n        break;\n      case 'month':\n        days = 30;\n        break;\n      case 'year':\n        days = 365;\n        break;\n    }\n\n    for (let i = days; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      \n      // Simulate trend data - in real implementation, this would query actual measurements\n      const baseValue = 2750;\n      const variation = (Math.random() - 0.5) * 200;\n      \n      data.push({\n        date: date.toISOString().split('T')[0],\n        value: Math.round(baseValue + variation),\n        rtsId,\n      });\n    }\n\n    return data;\n  }\n\n  async getControlChartData(ctpId: string, period: number): Promise<ControlChartData[]> {\n    const measurements = await this.getMeasurements(ctpId);\n    const ctp = this.ctpData.get(ctpId);\n    \n    if (!ctp) return [];\n\n    const ucl = ctp.ucl || 0;\n    const cl = ctp.cl || 0;\n    const lcl = ctp.lcl || 0;\n\n    return measurements.slice(-period).map(measurement => {\n      const isAboveUCL = measurement.makeupWater > ucl;\n      const isBelowLCL = measurement.makeupWater < lcl;\n      \n      return {\n        date: measurement.date.toISOString().split('T')[0],\n        value: measurement.makeupWater,\n        ucl,\n        cl,\n        lcl,\n        isOutOfControl: isAboveUCL || isBelowLCL,\n        controlType: isAboveUCL ? 'upper' : isBelowLCL ? 'lower' : 'normal',\n      };\n    });\n  }\n\n  async createUploadedFile(file: InsertUploadedFile): Promise<UploadedFile> {\n    const id = randomUUID();\n    const newFile: UploadedFile = { \n      ...file, \n      id, \n      status: file.status ?? null,\n      recordsProcessed: file.recordsProcessed ?? null,\n      errors: file.errors ?? null,\n      uploadedAt: new Date() \n    };\n    this.uploadedFilesData.set(id, newFile);\n    return newFile;\n  }\n\n  async getUploadHistory(): Promise<UploadedFile[]> {\n    return Array.from(this.uploadedFilesData.values())\n      .sort((a, b) => {\n        const aTime = a.uploadedAt?.getTime() ?? 0;\n        const bTime = b.uploadedAt?.getTime() ?? 0;\n        return bTime - aTime;\n      });\n  }\n\n  async updateFileStatus(id: string, status: string, recordsProcessed?: number, errors?: any[]): Promise<void> {\n    const file = this.uploadedFilesData.get(id);\n    if (file) {\n      this.uploadedFilesData.set(id, { \n        ...file, \n        status, \n        recordsProcessed: recordsProcessed || file.recordsProcessed,\n        errors: errors || file.errors \n      });\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":17647},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport type { Prisma } from '@prisma/client';\n\n// Re-export Prisma types for convenience\nexport type RTS = {\n  id: string;\n  name: string;\n  code: string;\n  location: string;\n  createdAt: Date;\n};\n\nexport type District = {\n  id: string;\n  name: string;\n  rtsId: string | null;\n  createdAt: Date;\n};\n\nexport type Vyvod = {\n  id: string;\n  name: string;\n  code: string;\n  createdAt: Date;\n};\n\nexport type CTP = {\n  id: string;\n  name: string;\n  code: string;\n  fullName: string | null;\n  city: string | null;\n  address: string | null;\n  yearBuilt: number | null;\n  rtsId: string | null;\n  districtId: string | null;\n  vyvodId: string | null;\n  ucl: number | null;\n  cl: number | null;\n  lcl: number | null;\n  hasMeter: boolean;\n  meterStatus: string;\n  status: string | null;\n  commentPTU: string | null;\n  commentRTS: string | null;\n  commentSKIPiA: string | null;\n  av365G1: number | null;\n  av365G2: number | null;\n  min730: number | null;\n  min365: number | null;\n  min30: number | null;\n  min7: number | null;\n  percentFromG1: number | null;\n  normativMinenergo: number | null;\n  createdAt: Date;\n};\n\nexport type Measurement = {\n  id: string;\n  ctpId: string;\n  date: Date;\n  makeupWater: number;\n  undermix: number;\n  flowG1: number | null;\n  temperature: number | null;\n  pressure: number | null;\n  createdAt: Date;\n};\n\nexport type StatisticalParams = {\n  id: string;\n  ctpId: string;\n  mean: number;\n  stdDev: number;\n  ucl: number;\n  cl: number;\n  lcl: number;\n  sampleSize: number;\n  calculatedAt: Date;\n};\n\nexport type Recommendation = {\n  id: string;\n  ctpId: string;\n  type: string;\n  priority: string;\n  title: string;\n  description: string;\n  actions: string | null;\n  status: string;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type UploadedFile = {\n  id: string;\n  filename: string;\n  originalName: string;\n  fileType: string;\n  size: number;\n  status: string;\n  recordsProcessed: number;\n  errors: string | null;\n  uploadedAt: Date;\n};\n\n// Zod schemas for validation\nexport const insertRtsSchema = z.object({\n  name: z.string(),\n  code: z.string(),\n  location: z.string(),\n});\n\nexport const insertDistrictSchema = z.object({\n  name: z.string(),\n  rtsId: z.string().optional().nullable(),\n});\n\nexport const insertVyvodSchema = z.object({\n  name: z.string(),\n  code: z.string(),\n});\n\nexport const insertCtpSchema = z.object({\n  name: z.string(),\n  code: z.string(),\n  fullName: z.string().optional().nullable(),\n  city: z.string().optional().nullable(),\n  address: z.string().optional().nullable(),\n  yearBuilt: z.number().optional().nullable(),\n  rtsId: z.string().optional().nullable(),\n  districtId: z.string().optional().nullable(),\n  vyvodId: z.string().optional().nullable(),\n  ucl: z.number().optional().nullable(),\n  cl: z.number().optional().nullable(),\n  lcl: z.number().optional().nullable(),\n  hasMeter: z.boolean().optional(),\n  meterStatus: z.string().optional(),\n  status: z.string().optional().nullable(),\n  commentPTU: z.string().optional().nullable(),\n  commentRTS: z.string().optional().nullable(),\n  commentSKIPiA: z.string().optional().nullable(),\n  av365G1: z.number().optional().nullable(),\n  av365G2: z.number().optional().nullable(),\n  min730: z.number().optional().nullable(),\n  min365: z.number().optional().nullable(),\n  min30: z.number().optional().nullable(),\n  min7: z.number().optional().nullable(),\n  percentFromG1: z.number().optional().nullable(),\n  normativMinenergo: z.number().optional().nullable(),\n});\n\nexport const insertMeasurementSchema = z.object({\n  ctpId: z.string(),\n  date: z.coerce.date(),\n  makeupWater: z.number(),\n  undermix: z.number().optional(),\n  flowG1: z.number().optional().nullable(),\n  temperature: z.number().optional().nullable(),\n  pressure: z.number().optional().nullable(),\n});\n\nexport const insertStatisticalParamsSchema = z.object({\n  ctpId: z.string(),\n  mean: z.number(),\n  stdDev: z.number(),\n  ucl: z.number(),\n  cl: z.number(),\n  lcl: z.number(),\n  sampleSize: z.number(),\n});\n\nexport const insertRecommendationSchema = z.object({\n  ctpId: z.string(),\n  type: z.string(),\n  priority: z.string(),\n  title: z.string(),\n  description: z.string(),\n  actions: z.string().optional().nullable(),\n  status: z.string().optional(),\n});\n\nexport const insertUploadedFileSchema = z.object({\n  filename: z.string(),\n  originalName: z.string(),\n  fileType: z.string(),\n  size: z.number(),\n  status: z.string().optional(),\n  recordsProcessed: z.number().optional(),\n  errors: z.string().optional().nullable(),\n});\n\n// Insert types\nexport type InsertRTS = z.infer<typeof insertRtsSchema>;\nexport type InsertDistrict = z.infer<typeof insertDistrictSchema>;\nexport type InsertVyvod = z.infer<typeof insertVyvodSchema>;\nexport type InsertCTP = z.infer<typeof insertCtpSchema>;\nexport type InsertMeasurement = z.infer<typeof insertMeasurementSchema>;\nexport type InsertStatisticalParams = z.infer<typeof insertStatisticalParamsSchema>;\nexport type InsertRecommendation = z.infer<typeof insertRecommendationSchema>;\nexport type InsertUploadedFile = z.infer<typeof insertUploadedFileSchema>;\n\n// Extended types for API responses\nexport type CTPWithDetails = CTP & {\n  rts: RTS | null;\n  district: District | null;\n  vyvod: Vyvod | null;\n  latestMeasurement?: Measurement;\n  statisticalParams?: StatisticalParams;\n  recommendations: Recommendation[];\n};\n\nexport type RTSWithStats = RTS & {\n  totalMakeupWater: number;\n  ctpCount: number;\n  criticalCount: number;\n  warningCount: number;\n  normalCount: number;\n};\n\nexport type TrendData = {\n  date: string;\n  value: number;\n  rtsId?: string;\n  ctpId?: string;\n};\n\nexport type ControlChartData = {\n  date: string;\n  value: number;\n  ucl: number;\n  cl: number;\n  lcl: number;\n  isOutOfControl: boolean;\n  controlType: 'normal' | 'upper' | 'lower';\n};\n","size_bytes":5791},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Header } from \"@/components/header\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ControlCharts from \"@/pages/control-charts\";\nimport CTPTable from \"@/pages/ctp-table\";\nimport Trends from \"@/pages/trends\";\nimport Tree from \"@/pages/tree\";\nimport Recommendations from \"@/pages/recommendations\";\nimport Analytics from \"@/pages/analytics\";\nimport DataUpload from \"@/pages/data-upload\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 ml-[280px]\">\n        <Header />\n        <main className=\"p-8\">\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/control-charts\" component={ControlCharts} />\n            <Route path=\"/ctp-table\" component={CTPTable} />\n            <Route path=\"/trends\" component={Trends} />\n            <Route path=\"/tree\" component={Tree} />\n            <Route path=\"/recommendations\" component={Recommendations} />\n            <Route path=\"/analytics\" component={Analytics} />\n            <Route path=\"/data-upload\" component={DataUpload} />\n            <Route component={NotFound} />\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1785},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210 40% 98%);\n  --foreground: hsl(222 47% 11%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 47% 11%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 47% 11%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(215 16% 47%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 47% 11%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(221 83% 53%);\n  --chart-1: hsl(221 83% 53%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222 47% 11%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(221 83% 53%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(221 83% 53%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Courier New', monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(221 83% 53%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(221 83% 53%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(221 83% 53%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(221 83% 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer components {\n  .stat-card {\n    @apply bg-card border border-border rounded-lg p-6 transition-shadow hover:shadow-md;\n  }\n\n  .chart-container {\n    @apply relative bg-card border border-border rounded-lg p-6;\n  }\n\n  .table-container {\n    @apply bg-card border border-border rounded-lg overflow-hidden;\n  }\n\n  .data-table {\n    @apply w-full text-sm;\n  }\n\n  .data-table th {\n    @apply bg-muted px-4 py-3 text-left font-semibold border-b-2 border-border whitespace-nowrap;\n  }\n\n  .data-table td {\n    @apply px-4 py-3 border-b border-border;\n  }\n\n  .data-table tr:hover {\n    @apply bg-muted opacity-50;\n  }\n\n  .nav-item {\n    @apply flex items-center px-4 py-3 text-muted-foreground transition-all cursor-pointer border-l-3 border-transparent hover:bg-accent hover:text-primary;\n  }\n\n  .nav-item.active {\n    @apply text-primary border-l-primary font-semibold;\n    background-color: hsl(var(--primary) / 0.1);\n  }\n\n  .nav-item i {\n    @apply mr-3 w-5 text-center;\n  }\n\n  .tree-node {\n    @apply p-2 my-1 bg-card border border-border rounded cursor-pointer transition-all hover:bg-accent hover:border-primary;\n  }\n\n  .tree-node.expanded {\n    @apply bg-accent;\n  }\n\n  .tree-children {\n    @apply ml-6 border-l-2 border-border pl-4;\n  }\n\n  .filter-bar {\n    @apply bg-card border border-border rounded-lg p-4 mb-6 flex gap-4 flex-wrap items-center;\n  }\n\n  .filter-input {\n    @apply px-3 py-2 border border-border rounded text-sm outline-none transition-colors focus:border-primary focus:ring-2 focus:ring-primary/20;\n  }\n\n  .btn {\n    @apply px-4 py-2 rounded font-medium text-sm cursor-pointer transition-all border-none outline-none;\n  }\n\n  .btn-primary {\n    @apply bg-primary text-primary-foreground;\n  }\n  \n  .btn-primary:hover {\n    background-color: hsl(var(--primary) / 0.9);\n  }\n\n  .btn-secondary {\n    @apply bg-muted text-muted-foreground border border-border hover:bg-accent;\n  }\n\n  .metric-value {\n    @apply text-3xl font-bold leading-none font-mono;\n  }\n\n  .metric-label {\n    @apply text-sm text-muted-foreground mt-2;\n  }\n\n  .metric-change {\n    @apply inline-flex items-center text-xs mt-2 px-2 py-1 rounded;\n  }\n\n  .metric-change.positive {\n    @apply bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400;\n  }\n\n  .metric-change.negative {\n    @apply bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400;\n  }\n\n  .loading-spinner {\n    @apply inline-block w-5 h-5 border-3 border-border border-t-primary rounded-full animate-spin;\n  }\n\n  .recommendation-card {\n    @apply bg-card border-l-4 rounded-lg p-4 mb-4;\n  }\n\n  .recommendation-card.inspection {\n    @apply border-l-yellow-500;\n  }\n\n  .recommendation-card.meter-check {\n    @apply border-l-red-500;\n  }\n\n  .recommendation-card.normal {\n    @apply border-l-green-500;\n  }\n\n  .tab-container {\n    @apply flex gap-2 border-b-2 border-border mb-6;\n  }\n\n  .tab {\n    @apply px-6 py-3 cursor-pointer border-b-3 border-transparent -mb-2 font-medium text-muted-foreground transition-all hover:text-primary;\n  }\n\n  .tab.active {\n    @apply text-primary border-b-primary;\n  }\n\n  .export-menu {\n    @apply relative inline-block;\n  }\n\n  .export-dropdown {\n    @apply hidden absolute right-0 top-full bg-card border border-border rounded shadow-lg z-50 min-w-48 mt-2;\n  }\n\n  .export-menu:hover .export-dropdown {\n    @apply block;\n  }\n\n  .export-dropdown a {\n    @apply block px-4 py-3 text-foreground no-underline transition-colors hover:bg-accent;\n  }\n\n  .modal {\n    @apply hidden fixed inset-0 z-100 items-center justify-center;\n    background-color: rgba(0, 0, 0, 0.5);\n  }\n\n  .modal.active {\n    @apply flex;\n  }\n\n  .modal-content {\n    @apply bg-card rounded-lg max-w-[90%] max-h-[90%] overflow-auto shadow-xl;\n  }\n\n  .progress-bar {\n    @apply h-2 bg-muted rounded-full overflow-hidden;\n  }\n\n  .progress-fill {\n    @apply h-full bg-primary transition-all duration-300;\n  }\n}\n","size_bytes":6626},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Download, RefreshCw, FileSpreadsheet, FileText, File } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Header() {\n  const { toast } = useToast();\n\n  const handleRefresh = () => {\n    toast({\n      title: \"Обновление данных\",\n      description: \"Данные обновляются...\",\n    });\n    // TODO: Implement actual refresh logic\n    window.location.reload();\n  };\n\n  const handleExport = (format: string) => {\n    toast({\n      title: `Экспорт в ${format.toUpperCase()}`,\n      description: \"Экспорт будет реализован в следующих версиях\",\n    });\n    // TODO: Implement export functionality\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-8 py-6 sticky top-0 z-30\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold mb-1\">\n            Аналитическая модель подпитки теплосетей\n          </h2>\n          <p className=\"text-muted-foreground text-sm\">\n            Новосибирская теплоснабжающая компания\n          </p>\n        </div>\n        <div className=\"flex gap-4 items-center\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" data-testid=\"button-export\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Экспорт\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={() => handleExport('excel')}>\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                Экспорт в Excel\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => handleExport('pdf')}>\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Экспорт в PDF\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => handleExport('csv')}>\n                <File className=\"w-4 h-4 mr-2\" />\n                Экспорт в CSV\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n          <Button onClick={handleRefresh} data-testid=\"button-refresh\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Обновить\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2641},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  BarChart3, \n  Activity, \n  Table, \n  TrendingUp, \n  GitBranch, \n  FileText, \n  Brain, \n  Upload,\n  Flame\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigationItems = [\n  { path: \"/\", label: \"Дашборд\", icon: BarChart3 },\n  { path: \"/control-charts\", label: \"Контрольные карты\", icon: Activity },\n  { path: \"/ctp-table\", label: \"Таблица ЦТП\", icon: Table },\n  { path: \"/trends\", label: \"Тренды\", icon: TrendingUp },\n  { path: \"/tree\", label: \"Дерево подпитки\", icon: GitBranch },\n  { path: \"/recommendations\", label: \"Рекомендации\", icon: FileText },\n  { path: \"/analytics\", label: \"Аналитика\", icon: Brain },\n  { path: \"/data-upload\", label: \"Загрузка данных\", icon: Upload },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"sidebar fixed left-0 top-0 h-screen w-[280px] bg-sidebar border-r border-sidebar-border overflow-y-auto z-40\">\n      <div className=\"p-6 border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-3\">\n          <Flame className=\"w-6 h-6 text-sidebar-primary\" />\n          <div>\n            <h1 className=\"text-lg font-bold leading-tight\">НТСК Аналитика</h1>\n            <p className=\"text-xs text-sidebar-foreground/70\">Система подпитки</p>\n          </div>\n        </div>\n      </div>\n\n      <nav className=\"py-4\">\n        {navigationItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <div className={cn(\"nav-item\", isActive && \"active\")}>\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      <div className=\"p-4 border-t border-sidebar-border mt-auto\">\n        <div className=\"text-xs text-sidebar-foreground/70\">\n          <div className=\"flex justify-between mb-2\">\n            <span>Последнее обновление:</span>\n            <span className=\"font-semibold\">\n              {new Date().toLocaleDateString('ru-RU', {\n                day: '2-digit',\n                month: '2-digit',\n                year: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit'\n              })}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Статус системы:</span>\n            <span className=\"inline-block px-2 py-1 rounded-full text-xs font-semibold bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\">\n              Работает\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2893},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/excel-parser.ts":{"content":"// Utility functions for parsing Excel files\n// Note: In a real implementation, this would use libraries like xlsx or exceljs\n// For now, this provides the interface and basic structure\n\nexport interface ParsedExcelData {\n  sheetName: string;\n  headers: string[];\n  rows: any[][];\n  metadata?: {\n    fileType: string;\n    lastModified?: Date;\n    source?: string;\n  };\n}\n\nexport interface CTEMeasurementData {\n  ctpName: string;\n  date: Date;\n  makeupWater: number;\n  undermix: number;\n  flowG1?: number;\n  temperature?: number;\n  pressure?: number;\n}\n\nexport interface RTSData {\n  rtsCode: string;\n  rtsName: string;\n  measurements: CTEMeasurementData[];\n}\n\nexport class ExcelParser {\n  static async parseFile(file: File): Promise<ParsedExcelData[]> {\n    // In a real implementation, this would use a library like xlsx\n    // to parse the actual Excel file\n    \n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      \n      reader.onload = (event) => {\n        try {\n          // Mock parsing - in reality would parse the actual Excel structure\n          const mockData: ParsedExcelData[] = [{\n            sheetName: 'Sheet1',\n            headers: ['ЦТП', 'РТС', 'Дата', 'Подпитка', 'Подмес'],\n            rows: [\n              ['ЦТП-125', 'РТС-1', '2025-01-29', '40.3', '5.2'],\n              ['ЦТП-156', 'РТС-4', '2025-01-29', '45.8', '6.1'],\n            ],\n            metadata: {\n              fileType: file.name.split('.').pop() || 'unknown',\n              lastModified: new Date(file.lastModified),\n              source: file.name,\n            }\n          }];\n          \n          resolve(mockData);\n        } catch (error) {\n          reject(new Error(`Ошибка парсинга файла: ${error}`));\n        }\n      };\n      \n      reader.onerror = () => {\n        reject(new Error('Ошибка чтения файла'));\n      };\n      \n      // For Excel files, we would use ArrayBuffer\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  static parseMeasurements(data: ParsedExcelData): CTEMeasurementData[] {\n    const measurements: CTEMeasurementData[] = [];\n    \n    // Find column indices\n    const headers = data.headers.map(h => h.toLowerCase());\n    const ctpIndex = headers.findIndex(h => h.includes('цтп'));\n    const dateIndex = headers.findIndex(h => h.includes('дата'));\n    const makeupIndex = headers.findIndex(h => h.includes('подпитка'));\n    const undermixIndex = headers.findIndex(h => h.includes('подмес'));\n    \n    if (ctpIndex === -1 || dateIndex === -1 || makeupIndex === -1) {\n      throw new Error('Не найдены необходимые колонки в файле');\n    }\n    \n    data.rows.forEach((row, index) => {\n      try {\n        const measurement: CTEMeasurementData = {\n          ctpName: String(row[ctpIndex]),\n          date: new Date(row[dateIndex]),\n          makeupWater: parseFloat(String(row[makeupIndex])),\n          undermix: undermixIndex !== -1 ? parseFloat(String(row[undermixIndex])) : 0,\n        };\n        \n        // Validate data\n        if (!measurement.ctpName || isNaN(measurement.makeupWater)) {\n          console.warn(`Пропущена строка ${index + 1}: некорректные данные`);\n          return;\n        }\n        \n        measurements.push(measurement);\n      } catch (error) {\n        console.warn(`Ошибка обработки строки ${index + 1}:`, error);\n      }\n    });\n    \n    return measurements;\n  }\n\n  static detectFileType(filename: string): 'measurements' | 'summary' | 'model' | 'unknown' {\n    const name = filename.toLowerCase();\n    \n    if (name.includes('одпу') || name.includes('показания')) {\n      return 'measurements';\n    } else if (name.includes('свод') || name.includes('ведомость')) {\n      return 'summary';\n    } else if (name.includes('модель') || name.includes('model')) {\n      return 'model';\n    }\n    \n    return 'unknown';\n  }\n\n  static validateMeasurementData(data: CTEMeasurementData[]): {\n    valid: CTEMeasurementData[];\n    errors: string[];\n  } {\n    const valid: CTEMeasurementData[] = [];\n    const errors: string[] = [];\n    \n    data.forEach((measurement, index) => {\n      if (!measurement.ctpName) {\n        errors.push(`Строка ${index + 1}: отсутствует название ЦТП`);\n        return;\n      }\n      \n      if (isNaN(measurement.makeupWater) || measurement.makeupWater < 0) {\n        errors.push(`Строка ${index + 1}: некорректное значение подпитки`);\n        return;\n      }\n      \n      if (measurement.makeupWater > 200) {\n        errors.push(`Строка ${index + 1}: подозрительно высокое значение подпитки (${measurement.makeupWater} т/ч)`);\n      }\n      \n      valid.push(measurement);\n    });\n    \n    return { valid, errors };\n  }\n}\n\nexport default ExcelParser;\n","size_bytes":4973},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: data && !isFormData ? { \"Content-Type\": \"application/json\" } : {},\n    body: isFormData ? data : (data ? JSON.stringify(data) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1470},"client/src/lib/statistics.ts":{"content":"// Statistical analysis utilities for Shewhart control charts\n\nexport interface StatisticalResult {\n  mean: number;\n  standardDeviation: number;\n  variance: number;\n  ucl: number; // Upper Control Limit\n  cl: number;  // Central Line\n  lcl: number; // Lower Control Limit\n  sampleSize: number;\n}\n\nexport interface ControlPoint {\n  value: number;\n  date: Date;\n  isOutOfControl: boolean;\n  controlType: 'normal' | 'upper' | 'lower';\n}\n\nexport class StatisticalAnalysis {\n  /**\n   * Calculate basic statistics for a dataset\n   */\n  static calculateBasicStats(data: number[]): {\n    mean: number;\n    standardDeviation: number;\n    variance: number;\n    min: number;\n    max: number;\n  } {\n    if (data.length === 0) {\n      throw new Error('Нет данных для расчета статистики');\n    }\n\n    const mean = data.reduce((sum, value) => sum + value, 0) / data.length;\n    const variance = data.reduce((sum, value) => sum + Math.pow(value - mean, 2), 0) / (data.length - 1);\n    const standardDeviation = Math.sqrt(variance);\n    const min = Math.min(...data);\n    const max = Math.max(...data);\n\n    return {\n      mean,\n      standardDeviation,\n      variance,\n      min,\n      max,\n    };\n  }\n\n  /**\n   * Calculate Shewhart control chart boundaries\n   * Uses 3-sigma limits as specified in the documents\n   */\n  static calculateControlBoundaries(data: number[], confidence: number = 3): StatisticalResult {\n    if (data.length < 10) {\n      throw new Error('Недостаточно данных для расчета контрольных границ (минимум 10 точек)');\n    }\n\n    const stats = this.calculateBasicStats(data);\n    \n    // Shewhart control limits using 3-sigma rule\n    const ucl = stats.mean + confidence * stats.standardDeviation;\n    const lcl = Math.max(0, stats.mean - confidence * stats.standardDeviation); // Ensure LCL is not negative\n    \n    return {\n      mean: stats.mean,\n      standardDeviation: stats.standardDeviation,\n      variance: stats.variance,\n      ucl,\n      cl: stats.mean,\n      lcl,\n      sampleSize: data.length,\n    };\n  }\n\n  /**\n   * Identify points that are out of control\n   */\n  static identifyOutOfControlPoints(\n    data: { value: number; date: Date }[],\n    controlLimits: { ucl: number; cl: number; lcl: number }\n  ): ControlPoint[] {\n    return data.map(point => {\n      let isOutOfControl = false;\n      let controlType: 'normal' | 'upper' | 'lower' = 'normal';\n\n      if (point.value > controlLimits.ucl) {\n        isOutOfControl = true;\n        controlType = 'upper';\n      } else if (point.value < controlLimits.lcl) {\n        isOutOfControl = true;\n        controlType = 'lower';\n      }\n\n      return {\n        value: point.value,\n        date: point.date,\n        isOutOfControl,\n        controlType,\n      };\n    });\n  }\n\n  /**\n   * Calculate trend indicators\n   */\n  static calculateTrend(data: number[], windowSize: number = 7): {\n    slope: number;\n    direction: 'increasing' | 'decreasing' | 'stable';\n    strength: number; // 0-1, how strong the trend is\n  } {\n    if (data.length < windowSize) {\n      return { slope: 0, direction: 'stable', strength: 0 };\n    }\n\n    // Use the last windowSize points for trend calculation\n    const recentData = data.slice(-windowSize);\n    const n = recentData.length;\n    \n    // Calculate linear regression slope\n    const xValues = Array.from({ length: n }, (_, i) => i);\n    const xMean = xValues.reduce((sum, x) => sum + x, 0) / n;\n    const yMean = recentData.reduce((sum, y) => sum + y, 0) / n;\n    \n    let numerator = 0;\n    let denominator = 0;\n    \n    for (let i = 0; i < n; i++) {\n      numerator += (xValues[i] - xMean) * (recentData[i] - yMean);\n      denominator += Math.pow(xValues[i] - xMean, 2);\n    }\n    \n    const slope = denominator === 0 ? 0 : numerator / denominator;\n    \n    // Determine direction and strength\n    const absSlope = Math.abs(slope);\n    const strength = Math.min(absSlope / (yMean * 0.1), 1); // Normalize strength\n    \n    let direction: 'increasing' | 'decreasing' | 'stable' = 'stable';\n    if (absSlope > yMean * 0.01) { // Threshold for significant trend\n      direction = slope > 0 ? 'increasing' : 'decreasing';\n    }\n    \n    return { slope, direction, strength };\n  }\n\n  /**\n   * Detect patterns in control chart data\n   * Implements Western Electric rules for process control\n   */\n  static detectPatterns(points: ControlPoint[], controlLimits: StatisticalResult): {\n    hasPattern: boolean;\n    patterns: string[];\n  } {\n    const patterns: string[] = [];\n    \n    // Rule 1: One point beyond 3 sigma\n    const beyondThreeSigma = points.filter(p => p.isOutOfControl);\n    if (beyondThreeSigma.length > 0) {\n      patterns.push(`${beyondThreeSigma.length} точек за пределами 3σ`);\n    }\n    \n    // Rule 2: Seven consecutive points on same side of centerline\n    let consecutiveAbove = 0;\n    let consecutiveBelow = 0;\n    let maxConsecutiveAbove = 0;\n    let maxConsecutiveBelow = 0;\n    \n    points.forEach(point => {\n      if (point.value > controlLimits.cl) {\n        consecutiveAbove++;\n        consecutiveBelow = 0;\n        maxConsecutiveAbove = Math.max(maxConsecutiveAbove, consecutiveAbove);\n      } else if (point.value < controlLimits.cl) {\n        consecutiveBelow++;\n        consecutiveAbove = 0;\n        maxConsecutiveBelow = Math.max(maxConsecutiveBelow, consecutiveBelow);\n      } else {\n        consecutiveAbove = 0;\n        consecutiveBelow = 0;\n      }\n    });\n    \n    if (maxConsecutiveAbove >= 7) {\n      patterns.push(`${maxConsecutiveAbove} последовательных точек выше центральной линии`);\n    }\n    if (maxConsecutiveBelow >= 7) {\n      patterns.push(`${maxConsecutiveBelow} последовательных точек ниже центральной линии`);\n    }\n    \n    // Rule 3: Six consecutive increasing or decreasing points\n    let increasingStreak = 0;\n    let decreasingStreak = 0;\n    let maxIncreasing = 0;\n    let maxDecreasing = 0;\n    \n    for (let i = 1; i < points.length; i++) {\n      if (points[i].value > points[i-1].value) {\n        increasingStreak++;\n        decreasingStreak = 0;\n        maxIncreasing = Math.max(maxIncreasing, increasingStreak);\n      } else if (points[i].value < points[i-1].value) {\n        decreasingStreak++;\n        increasingStreak = 0;\n        maxDecreasing = Math.max(maxDecreasing, decreasingStreak);\n      } else {\n        increasingStreak = 0;\n        decreasingStreak = 0;\n      }\n    }\n    \n    if (maxIncreasing >= 6) {\n      patterns.push(`${maxIncreasing + 1} последовательных возрастающих точек`);\n    }\n    if (maxDecreasing >= 6) {\n      patterns.push(`${maxDecreasing + 1} последовательных убывающих точек`);\n    }\n    \n    return {\n      hasPattern: patterns.length > 0,\n      patterns,\n    };\n  }\n\n  /**\n   * Calculate process capability indices\n   */\n  static calculateProcessCapability(\n    data: number[],\n    specLimits: { upperSpec: number; lowerSpec: number }\n  ): {\n    cp: number; // Process Capability\n    cpk: number; // Process Capability Index\n    isCapable: boolean;\n  } {\n    const stats = this.calculateBasicStats(data);\n    \n    const cp = (specLimits.upperSpec - specLimits.lowerSpec) / (6 * stats.standardDeviation);\n    \n    const cpkUpper = (specLimits.upperSpec - stats.mean) / (3 * stats.standardDeviation);\n    const cpkLower = (stats.mean - specLimits.lowerSpec) / (3 * stats.standardDeviation);\n    const cpk = Math.min(cpkUpper, cpkLower);\n    \n    const isCapable = cpk >= 1.33; // Industry standard for capable process\n    \n    return { cp, cpk, isCapable };\n  }\n\n  /**\n   * Generate recommendations based on statistical analysis\n   */\n  static generateRecommendations(\n    points: ControlPoint[],\n    controlLimits: StatisticalResult,\n    patterns: { hasPattern: boolean; patterns: string[] }\n  ): {\n    priority: 'critical' | 'warning' | 'normal';\n    type: 'inspection' | 'meter_check' | 'monitoring';\n    actions: string[];\n  }[] {\n    const recommendations: any[] = [];\n    \n    // Check for critical out-of-control points\n    const criticalPoints = points.filter(p => p.isOutOfControl);\n    if (criticalPoints.length > 0) {\n      const exceedsUCL = criticalPoints.some(p => p.controlType === 'upper');\n      const belowLCL = criticalPoints.some(p => p.controlType === 'lower');\n      \n      if (exceedsUCL) {\n        recommendations.push({\n          priority: 'critical',\n          type: 'inspection',\n          actions: [\n            'Провести инспекцию на предмет утечек теплоносителя',\n            'Проверить работоспособность приборов учета',\n            'Проверить параметры работы подпиточных насосов',\n          ],\n        });\n      }\n      \n      if (belowLCL) {\n        recommendations.push({\n          priority: 'critical',\n          type: 'meter_check',\n          actions: [\n            'Проверить корректность показаний приборов учета',\n            'Провести поверку счетчиков',\n            'Проверить настройки системы автоматического регулирования',\n          ],\n        });\n      }\n    }\n    \n    // Check for patterns that indicate process instability\n    if (patterns.hasPattern) {\n      recommendations.push({\n        priority: 'warning',\n        type: 'monitoring',\n        actions: [\n          'Усилить мониторинг параметров работы ЦТП',\n          'Проанализировать причины нестабильности процесса',\n          'Рассмотреть необходимость корректировки контрольных границ',\n        ],\n      });\n    }\n    \n    return recommendations;\n  }\n}\n\nexport default StatisticalAnalysis;\n","size_bytes":10026},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FactorsChart } from \"@/components/charts/factors-chart\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { RTSWithStats } from \"@shared/schema\";\n\nexport default function Analytics() {\n  const { data: rtsStats, isLoading } = useQuery<RTSWithStats[]>({\n    queryKey: ['/api/rts/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-6 w-48 mb-4\" />\n                <Skeleton className=\"h-32 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const totalMakeupWater = rtsStats?.reduce((sum, rts) => sum + rts.totalMakeupWater, 0) || 2750;\n\n  // Economic calculations based on the document\n  const yearlyReduction = 71.0; // t/h reduction year-over-year\n  const costPerTon = 600; // approximate cost per ton/hour annually in rubles\n  const yearlySavings = (yearlyReduction * 24 * 365 * costPerTon) / 1000000; // in millions\n  const electricitySavings = yearlyReduction * 24 * 365 * 120 / 1000000; // approximate kWh saved in millions\n  const waterSavings = yearlyReduction * 24 * 365 * 1; // approximate m³ saved in thousands\n  const totalEconomicEffect = yearlySavings * 1.2; // including all factors\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-semibold mb-2\">Сводная аналитическая панель</h3>\n        <p className=\"text-muted-foreground text-sm\">\n          Ключевая аналитика и статистика по подпитке теплосетей Новосибирска\n        </p>\n      </div>\n\n      {/* Economic Impact Cards */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Динамика снижения подпитки</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm space-y-4\">\n            <div className=\"flex justify-between py-2 border-b border-border\">\n              <span>За сутки (к предыдущим суткам)</span>\n              <span className=\"font-semibold text-green-600\" data-testid=\"daily-change\">-18.5 т/ч</span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-border\">\n              <span>За неделю (к предыдущей неделе)</span>\n              <span className=\"font-semibold text-green-600\" data-testid=\"weekly-change\">-48.9 т/ч</span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-border\">\n              <span>За месяц (к предыдущему месяцу)</span>\n              <span className=\"font-semibold text-green-600\" data-testid=\"monthly-change\">-125.3 т/ч</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"font-semibold\">За год (к аналогичному периоду)</span>\n              <span className=\"font-bold text-green-600\" data-testid=\"yearly-change\">-{yearlyReduction} т/ч</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Экономический эффект</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm space-y-4\">\n            <div className=\"flex justify-between py-2 border-b border-border\">\n              <span>Снижение затрат за год</span>\n              <span className=\"font-semibold text-green-600\" data-testid=\"cost-savings\">\n                ~{yearlySavings.toFixed(1)} млн ₽\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-border\">\n              <span>Экономия электроэнергии</span>\n              <span className=\"font-semibold\" data-testid=\"electricity-savings\">\n                ~{electricitySavings.toFixed(1)} млн кВт⋅ч/год\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-border\">\n              <span>Снижение потерь воды</span>\n              <span className=\"font-semibold\" data-testid=\"water-savings\">\n                ~{(waterSavings / 1000).toFixed(0)} тыс. м³/год\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"font-semibold\">Суммарный эффект</span>\n              <span className=\"font-bold text-green-600\" data-testid=\"total-effect\">\n                ~{totalEconomicEffect.toFixed(1)} млн ₽/год\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Factors Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Распределение подпитки по факторам</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[450px]\" data-testid=\"factors-chart\">\n            <FactorsChart />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Additional Analytics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Контрольный коридор (средний)</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm space-y-4\">\n            <div className=\"flex justify-between py-2 border-b border-border\">\n              <span>Правый берег</span>\n              <span className=\"font-semibold font-mono\" data-testid=\"right-bank-corridor\">+3.6…-4.3 т/ч</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span>Левый берег</span>\n              <span className=\"font-semibold font-mono\" data-testid=\"left-bank-corridor\">+4.1…-4.8 т/ч</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Охват приборами учета</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm space-y-4\">\n            <div className=\"flex justify-between py-2 border-b border-border\">\n              <span>ЦТП с рабочими приборами</span>\n              <span className=\"font-semibold\" data-testid=\"working-meters\">347 из 412 (84.2%)</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span>Требуют восстановления</span>\n              <span className=\"font-semibold text-yellow-600\" data-testid=\"broken-meters\">65 (15.8%)</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Current System Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Текущее состояние системы</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-center\">\n            <div>\n              <div className=\"metric-value text-primary\" data-testid=\"current-makeup\">\n                {totalMakeupWater.toFixed(0)}\n              </div>\n              <div className=\"metric-label\">Текущая подпитка т/ч</div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                Снижение на {((yearlyReduction / totalMakeupWater) * 100).toFixed(1)}% год к году\n              </p>\n            </div>\n            \n            <div>\n              <div className=\"metric-value text-green-600\" data-testid=\"efficiency-improvement\">\n                {((yearlyReduction / (totalMakeupWater + yearlyReduction)) * 100).toFixed(1)}%\n              </div>\n              <div className=\"metric-label\">Повышение эффективности</div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                За счет оптимизации подпитки\n              </p>\n            </div>\n            \n            <div>\n              <div className=\"metric-value text-blue-600\" data-testid=\"system-reliability\">\n                92.3%\n              </div>\n              <div className=\"metric-label\">Надежность системы</div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                Процент времени стабильной работы\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8858},"client/src/pages/control-charts.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ControlChart } from \"@/components/charts/control-chart\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport type { CTPWithDetails, ControlChartData } from \"@shared/schema\";\n\nexport default function ControlCharts() {\n  const [selectedRTS, setSelectedRTS] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [selectedCTP, setSelectedCTP] = useState<string>(\"\");\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n\n  // Load RTS list\n  const { data: rtsList } = useQuery<{ id: string; name: string; code: string }[]>({\n    queryKey: ['/api/rts'],\n  });\n\n  const { data: ctpList, isLoading: loadingCTP } = useQuery<CTPWithDetails[]>({\n    queryKey: ['/api/ctp', selectedRTS],\n    queryFn: async () => {\n      const url = selectedRTS === \"all\" \n        ? '/api/ctp'\n        : `/api/ctp?rtsId=${selectedRTS}`;\n      const res = await fetch(url, { credentials: \"include\" });\n      if (!res.ok) throw new Error('Failed to fetch CTP list');\n      return res.json();\n    },\n  });\n\n  const filteredCTP = ctpList?.filter(ctp => {\n    const matchesSearch = ctp.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = selectedStatus === \"all\" || \n      (selectedStatus === \"critical\" && ctp.recommendations.some(r => r.priority === \"critical\")) ||\n      (selectedStatus === \"warning\" && ctp.recommendations.some(r => r.priority === \"warning\")) ||\n      (selectedStatus === \"normal\" && ctp.recommendations.every(r => r.priority === \"normal\"));\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  // Check if selectedCTP is valid (exists in filtered list)\n  const isSelectedCTPValid = filteredCTP?.some(ctp => ctp.id === selectedCTP) ?? false;\n\n  const { data: controlData, isLoading: loadingChart } = useQuery<ControlChartData[]>({\n    queryKey: ['/api/ctp', selectedCTP, 'control-chart'],\n    queryFn: async () => {\n      if (!selectedCTP) return [];\n      const res = await fetch(`/api/ctp/${selectedCTP}/control-chart`, { credentials: \"include\" });\n      if (!res.ok) throw new Error('Failed to fetch control chart data');\n      return res.json();\n    },\n    enabled: !!selectedCTP && isSelectedCTPValid,\n  });\n\n  // Set first CTP as default when list loads or when selected CTP is not in filtered list\n  useEffect(() => {\n    if (!filteredCTP) return;\n    \n    if (filteredCTP.length === 0) {\n      // Clear selection when no CTPs match filters\n      setSelectedCTP(\"\");\n    } else {\n      const isSelectedInList = filteredCTP.some(ctp => ctp.id === selectedCTP);\n      if (!selectedCTP || !isSelectedInList) {\n        setSelectedCTP(filteredCTP[0].id);\n      }\n    }\n  }, [filteredCTP, selectedCTP]);\n\n  const selectedCTPData = ctpList?.find(ctp => ctp.id === selectedCTP);\n\n  if (loadingCTP) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-12 bg-muted animate-pulse rounded-lg\" />\n        <div className=\"h-[500px] bg-muted animate-pulse rounded-lg\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filter Bar */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex gap-4 flex-wrap items-center\">\n            <label className=\"font-semibold text-sm\">Фильтры:</label>\n            \n            <Select value={selectedRTS} onValueChange={setSelectedRTS}>\n              <SelectTrigger className=\"w-[200px]\" data-testid=\"select-rts\">\n                <SelectValue placeholder=\"Все РТС\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Все РТС</SelectItem>\n                {rtsList?.map((rts) => (\n                  <SelectItem key={rts.id} value={rts.id}>\n                    {rts.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-[200px]\" data-testid=\"select-status\">\n                <SelectValue placeholder=\"Все статусы\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Все ЦТП</SelectItem>\n                <SelectItem value=\"critical\">Критические</SelectItem>\n                <SelectItem value=\"warning\">Требуют внимания</SelectItem>\n                <SelectItem value=\"normal\">В норме</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedCTP} onValueChange={setSelectedCTP}>\n              <SelectTrigger className=\"w-[200px]\" data-testid=\"select-ctp\">\n                <SelectValue placeholder=\"Выберите ЦТП\" />\n              </SelectTrigger>\n              <SelectContent>\n                {filteredCTP?.map((ctp) => (\n                  <SelectItem key={ctp.id} value={ctp.id}>\n                    {ctp.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Input\n              placeholder=\"Поиск по названию ЦТП...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"flex-1 min-w-[250px]\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Control Chart */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <CardTitle>\n                Контрольная карта Шухарта - {selectedCTPData?.name || selectedCTP}\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Период: 01.10.2023 - {new Date().toLocaleDateString('ru-RU')}\n              </p>\n            </div>\n            <div className=\"flex gap-4 text-xs\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-5 h-1 bg-red-500\" />\n                <span>UCL (Верхняя граница)</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-5 h-1 bg-green-500\" />\n                <span>CL (Центральная линия)</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-5 h-1 bg-blue-500\" />\n                <span>LCL (Нижняя граница)</span>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[500px]\" data-testid=\"control-chart\">\n            {loadingChart ? (\n              <div className=\"h-full bg-muted animate-pulse rounded\" />\n            ) : (\n              <ControlChart data={controlData || []} />\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics and Recent Violations */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Статистические параметры</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-6 text-sm\">\n              <div>\n                <div className=\"text-muted-foreground\">Среднее (CL)</div>\n                <div className=\"font-semibold font-mono text-lg\">\n                  {selectedCTPData?.cl?.toFixed(1) || \"32.5\"} т/ч\n                </div>\n              </div>\n              <div>\n                <div className=\"text-muted-foreground\">UCL</div>\n                <div className=\"font-semibold font-mono text-lg\">\n                  {selectedCTPData?.ucl?.toFixed(1) || \"36.1\"} т/ч\n                </div>\n              </div>\n              <div>\n                <div className=\"text-muted-foreground\">LCL</div>\n                <div className=\"font-semibold font-mono text-lg\">\n                  {selectedCTPData?.lcl?.toFixed(1) || \"28.2\"} т/ч\n                </div>\n              </div>\n              <div>\n                <div className=\"text-muted-foreground\">Std. откл.</div>\n                <div className=\"font-semibold font-mono text-lg\">2.63 т/ч</div>\n              </div>\n              <div>\n                <div className=\"text-muted-foreground\">Выходов за UCL</div>\n                <div className=\"font-semibold text-red-600 text-lg\">\n                  {controlData?.filter(d => d.controlType === 'upper').length || 8}\n                </div>\n              </div>\n              <div>\n                <div className=\"text-muted-foreground\">Выходов за LCL</div>\n                <div className=\"font-semibold text-blue-600 text-lg\">\n                  {controlData?.filter(d => d.controlType === 'lower').length || 3}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Последние выходы за границы</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-sm space-y-3\">\n              {controlData?.filter(d => d.isOutOfControl).slice(-4).reverse().map((violation, index) => (\n                <div \n                  key={index} \n                  className=\"flex justify-between py-2 border-b border-border last:border-0\"\n                  data-testid={`violation-${index}`}\n                >\n                  <span>{new Date(violation.date).toLocaleDateString('ru-RU')}</span>\n                  <span className={`font-semibold ${\n                    violation.controlType === 'upper' ? 'text-red-600' : 'text-blue-600'\n                  }`}>\n                    {violation.controlType === 'upper' ? '+' : '-'}\n                    {Math.abs(violation.value - (violation.controlType === 'upper' ? violation.ucl : violation.lcl)).toFixed(1)} т/ч \n                    {violation.controlType === 'upper' ? ' над UCL' : ' под LCL'}\n                  </span>\n                </div>\n              )) || (\n                <>\n                  <div className=\"flex justify-between py-2 border-b border-border\">\n                    <span>27.01.2025</span>\n                    <span className=\"font-semibold text-red-600\">+4.2 т/ч над UCL</span>\n                  </div>\n                  <div className=\"flex justify-between py-2 border-b border-border\">\n                    <span>24.01.2025</span>\n                    <span className=\"font-semibold text-red-600\">+2.8 т/ч над UCL</span>\n                  </div>\n                  <div className=\"flex justify-between py-2 border-b border-border\">\n                    <span>19.01.2025</span>\n                    <span className=\"font-semibold text-blue-600\">-3.5 т/ч под LCL</span>\n                  </div>\n                  <div className=\"flex justify-between py-2\">\n                    <span>15.01.2025</span>\n                    <span className=\"font-semibold text-red-600\">+5.7 т/ч над UCL</span>\n                  </div>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11551},"client/src/pages/ctp-table.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { ChevronLeft, ChevronRight, Eye } from \"lucide-react\";\nimport type { CTPWithDetails } from \"@shared/schema\";\n\nexport default function CTPTable() {\n  const [selectedRTS, setSelectedRTS] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [selectedDistrict, setSelectedDistrict] = useState<string>(\"all\");\n  const [selectedDate, setSelectedDate] = useState<string>(\n    new Date().toISOString().split('T')[0]\n  );\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 8;\n\n  // Load RTS list\n  const { data: rtsList } = useQuery<{ id: string; name: string; code: string }[]>({\n    queryKey: ['/api/rts'],\n  });\n\n  const { data: ctpList, isLoading } = useQuery<CTPWithDetails[]>({\n    queryKey: ['/api/ctp', selectedRTS],\n    queryFn: async () => {\n      const url = selectedRTS === \"all\" \n        ? '/api/ctp'\n        : `/api/ctp?rtsId=${selectedRTS}`;\n      const res = await fetch(url, { credentials: \"include\" });\n      if (!res.ok) throw new Error('Failed to fetch CTP list');\n      return res.json();\n    },\n  });\n\n  const filteredCTP = ctpList?.filter(ctp => {\n    const matchesStatus = selectedStatus === \"all\" || \n      (selectedStatus === \"critical\" && ctp.recommendations.some(r => r.priority === \"critical\")) ||\n      (selectedStatus === \"warning\" && ctp.recommendations.some(r => r.priority === \"warning\")) ||\n      (selectedStatus === \"normal\" && ctp.recommendations.every(r => r.priority === \"normal\"));\n    \n    const matchesDistrict = selectedDistrict === \"all\" || ctp.districtId === selectedDistrict;\n    \n    return matchesStatus && matchesDistrict;\n  }) || [];\n\n  const totalPages = Math.ceil(filteredCTP.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedCTP = filteredCTP.slice(startIndex, startIndex + itemsPerPage);\n\n  const getStatusInfo = (ctp: CTPWithDetails) => {\n    const measurement = ctp.latestMeasurement;\n    if (!measurement) return { status: 'normal', label: 'Нет данных' };\n\n    const criticalRec = ctp.recommendations.find(r => r.priority === 'critical');\n    const warningRec = ctp.recommendations.find(r => r.priority === 'warning');\n\n    if (criticalRec) {\n      return { status: 'critical', label: 'Критично' };\n    } else if (warningRec) {\n      return { status: 'warning', label: 'Внимание' };\n    } else {\n      return { status: 'normal', label: 'Норма' };\n    }\n  };\n\n  const getDeviation = (ctp: CTPWithDetails) => {\n    const measurement = ctp.latestMeasurement;\n    if (!measurement || !ctp.cl) return '—';\n\n    const deviation = measurement.makeupWater - ctp.cl;\n    const sign = deviation > 0 ? '+' : '';\n    return `${sign}${deviation.toFixed(1)}`;\n  };\n\n  const getRowBackgroundClass = (ctp: CTPWithDetails) => {\n    const measurement = ctp.latestMeasurement;\n    if (!measurement) return '';\n\n    const isAboveUCL = ctp.ucl && measurement.makeupWater > ctp.ucl;\n    const isBelowLCL = ctp.lcl && measurement.makeupWater < ctp.lcl;\n    const hasUndermix = measurement.undermix !== null && measurement.undermix < -2;\n\n    if (isAboveUCL) return 'bg-red-50 dark:bg-red-950/20';\n    if (isBelowLCL || hasUndermix) return 'bg-blue-50 dark:bg-blue-950/20';\n    return '';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-24 bg-muted animate-pulse rounded-lg\" />\n        <div className=\"h-96 bg-muted animate-pulse rounded-lg\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filter Bar */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex gap-4 flex-wrap items-center\">\n            <label className=\"font-semibold text-sm\">Фильтры:</label>\n            \n            <Select value={selectedRTS} onValueChange={setSelectedRTS}>\n              <SelectTrigger className=\"w-[200px]\" data-testid=\"select-rts-filter\">\n                <SelectValue placeholder=\"Все РТС\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Все РТС</SelectItem>\n                {rtsList?.map((rts) => (\n                  <SelectItem key={rts.id} value={rts.id}>\n                    {rts.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-[150px]\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Все статусы\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Все статусы</SelectItem>\n                <SelectItem value=\"critical\">Критические</SelectItem>\n                <SelectItem value=\"warning\">Требуют внимания</SelectItem>\n                <SelectItem value=\"normal\">В норме</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedDistrict} onValueChange={setSelectedDistrict}>\n              <SelectTrigger className=\"w-[150px]\" data-testid=\"select-district-filter\">\n                <SelectValue placeholder=\"Все микрорайоны\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Все микрорайоны</SelectItem>\n                <SelectItem value=\"district-1\">Ленинский</SelectItem>\n                <SelectItem value=\"district-2\">Советский</SelectItem>\n                <SelectItem value=\"district-3\">Кировский</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"w-auto\"\n              data-testid=\"input-date\"\n            />\n\n            <Button data-testid=\"button-apply-filters\">Применить</Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Data Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle>\n              Посуточные параметры ЦТП - {new Date(selectedDate).toLocaleDateString('ru-RU')}\n            </CardTitle>\n            <div className=\"flex gap-4 text-xs\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 bg-red-100 border border-red-300 rounded\" />\n                <span>Выход подпитки</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 bg-blue-100 border border-blue-300 rounded\" />\n                <span>Выход подмеса</span>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"data-table\" data-testid=\"table-ctp-data\">\n              <thead>\n                <tr>\n                  <th>ЦТП</th>\n                  <th>РТС</th>\n                  <th>Микрорайон</th>\n                  <th>Подпитка т/ч</th>\n                  <th>Подмес т/ч</th>\n                  <th>UCL</th>\n                  <th>CL</th>\n                  <th>LCL</th>\n                  <th>Отклонение</th>\n                  <th>Статус</th>\n                  <th>Рекомендация</th>\n                </tr>\n              </thead>\n              <tbody>\n                {paginatedCTP.map((ctp) => {\n                  const measurement = ctp.latestMeasurement;\n                  const statusInfo = getStatusInfo(ctp);\n                  const deviation = getDeviation(ctp);\n                  const rowClass = getRowBackgroundClass(ctp);\n\n                  return (\n                    <tr key={ctp.id} className={rowClass} data-testid={`row-ctp-${ctp.id}`}>\n                      <td className=\"font-semibold\">{ctp.fullName || ctp.name}</td>\n                      <td>{ctp.rts?.code || '—'}</td>\n                      <td>{ctp.district?.name || '—'}</td>\n                      <td className={`font-mono ${\n                        statusInfo.status === 'critical' ? 'font-bold text-red-600' :\n                        statusInfo.status === 'warning' ? 'font-semibold text-yellow-600' : ''\n                      }`}>\n                        {measurement ? measurement.makeupWater.toFixed(1) : '—'}\n                      </td>\n                      <td className={`font-mono ${\n                        measurement && measurement.undermix !== null && measurement.undermix < -2 ? 'font-bold text-blue-600' : ''\n                      }`}>\n                        {measurement?.undermix?.toFixed(1) || '—'}\n                      </td>\n                      <td className=\"font-mono\">{ctp.ucl?.toFixed(1) || '—'}</td>\n                      <td className=\"font-mono\">{ctp.cl?.toFixed(1) || '—'}</td>\n                      <td className=\"font-mono\">{ctp.lcl?.toFixed(1) || '—'}</td>\n                      <td className={`font-semibold ${\n                        statusInfo.status === 'critical' ? 'text-red-600' :\n                        statusInfo.status === 'warning' ? 'text-yellow-600' : 'text-green-600'\n                      }`}>\n                        {deviation}\n                      </td>\n                      <td>\n                        <StatusBadge \n                          status={statusInfo.status as 'normal' | 'warning' | 'critical'}\n                        >\n                          {statusInfo.label}\n                        </StatusBadge>\n                      </td>\n                      <td>\n                        {ctp.recommendations.length > 0 ? (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            data-testid={`button-recommendation-${ctp.id}`}\n                          >\n                            <Eye className=\"w-3 h-3 mr-1\" />\n                            {ctp.recommendations[0].type === 'inspection' ? 'Инспекция' :\n                             ctp.recommendations[0].type === 'meter_check' ? 'Проверка' : 'Мониторинг'}\n                          </Button>\n                        ) : '—'}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          \n          {/* Pagination */}\n          <div className=\"px-6 py-4 border-t border-border flex justify-between items-center\">\n            <div className=\"text-sm text-muted-foreground\">\n              Показано {startIndex + 1}-{Math.min(startIndex + itemsPerPage, filteredCTP.length)} из {filteredCTP.length} ЦТП\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                disabled={currentPage === 1}\n                data-testid=\"button-prev-page\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n                Назад\n              </Button>\n              \n              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                let pageNum = i + 1;\n                if (totalPages > 5) {\n                  if (currentPage > 3) {\n                    pageNum = currentPage - 2 + i;\n                  }\n                  if (currentPage > totalPages - 3) {\n                    pageNum = totalPages - 4 + i;\n                  }\n                }\n                \n                return (\n                  <Button\n                    key={pageNum}\n                    variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(pageNum)}\n                    data-testid={`button-page-${pageNum}`}\n                  >\n                    {pageNum}\n                  </Button>\n                );\n              })}\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                disabled={currentPage === totalPages}\n                data-testid=\"button-next-page\"\n              >\n                Вперед\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13123},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendChart } from \"@/components/charts/trend-chart\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ArrowDown, ArrowUp, TriangleAlert, Eye } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport type { RTSWithStats } from \"@shared/schema\";\n\ninterface DashboardSummary {\n  currentMakeupWater: number;\n  ctpRequiringAttention: number;\n  ctpInNormal: number;\n  outOfControlCount: number;\n  rtsStats: RTSWithStats[];\n}\n\nexport default function Dashboard() {\n  const { data: summary, isLoading } = useQuery<DashboardSummary>({\n    queryKey: ['/api/dashboard/summary'],\n  });\n\n  const { data: yearlyChange } = useQuery<{ change: number }>({\n    queryKey: ['/api/trends/overall-change/year'],\n  });\n\n  const { data: weeklyChange } = useQuery<{ change: number }>({\n    queryKey: ['/api/trends/overall-change/week'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-8 w-20 mb-2\" />\n                <Skeleton className=\"h-4 w-32 mb-2\" />\n                <Skeleton className=\"h-4 w-24\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!summary) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-muted-foreground\">Ошибка загрузки данных дашборда</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"metric-value text-primary\" data-testid=\"metric-makeup-water\">\n              {summary.currentMakeupWater.toLocaleString()}\n            </div>\n            <div className=\"metric-label\">Подпитка т/ч (текущая)</div>\n            {yearlyChange && (\n              <div className={cn(\n                \"metric-change\",\n                yearlyChange.change < 0 ? \"positive\" : yearlyChange.change > 0 ? \"negative\" : \"\"\n              )}>\n                {yearlyChange.change < 0 && <ArrowDown className=\"w-3 h-3 mr-1\" />}\n                {yearlyChange.change > 0 && <ArrowUp className=\"w-3 h-3 mr-1\" />}\n                {yearlyChange.change.toFixed(1)} т/ч к прошлому году\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"metric-value text-yellow-600\" data-testid=\"metric-attention\">\n              {summary.ctpRequiringAttention}\n            </div>\n            <div className=\"metric-label\">ЦТП требующих внимания</div>\n            <div className=\"metric-change negative\">\n              <TriangleAlert className=\"w-3 h-3 mr-1\" />\n              {summary.outOfControlCount} критических\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"metric-value text-green-600\" data-testid=\"metric-normal\">\n              {summary.ctpInNormal}%\n            </div>\n            <div className=\"metric-label\">ЦТП в норме</div>\n            {weeklyChange && (\n              <div className={cn(\n                \"metric-change\",\n                weeklyChange.change < 0 ? \"positive\" : weeklyChange.change > 0 ? \"negative\" : \"\"\n              )}>\n                {weeklyChange.change < 0 && <ArrowDown className=\"w-3 h-3 mr-1\" />}\n                {weeklyChange.change > 0 && <ArrowUp className=\"w-3 h-3 mr-1\" />}\n                {Math.abs(weeklyChange.change).toFixed(1)} т/ч за неделю\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"metric-value text-red-600\" data-testid=\"metric-out-of-control\">\n              {summary.outOfControlCount}\n            </div>\n            <div className=\"metric-label\">Выходы за границы</div>\n            <div className=\"metric-change negative\">\n              <ArrowUp className=\"w-3 h-3 mr-1\" />\n              За последние сутки\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Chart */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle>Динамика подпитки по Новосибирску</CardTitle>\n              <CardDescription>Текущий период</CardDescription>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\">День</Button>\n              <Button variant=\"default\" size=\"sm\">Неделя</Button>\n              <Button variant=\"outline\" size=\"sm\">Месяц</Button>\n              <Button variant=\"outline\" size=\"sm\">Год</Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[400px]\">\n            <TrendChart period=\"week\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Regional Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Правый берег</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-[350px]\">\n              <TrendChart period=\"week\" rtsFilter=\"right\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>Левый берег</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-[350px]\">\n              <TrendChart period=\"week\" rtsFilter=\"left\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* RTS Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Распределение по РТС</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"data-table\" data-testid=\"table-rts-breakdown\">\n              <thead>\n                <tr>\n                  <th>РТС</th>\n                  <th>Подпитка т/ч</th>\n                  <th>Изменение за неделю</th>\n                  <th>Изменение за год</th>\n                  <th>% от общей</th>\n                  <th>Статус</th>\n                  <th>Действия</th>\n                </tr>\n              </thead>\n              <tbody>\n                {(() => {\n                  const totalAbsolute = summary.rtsStats.reduce(\n                    (sum, rts) => sum + Math.abs(rts.totalMakeupWater), \n                    0\n                  );\n                  \n                  return summary.rtsStats.map((rts) => {\n                    const percentage = totalAbsolute > 0 \n                      ? ((Math.abs(rts.totalMakeupWater) / totalAbsolute) * 100).toFixed(1)\n                      : '0.0';\n                    const status = rts.criticalCount > 0 ? 'warning' : 'normal';\n                    \n                    return (\n                      <RTSRow \n                        key={rts.id} \n                        rts={rts} \n                        percentage={percentage} \n                        status={status} \n                      />\n                    );\n                  });\n                })()}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction RTSRow({ rts, percentage, status }: { \n  rts: RTSWithStats; \n  percentage: string; \n  status: 'normal' | 'warning' | 'critical'; \n}) {\n  const { data: weeklyChangeData } = useQuery<{ change: number }>({\n    queryKey: [`/api/rts/${rts.id}/weekly-change`],\n  });\n\n  const weeklyChange = weeklyChangeData?.change || 0;\n\n  return (\n    <tr data-testid={`row-rts-${rts.id}`}>\n      <td className=\"font-semibold\">{rts.code} ({rts.name})</td>\n      <td className=\"font-mono\">{rts.totalMakeupWater.toFixed(1)}</td>\n      <td className={cn(\n        weeklyChange < 0 ? \"text-green-600\" : weeklyChange > 0 ? \"text-red-600\" : \"text-muted-foreground\"\n      )}>\n        {weeklyChange < 0 && <ArrowDown className=\"w-4 h-4 inline mr-1\" />}\n        {weeklyChange > 0 && <ArrowUp className=\"w-4 h-4 inline mr-1\" />}\n        {weeklyChange.toFixed(1)}\n      </td>\n      <td className=\"text-muted-foreground\">-</td>\n      <td>{percentage}%</td>\n      <td>\n        <StatusBadge status={status}>\n          {status === 'warning' ? 'Внимание' : 'Норма'}\n        </StatusBadge>\n      </td>\n      <td>\n        <Button variant=\"outline\" size=\"sm\" data-testid={`button-details-${rts.id}`}>\n          <Eye className=\"w-4 h-4 mr-1\" />\n          Детали\n        </Button>\n      </td>\n    </tr>\n  );\n}\n","size_bytes":9323},"client/src/pages/data-upload.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CloudUpload, Lightbulb, FileSpreadsheet, File, AlertCircle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { UploadedFile } from \"@shared/schema\";\n\nexport default function DataUpload() {\n  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);\n  const [selectedModelFile, setSelectedModelFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: uploadHistory, isLoading } = useQuery<UploadedFile[]>({\n    queryKey: ['/api/upload/history'],\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (files: FileList) => {\n      const formData = new FormData();\n      Array.from(files).forEach(file => {\n        formData.append('files', file);\n      });\n\n      const response = await apiRequest('POST', '/api/upload', formData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Файлы загружены успешно\",\n        description: \"Обработка файлов начата\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/upload/history'] });\n      setSelectedFiles(null);\n      setUploadProgress({});\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка загрузки\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importModelMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await apiRequest('POST', '/api/import-model', formData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Модель импортирована успешно\",\n        description: `Импортировано: ${data.ctpCount} ЦТП, ${data.measurementCount} измерений, ${data.vyvodCount} выводов`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/ctp'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/rts'] });\n      setSelectedModelFile(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка импорта модели\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleModelFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const extension = file.name.split('.').pop()?.toLowerCase();\n      if (['xlsm'].includes(extension || '')) {\n        setSelectedModelFile(file);\n      } else {\n        toast({\n          title: \"Неподдерживаемый файл\",\n          description: \"Для импорта модели поддерживается только файл Model_2.5.20.xlsm\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleImportModel = () => {\n    if (selectedModelFile) {\n      importModelMutation.mutate(selectedModelFile);\n    }\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      // Validate file types\n      const validFiles = Array.from(files).filter(file => {\n        const extension = file.name.split('.').pop()?.toLowerCase();\n        return ['xlsx', 'xlsm', 'xlsb'].includes(extension || '');\n      });\n\n      if (validFiles.length !== files.length) {\n        toast({\n          title: \"Неподдерживаемые файлы\",\n          description: \"Поддерживаются только файлы Excel (XLSX, XLSM, XLSB)\",\n          variant: \"destructive\",\n        });\n      }\n\n      if (validFiles.length > 0) {\n        const fileList = new DataTransfer();\n        validFiles.forEach(file => fileList.items.add(file));\n        setSelectedFiles(fileList.files);\n      }\n    }\n  };\n\n  const handleUpload = () => {\n    if (selectedFiles && selectedFiles.length > 0) {\n      // Simulate progress for UX\n      Array.from(selectedFiles).forEach((file, index) => {\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += Math.random() * 20;\n          if (progress >= 100) {\n            progress = 100;\n            clearInterval(interval);\n          }\n          setUploadProgress(prev => ({ ...prev, [file.name]: progress }));\n        }, 200);\n      });\n\n      uploadMutation.mutate(selectedFiles);\n    }\n  };\n\n  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    const files = event.dataTransfer.files;\n    if (files.length > 0) {\n      const fakeEvent = {\n        target: { files }\n      } as React.ChangeEvent<HTMLInputElement>;\n      handleFileSelect(fakeEvent);\n    }\n  };\n\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n  };\n\n  const getFileTypeIcon = (fileType: string) => {\n    return <FileSpreadsheet className=\"w-4 h-4 mr-2\" />;\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed': return <StatusBadge status=\"normal\">Успешно</StatusBadge>;\n      case 'processing': return <StatusBadge status=\"info\">Обработка</StatusBadge>;\n      case 'error': return <StatusBadge status=\"critical\">Ошибка</StatusBadge>;\n      default: return <StatusBadge status=\"warning\">Неизвестно</StatusBadge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {Array.from({ length: 2 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"h-48 bg-muted animate-pulse rounded-lg\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-semibold mb-2\">Загрузка данных</h3>\n        <p className=\"text-muted-foreground text-sm\">\n          Импорт данных из Excel файлов (XLSM, XLSX, XLSB) с показаниями приборов учета\n        </p>\n      </div>\n\n      {/* Model Import Section */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <FileSpreadsheet className=\"w-5 h-5 mr-2 text-blue-600\" />\n            Импорт аналитической модели Model_2.5.20.xlsm\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n              <div className=\"flex items-start space-x-3\">\n                <Lightbulb className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n                <div>\n                  <p className=\"text-sm text-blue-900 dark:text-blue-100 font-medium\">\n                    Импорт полной аналитической модели\n                  </p>\n                  <p className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">\n                    Загрузите файл Model_2.5.20.xlsm для импорта полного справочника ЦТП с историческими данными, выводами, комментариями и расширенной статистикой.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex-1\">\n                <Input\n                  id=\"modelFileInput\"\n                  type=\"file\"\n                  accept=\".xlsm\"\n                  onChange={handleModelFileSelect}\n                  data-testid=\"model-file-input\"\n                  className=\"cursor-pointer\"\n                />\n              </div>\n              <Button\n                onClick={handleImportModel}\n                disabled={!selectedModelFile || importModelMutation.isPending}\n                data-testid=\"button-import-model\"\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {importModelMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                    Импорт...\n                  </>\n                ) : (\n                  <>\n                    <CloudUpload className=\"w-4 h-4 mr-2\" />\n                    Импортировать модель\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {selectedModelFile && (\n              <div className=\"flex items-center p-2 bg-muted rounded\">\n                <FileSpreadsheet className=\"w-4 h-4 mr-2 text-blue-600\" />\n                <span className=\"text-sm\">{selectedModelFile.name}</span>\n                <span className=\"text-xs text-muted-foreground ml-2\">\n                  ({(selectedModelFile.size / 1024 / 1024).toFixed(1)} MB)\n                </span>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Upload Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <CloudUpload className=\"w-5 h-5 mr-2 text-primary\" />\n              Загрузка новых данных\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div\n              className=\"border-2 border-dashed border-border rounded-lg p-8 text-center cursor-pointer transition-all hover:border-primary hover:bg-primary/5\"\n              onClick={() => document.getElementById('fileInput')?.click()}\n              onDrop={handleDrop}\n              onDragOver={handleDragOver}\n              data-testid=\"upload-zone\"\n            >\n              <CloudUpload className=\"w-12 h-12 mx-auto mb-4 text-primary\" />\n              <p className=\"font-semibold mb-2\">Перетащите файлы сюда или нажмите для выбора</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Поддерживаются форматы: XLSM, XLSX, XLSB\n              </p>\n            </div>\n            \n            <Input\n              id=\"fileInput\"\n              type=\"file\"\n              multiple\n              accept=\".xlsm,.xlsx,.xlsb\"\n              className=\"hidden\"\n              onChange={handleFileSelect}\n              data-testid=\"file-input\"\n            />\n\n            {selectedFiles && selectedFiles.length > 0 && (\n              <div className=\"mt-4\">\n                <h4 className=\"font-medium mb-2\">Выбранные файлы:</h4>\n                <div className=\"space-y-2\">\n                  {Array.from(selectedFiles).map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                      <div className=\"flex items-center\">\n                        <FileSpreadsheet className=\"w-4 h-4 mr-2 text-green-600\" />\n                        <span className=\"text-sm\">{file.name}</span>\n                        <span className=\"text-xs text-muted-foreground ml-2\">\n                          ({(file.size / 1024 / 1024).toFixed(1)} MB)\n                        </span>\n                      </div>\n                      {uploadProgress[file.name] && (\n                        <div className=\"w-32\">\n                          <Progress value={uploadProgress[file.name]} className=\"h-2\" />\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Button\n              className=\"w-full mt-4\"\n              onClick={handleUpload}\n              disabled={!selectedFiles || selectedFiles.length === 0 || uploadMutation.isPending}\n              data-testid=\"button-upload\"\n            >\n              {uploadMutation.isPending ? (\n                <>\n                  <div className=\"loading-spinner mr-2\" />\n                  Обработка...\n                </>\n              ) : (\n                <>\n                  <CloudUpload className=\"w-4 h-4 mr-2\" />\n                  Обработать загруженные файлы\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Lightbulb className=\"w-5 h-5 mr-2 text-primary\" />\n              Информация о загрузке\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-sm space-y-4\">\n              <p>Система поддерживает следующие типы файлов:</p>\n              <ul className=\"ml-6 space-y-2\">\n                <li className=\"flex items-center\">\n                  <File className=\"w-4 h-4 mr-2\" />\n                  <strong>Показания ОДПУ</strong> - приборы учета тепловой энергии\n                </li>\n                <li className=\"flex items-center\">\n                  <File className=\"w-4 h-4 mr-2\" />\n                  <strong>Свод журнала</strong> - сводные данные по РТС\n                </li>\n                <li className=\"flex items-center\">\n                  <File className=\"w-4 h-4 mr-2\" />\n                  <strong>Сводная ведомость</strong> - данные по абонентам\n                </li>\n                <li className=\"flex items-center\">\n                  <File className=\"w-4 h-4 mr-2\" />\n                  <strong>Аналитическая модель</strong> - расчетные параметры\n                </li>\n              </ul>\n              <div className=\"p-3 bg-primary/10 rounded-lg border border-primary/20\">\n                <div className=\"flex items-start\">\n                  <Lightbulb className=\"w-4 h-4 mr-2 text-primary mt-0.5 flex-shrink-0\" />\n                  <p className=\"text-sm\">\n                    После загрузки данные автоматически обрабатываются и интегрируются в систему анализа.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Upload History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>История загрузок</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"data-table\" data-testid=\"upload-history\">\n              <thead>\n                <tr>\n                  <th>Дата загрузки</th>\n                  <th>Тип файла</th>\n                  <th>Имя файла</th>\n                  <th>Размер</th>\n                  <th>Статус</th>\n                  <th>Записей обработано</th>\n                  <th>Действия</th>\n                </tr>\n              </thead>\n              <tbody>\n                {uploadHistory && uploadHistory.length > 0 ? (\n                  uploadHistory.map((file) => (\n                    <tr key={file.id} data-testid={`upload-row-${file.id}`}>\n                      <td>{file.uploadedAt ? new Date(file.uploadedAt).toLocaleString('ru-RU') : '—'}</td>\n                      <td className=\"flex items-center\">\n                        {getFileTypeIcon(file.fileType)}\n                        {file.fileType?.toUpperCase() || '—'}\n                      </td>\n                      <td className=\"max-w-xs truncate\" title={file.originalName || ''}>\n                        {file.originalName || '—'}\n                      </td>\n                      <td>{(file.size / 1024 / 1024).toFixed(1)} MB</td>\n                      <td>{getStatusBadge(file.status)}</td>\n                      <td>{file.recordsProcessed || 0}</td>\n                      <td>\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-details-${file.id}`}>\n                          Детали\n                        </Button>\n                      </td>\n                    </tr>\n                  ))\n                ) : (\n                  // Mock data when no uploads exist\n                  <>\n                    <tr>\n                      <td>29.01.2025 11:32</td>\n                      <td className=\"flex items-center\">\n                        <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                        Показания ОДПУ\n                      </td>\n                      <td>Показания ОДПУ 29.09.2025 - 02.10.2025.xlsb</td>\n                      <td>2.8 MB</td>\n                      <td><StatusBadge status=\"normal\">Успешно</StatusBadge></td>\n                      <td>347</td>\n                      <td><Button variant=\"outline\" size=\"sm\">Детали</Button></td>\n                    </tr>\n                    <tr>\n                      <td>28.01.2025 16:45</td>\n                      <td className=\"flex items-center\">\n                        <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                        Свод журнала\n                      </td>\n                      <td>Свод журнала 2024.xlsm</td>\n                      <td>5.2 MB</td>\n                      <td><StatusBadge status=\"normal\">Успешно</StatusBadge></td>\n                      <td>8,760</td>\n                      <td><Button variant=\"outline\" size=\"sm\">Детали</Button></td>\n                    </tr>\n                    <tr>\n                      <td>28.01.2025 09:15</td>\n                      <td className=\"flex items-center\">\n                        <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                        Аналитическая модель\n                      </td>\n                      <td>Model_2.5.20.xlsm</td>\n                      <td>12.5 MB</td>\n                      <td><StatusBadge status=\"normal\">Успешно</StatusBadge></td>\n                      <td>15,234</td>\n                      <td><Button variant=\"outline\" size=\"sm\">Детали</Button></td>\n                    </tr>\n                    <tr>\n                      <td>27.01.2025 14:20</td>\n                      <td className=\"flex items-center\">\n                        <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                        Сводная ведомость\n                      </td>\n                      <td>Сводная ведомость по абонентам за февраль 2025.xlsx</td>\n                      <td>1.9 MB</td>\n                      <td><StatusBadge status=\"warning\">Предупреждения</StatusBadge></td>\n                      <td>423</td>\n                      <td><Button variant=\"outline\" size=\"sm\">Детали</Button></td>\n                    </tr>\n                  </>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":19866},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/recommendations.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { RecommendationCard } from \"@/components/recommendations/recommendation-card\";\nimport { TriangleAlert, Settings, Eye } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Recommendation, CTPWithDetails } from \"@shared/schema\";\n\nexport default function Recommendations() {\n  const { data: recommendations, isLoading } = useQuery<Recommendation[]>({\n    queryKey: ['/api/recommendations'],\n  });\n\n  const { data: ctps, isLoading: ctpsLoading } = useQuery<CTPWithDetails[]>({\n    queryKey: ['/api/ctp'],\n  });\n\n  const { data: summary } = useQuery<{\n    currentMakeupWater: number;\n    ctpRequiringAttention: number;\n    ctpInNormal: number;\n    outOfControlCount: number;\n  }>({\n    queryKey: ['/api/dashboard/summary'],\n  });\n\n  if (isLoading || ctpsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-12 w-12 mb-4 rounded-full\" />\n                <Skeleton className=\"h-8 w-16 mb-2\" />\n                <Skeleton className=\"h-4 w-32\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const ctpsWithBounds = ctps?.filter(c => c.ucl != null && c.lcl != null) || [];\n  const sampleCTPs = ctpsWithBounds.slice(0, 3);\n\n  const criticalRecommendations = recommendations?.filter(r => r.priority === 'critical') || [];\n  const warningRecommendations = recommendations?.filter(r => r.priority === 'warning') || [];\n  const normalRecommendations = recommendations?.filter(r => r.priority === 'normal') || [];\n\n  const hasRealRecommendations = recommendations && recommendations.length > 0;\n  const inspectionCount = hasRealRecommendations \n    ? recommendations.filter(r => r.type === 'inspection').length \n    : 1;\n  const meterCheckCount = hasRealRecommendations \n    ? recommendations.filter(r => r.type === 'meter_check').length \n    : 2;\n  const monitoringCount = hasRealRecommendations \n    ? recommendations.filter(r => r.type === 'monitoring').length \n    : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-semibold mb-2\">Автоматические рекомендации по ЦТП</h3>\n        <p className=\"text-muted-foreground text-sm\">\n          Рекомендации формируются на основе статистического анализа и контрольных карт Шухарта\n        </p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"text-center\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-5xl mb-4\">\n              <TriangleAlert className=\"w-12 h-12 mx-auto text-red-500\" />\n            </div>\n            <div className=\"metric-value text-red-600 text-4xl\" data-testid=\"count-inspections\">\n              {inspectionCount}\n            </div>\n            <div className=\"metric-label\">Инспекция утечек</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"text-center\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-5xl mb-4\">\n              <Settings className=\"w-12 h-12 mx-auto text-yellow-500\" />\n            </div>\n            <div className=\"metric-value text-yellow-600 text-4xl\" data-testid=\"count-meter-checks\">\n              {meterCheckCount}\n            </div>\n            <div className=\"metric-label\">Проверка приборов учета</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"text-center\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-5xl mb-4\">\n              <Eye className=\"w-12 h-12 mx-auto text-blue-500\" />\n            </div>\n            <div className=\"metric-value text-blue-600 text-4xl\" data-testid=\"count-monitoring\">\n              {monitoringCount}\n            </div>\n            <div className=\"metric-label\">Усиленный мониторинг</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Critical Recommendations */}\n      {criticalRecommendations.length > 0 && (\n        <div>\n          <h4 className=\"font-semibold mb-4 text-red-600 flex items-center\">\n            <TriangleAlert className=\"w-5 h-5 mr-2\" />\n            Критические - требуют немедленного внимания\n          </h4>\n          <div className=\"space-y-4\">\n            {criticalRecommendations.map((rec) => (\n              <RecommendationCard \n                key={rec.id} \n                recommendation={rec} \n                data-testid={`critical-rec-${rec.id}`}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Warning Recommendations */}\n      {warningRecommendations.length > 0 && (\n        <div>\n          <h4 className=\"font-semibold mb-4 text-yellow-600 flex items-center\">\n            <TriangleAlert className=\"w-5 h-5 mr-2\" />\n            Требуют внимания\n          </h4>\n          <div className=\"space-y-4\">\n            {warningRecommendations.map((rec) => (\n              <RecommendationCard \n                key={rec.id} \n                recommendation={rec}\n                data-testid={`warning-rec-${rec.id}`}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Normal Status */}\n      <div>\n        <h4 className=\"font-semibold mb-4 text-green-600 flex items-center\">\n          <Eye className=\"w-5 h-5 mr-2\" />\n          Работают в пределах нормы\n        </h4>\n        <Card className=\"recommendation-card normal\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h5 className=\"font-semibold mb-1\">300 ЦТП работают стабильно</h5>\n                <p className=\"text-sm text-muted-foreground\">\n                  Параметры подпитки находятся в контрольных границах\n                </p>\n              </div>\n              <span className=\"status-badge status-normal\">Норма</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Mock Critical Recommendations when no data */}\n      {(!recommendations || recommendations.length === 0) && sampleCTPs.length >= 3 && (\n        <>\n          <div>\n            <h4 className=\"font-semibold mb-4 text-red-600 flex items-center\">\n              <TriangleAlert className=\"w-5 h-5 mr-2\" />\n              Критические - требуют немедленного внимания\n            </h4>\n            <div className=\"space-y-4\">\n              <RecommendationCard \n                recommendation={{\n                  id: 'mock-1',\n                  ctpId: sampleCTPs[0].id,\n                  type: 'meter_check',\n                  priority: 'critical',\n                  title: `${sampleCTPs[0].fullName || sampleCTPs[0].name} (${sampleCTPs[0].rts?.code || 'РТС'}, ${sampleCTPs[0].district?.name || 'район'})`,\n                  description: 'Выход подпитки за верхнюю контрольную границу',\n                  actions: JSON.stringify([\n                    'Провести инспекцию на предмет утечек теплоносителя',\n                    'Проверить работоспособность приборов учета',\n                    'Проверить параметры работы подпиточных насосов',\n                    'При выявлении утечек - организовать устранение'\n                  ]),\n                  status: 'open',\n                  createdAt: new Date(),\n                  updatedAt: new Date(),\n                }}\n                mockData={{\n                  currentMakeupWater: sampleCTPs[0].ucl ? Number((sampleCTPs[0].ucl * 1.15).toFixed(1)) : 40.3,\n                  ucl: sampleCTPs[0].ucl || 36.1,\n                  excess: sampleCTPs[0].ucl ? Number((sampleCTPs[0].ucl * 0.15).toFixed(1)) : 4.2,\n                  duration: '3 суток'\n                }}\n                data-testid=\"mock-critical-1\"\n              />\n              \n              <RecommendationCard \n                recommendation={{\n                  id: 'mock-2',\n                  ctpId: sampleCTPs[1].id,\n                  type: 'meter_check',\n                  priority: 'critical',\n                  title: `${sampleCTPs[1].fullName || sampleCTPs[1].name} (${sampleCTPs[1].rts?.code || 'РТС'}, ${sampleCTPs[1].district?.name || 'район'})`,\n                  description: 'Превышение подпитки сопоставимое с расходом G1',\n                  actions: JSON.stringify([\n                    'ПРИОРИТЕТ: Проверить приборы учета расхода теплоносителя',\n                    'Провести поверку счетчиков',\n                    'Проверить корректность передачи данных в АСКУЭ',\n                    'При необходимости - восстановить работоспособность приборов учета'\n                  ]),\n                  status: 'open',\n                  createdAt: new Date(),\n                  updatedAt: new Date(),\n                }}\n                mockData={{\n                  currentMakeupWater: sampleCTPs[1].ucl ? Number((sampleCTPs[1].ucl * 1.10).toFixed(1)) : 45.8,\n                  ucl: sampleCTPs[1].ucl || 42.5,\n                  flowG1: sampleCTPs[1].ucl ? Number((sampleCTPs[1].ucl * 1.15).toFixed(1)) : 48.2,\n                  duration: '5 суток'\n                }}\n                data-testid=\"mock-critical-2\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4 text-yellow-600 flex items-center\">\n              <TriangleAlert className=\"w-5 h-5 mr-2\" />\n              Требуют внимания\n            </h4>\n            <div className=\"space-y-4\">\n              <RecommendationCard \n                recommendation={{\n                  id: 'mock-3',\n                  ctpId: sampleCTPs[2].id,\n                  type: 'inspection',\n                  priority: 'warning',\n                  title: `${sampleCTPs[2].fullName || sampleCTPs[2].name} (${sampleCTPs[2].rts?.code || 'РТС'}, ${sampleCTPs[2].district?.name || 'район'})`,\n                  description: 'Подпитка приближается к UCL',\n                  actions: JSON.stringify([\n                    'Усилить мониторинг параметров работы ЦТП',\n                    'Запланировать визуальную инспекцию на ближайшее время',\n                    'Проверить состояние запорной арматуры'\n                  ]),\n                  status: 'open',\n                  createdAt: new Date(),\n                  updatedAt: new Date(),\n                }}\n                mockData={{\n                  currentMakeupWater: sampleCTPs[2].ucl ? Number((sampleCTPs[2].ucl * 0.95).toFixed(1)) : 35.2,\n                  ucl: sampleCTPs[2].ucl || 33.8,\n                  distanceToLimit: sampleCTPs[2].ucl ? Number((sampleCTPs[2].ucl * 0.05).toFixed(1)) : 2.3,\n                  trend: 'Растет'\n                }}\n                data-testid=\"mock-warning-1\"\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":11946},"client/src/pages/tree.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TreeNode } from \"@/components/tree/tree-node\";\nimport { cn } from \"@/lib/utils\";\nimport type { RTSWithStats, CTPWithDetails } from \"@shared/schema\";\n\nconst treeTabs = [\n  { key: 'short', label: 'Горизонт: Сутки - Неделя' },\n  { key: 'long', label: 'Горизонт: Неделя - Год' },\n];\n\nexport default function Tree() {\n  const [activeTab, setActiveTab] = useState<string>('short');\n\n  const { data: rtsStats, isLoading: loadingRTS } = useQuery<RTSWithStats[]>({\n    queryKey: ['/api/rts/stats'],\n  });\n\n  const { data: ctpList, isLoading: loadingCTP } = useQuery<CTPWithDetails[]>({\n    queryKey: ['/api/ctp'],\n  });\n\n  const { data: weeklyChange } = useQuery<{ change: number }>({\n    queryKey: ['/api/trends/overall-change/week'],\n  });\n\n  if (loadingRTS || loadingCTP) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-16 bg-muted animate-pulse rounded-lg\" />\n        <div className=\"h-96 bg-muted animate-pulse rounded-lg\" />\n      </div>\n    );\n  }\n\n  if (!rtsStats || !ctpList) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-muted-foreground\">Ошибка загрузки данных дерева подпитки</p>\n      </div>\n    );\n  }\n\n  const totalMakeupWater = rtsStats.reduce((sum, rts) => sum + rts.totalMakeupWater, 0);\n  const totalWeeklyChange = weeklyChange?.change || 0;\n\n  // Group CTP by RTS\n  const ctpByRTS = ctpList.reduce((acc, ctp) => {\n    if (!acc[ctp.rtsId!]) {\n      acc[ctp.rtsId!] = [];\n    }\n    acc[ctp.rtsId!].push(ctp);\n    return acc;\n  }, {} as Record<string, CTPWithDetails[]>);\n\n  // Group CTP by district within each RTS\n  const ctpByDistrict = (rtsId: string) => {\n    const rtsCTPs = ctpByRTS[rtsId] || [];\n    return rtsCTPs.reduce((acc, ctp) => {\n      if (!acc[ctp.districtId!]) {\n        acc[ctp.districtId!] = [];\n      }\n      acc[ctp.districtId!].push(ctp);\n      return acc;\n    }, {} as Record<string, CTPWithDetails[]>);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-semibold mb-2\">Дерево подпитки ЦТП с рекомендациями</h3>\n        <p className=\"text-muted-foreground text-sm\">\n          Иерархическая структура подпитки по РТС, микрорайонам и ЦТП\n        </p>\n      </div>\n\n      {/* Tab Container */}\n      <div className=\"tab-container\">\n        {treeTabs.map((tab) => (\n          <div\n            key={tab.key}\n            className={cn(\"tab\", activeTab === tab.key && \"active\")}\n            onClick={() => setActiveTab(tab.key)}\n            data-testid={`tab-${tab.key}`}\n          >\n            {tab.label}\n          </div>\n        ))}\n      </div>\n\n      {/* Tree Structure */}\n      <Card>\n        <CardContent className=\"p-6\">\n          {/* Root Node - Новосибирск */}\n          <TreeNode\n            id=\"novosibirsk\"\n            icon=\"city\"\n            name=\"Новосибирск\"\n            makeupWater={totalMakeupWater}\n            weeklyChange={totalWeeklyChange}\n            status=\"normal\"\n            isRoot\n            data-testid=\"tree-root\"\n          >\n            {/* RTS Level */}\n            {rtsStats.map((rts) => {\n              const rtsCTPs = ctpByRTS[rts.id] || [];\n              const rtsStatus = rts.criticalCount > 0 ? 'warning' : 'normal';\n              const districts = ctpByDistrict(rts.id);\n\n              return (\n                <RTSTreeNode\n                  key={rts.id}\n                  rts={rts}\n                  rtsCTPs={rtsCTPs}\n                  rtsStatus={rtsStatus}\n                  districts={districts}\n                />\n              );\n            })}\n          </TreeNode>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction RTSTreeNode({ \n  rts, \n  rtsCTPs, \n  rtsStatus, \n  districts \n}: { \n  rts: RTSWithStats; \n  rtsCTPs: CTPWithDetails[]; \n  rtsStatus: 'normal' | 'warning' | 'critical'; \n  districts: Record<string, CTPWithDetails[]>;\n}) {\n  const { data: rtsChange } = useQuery<{ change: number }>({\n    queryKey: [`/api/rts/${rts.id}/weekly-change`],\n  });\n\n  return (\n    <TreeNode\n      id={rts.id}\n      icon=\"building\"\n      name={`${rts.code} (${rts.name})`}\n      makeupWater={rts.totalMakeupWater}\n      weeklyChange={rtsChange?.change}\n      status={rtsStatus}\n      data-testid={`tree-rts-${rts.id}`}\n    >\n      {/* District Level */}\n      {Object.entries(districts).map(([districtId, districtCTPs]) => {\n        if (districtCTPs.length === 0) return null;\n        \n        const district = districtCTPs[0].district;\n        const districtMakeupWater = districtCTPs.reduce(\n          (sum, ctp) => sum + (ctp.latestMeasurement?.makeupWater || 0), 0\n        );\n        const hasWarning = districtCTPs.some(ctp => \n          ctp.recommendations.some(r => r.priority === 'warning' || r.priority === 'critical')\n        );\n\n        return (\n          <TreeNode\n            key={districtId}\n            id={districtId}\n            icon=\"map\"\n            name={`${district.name} микрорайон`}\n            makeupWater={districtMakeupWater}\n            status={hasWarning ? 'warning' : 'normal'}\n            data-testid={`tree-district-${districtId}`}\n          >\n            {/* CTP Level */}\n            {districtCTPs.map((ctp) => (\n              <CTPTreeNode key={ctp.id} ctp={ctp} />\n            ))}\n          </TreeNode>\n        );\n      })}\n    </TreeNode>\n  );\n}\n\nfunction CTPTreeNode({ ctp }: { ctp: CTPWithDetails }) {\n  const { data: ctpChange } = useQuery<{ change: number }>({\n    queryKey: [`/api/ctp/${ctp.id}/weekly-change`],\n  });\n\n  const measurement = ctp.latestMeasurement;\n  \n  let status: 'normal' | 'warning' | 'critical' = 'normal';\n  let actionType: string | undefined;\n\n  const criticalRec = ctp.recommendations.find(r => r.priority === 'critical');\n  const warningRec = ctp.recommendations.find(r => r.priority === 'warning');\n\n  if (criticalRec) {\n    status = 'critical';\n    actionType = criticalRec.type === 'inspection' ? 'Инспекция утечек' : 'Проверка приборов';\n  } else if (warningRec) {\n    status = 'warning';\n    actionType = 'Мониторинг';\n  }\n\n  return (\n    <TreeNode\n      id={ctp.id}\n      icon=\"thermometer\"\n      name={ctp.name}\n      makeupWater={measurement?.makeupWater || 0}\n      weeklyChange={ctpChange?.change}\n      status={status}\n      actionType={actionType}\n      isLeaf\n      data-testid={`tree-ctp-${ctp.id}`}\n    />\n  );\n}\n","size_bytes":6721},"client/src/pages/trends.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendChart } from \"@/components/charts/trend-chart\";\nimport { cn } from \"@/lib/utils\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nconst trendTabs = [\n  { key: 'week', label: 'Неделя' },\n  { key: 'month', label: 'Месяц' },\n  { key: 'year', label: 'Год' },\n];\n\ninterface TrendChange {\n  ctpId: string;\n  ctpName: string;\n  change: number;\n  changePercent: number;\n}\n\ninterface RTSTrendChange {\n  rtsId: string;\n  rtsName: string;\n  change: number;\n  changePercent: number;\n}\n\nexport default function Trends() {\n  const [activeTab, setActiveTab] = useState<string>('week');\n\n  const { data: changes, isLoading: changesLoading } = useQuery<{\n    increases: TrendChange[];\n    decreases: TrendChange[];\n  }>({\n    queryKey: [`/api/trends/${activeTab}/changes`],\n    enabled: !!activeTab,\n  });\n\n  const { data: rtsStats, isLoading: rtsLoading } = useQuery<RTSTrendChange[]>({\n    queryKey: [`/api/trends/${activeTab}/rts-stats`],\n    enabled: !!activeTab,\n  });\n\n  const formatValue = (change: number) => {\n    const sign = change >= 0 ? '+' : '';\n    return `${sign}${change.toFixed(1)} т/ч`;\n  };\n\n  const isLoading = changesLoading || rtsLoading;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Tab Container */}\n      <div className=\"tab-container\">\n        {trendTabs.map((tab) => (\n          <div\n            key={tab.key}\n            className={cn(\"tab\", activeTab === tab.key && \"active\")}\n            onClick={() => setActiveTab(tab.key)}\n            data-testid={`tab-${tab.key}`}\n          >\n            {tab.label}\n          </div>\n        ))}\n      </div>\n\n      {/* Main Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>\n            Тренды ЦТП «{trendTabs.find(t => t.key === activeTab)?.label}» в т/ч\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[450px]\" data-testid=\"trends-chart\">\n            <TrendChart period={activeTab as 'week' | 'month' | 'year'} />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Top Increase */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-semibold\">Топ рост подпитки</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm\">\n            {isLoading ? (\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-8 w-full\" />\n                <Skeleton className=\"h-8 w-full\" />\n                <Skeleton className=\"h-8 w-full\" />\n              </div>\n            ) : changes?.increases && changes.increases.length > 0 ? (\n              changes.increases.map((item, index) => (\n                <div \n                  key={item.ctpId}\n                  className=\"flex justify-between py-2 border-b border-border last:border-0\"\n                  data-testid={`increase-${index}`}\n                >\n                  <span>{item.ctpName}</span>\n                  <span className=\"font-semibold text-red-600\">{formatValue(item.change)}</span>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-muted-foreground\">Нет данных</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Top Decrease */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-semibold\">Топ снижение подпитки</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm\">\n            {isLoading ? (\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-8 w-full\" />\n                <Skeleton className=\"h-8 w-full\" />\n                <Skeleton className=\"h-8 w-full\" />\n              </div>\n            ) : changes?.decreases && changes.decreases.length > 0 ? (\n              changes.decreases.map((item, index) => (\n                <div \n                  key={item.ctpId}\n                  className=\"flex justify-between py-2 border-b border-border last:border-0\"\n                  data-testid={`decrease-${index}`}\n                >\n                  <span>{item.ctpName}</span>\n                  <span className=\"font-semibold text-green-600\">{formatValue(item.change)}</span>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-muted-foreground\">Нет данных</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* RTS Statistics */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-semibold\">Статистика по РТС</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm\">\n            {isLoading ? (\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-8 w-full\" />\n                <Skeleton className=\"h-8 w-full\" />\n                <Skeleton className=\"h-8 w-full\" />\n              </div>\n            ) : rtsStats && rtsStats.length > 0 ? (\n              rtsStats.map((item, index) => (\n                <div \n                  key={item.rtsId}\n                  className=\"flex justify-between py-2 border-b border-border last:border-0\"\n                  data-testid={`rts-stat-${index}`}\n                >\n                  <span>{item.rtsName}</span>\n                  <span className={cn(\n                    \"font-semibold\",\n                    item.change >= 0 ? \"text-red-600\" : \"text-green-600\"\n                  )}>{formatValue(item.change)}</span>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-muted-foreground\">Нет данных</p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5916},"client/src/components/charts/control-chart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from \"recharts\";\nimport type { ControlChartData } from \"@shared/schema\";\n\ninterface ControlChartProps {\n  data: ControlChartData[];\n}\n\nexport function ControlChart({ data }: ControlChartProps) {\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"h-full flex items-center justify-center text-muted-foreground\">\n        Данные для контрольной карты не найдены\n      </div>\n    );\n  }\n\n  const formatTooltip = (value: any, name: string) => {\n    if (typeof value === 'number') {\n      return [`${value.toFixed(2)} т/ч`, name];\n    }\n    return [value, name];\n  };\n\n  const formatLabel = (label: string) => {\n    return new Date(label).toLocaleDateString('ru-RU');\n  };\n\n  // Get the control limits from the first data point\n  const ucl = data[0]?.ucl || 0;\n  const cl = data[0]?.cl || 0;\n  const lcl = data[0]?.lcl || 0;\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n        <XAxis \n          dataKey=\"date\" \n          stroke=\"hsl(var(--muted-foreground))\"\n          fontSize={12}\n          tickFormatter={(value) => new Date(value).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })}\n        />\n        <YAxis \n          stroke=\"hsl(var(--muted-foreground))\"\n          fontSize={12}\n          domain={['auto', 'auto']}\n          tickFormatter={(value) => typeof value === 'number' ? value.toFixed(1) : value}\n        />\n        <Tooltip \n          formatter={formatTooltip}\n          labelFormatter={formatLabel}\n          contentStyle={{\n            backgroundColor: 'hsl(var(--card))',\n            border: '1px solid hsl(var(--border))',\n            borderRadius: 'var(--radius)',\n          }}\n        />\n        <Legend />\n        \n        {/* Control Lines */}\n        <ReferenceLine \n          y={ucl} \n          stroke=\"#dc2626\" \n          strokeDasharray=\"5 5\" \n          strokeWidth={2}\n          label={{ value: \"UCL\", position: \"right\" }}\n        />\n        <ReferenceLine \n          y={cl} \n          stroke=\"#16a34a\" \n          strokeDasharray=\"5 5\" \n          strokeWidth={2}\n          label={{ value: \"CL\", position: \"right\" }}\n        />\n        <ReferenceLine \n          y={lcl} \n          stroke=\"#2563eb\" \n          strokeDasharray=\"5 5\" \n          strokeWidth={2}\n          label={{ value: \"LCL\", position: \"right\" }}\n        />\n        \n        {/* Data Line */}\n        <Line \n          type=\"monotone\" \n          dataKey=\"value\" \n          stroke=\"hsl(var(--primary))\" \n          strokeWidth={2}\n          dot={(props: any) => {\n            const isOutOfControl = data[props.index]?.isOutOfControl;\n            const controlType = data[props.index]?.controlType;\n            const key = `dot-${props.index}`;\n            \n            if (isOutOfControl) {\n              return (\n                <circle \n                  key={key}\n                  cx={props.cx} \n                  cy={props.cy} \n                  r={5}\n                  fill={controlType === 'upper' ? '#dc2626' : controlType === 'lower' ? '#2563eb' : '#16a34a'}\n                  stroke=\"#fff\"\n                  strokeWidth={2}\n                />\n              );\n            }\n            return <circle key={key} cx={props.cx} cy={props.cy} r={3} fill=\"hsl(var(--primary))\" />;\n          }}\n          activeDot={{ r: 6, stroke: \"hsl(var(--primary))\", strokeWidth: 2, fill: \"#fff\" }}\n          name=\"Подпитка\"\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":3679},"client/src/components/charts/factors-chart.tsx":{"content":"import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from \"recharts\";\n\nconst factorsData = [\n  { name: 'Гидроиспытания', value: 35, color: '#dc2626' },\n  { name: 'Аварийные заявки', value: 28, color: '#f59e0b' },\n  { name: 'Нормальная эксплуатация', value: 20, color: '#10b981' },\n  { name: 'Сезонные факторы', value: 12, color: '#3b82f6' },\n  { name: 'Прочее', value: 5, color: '#6b7280' },\n];\n\nexport function FactorsChart() {\n  const formatTooltip = (value: number, name: string) => {\n    return [`${value}%`, name];\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <PieChart>\n        <Pie\n          data={factorsData}\n          cx=\"50%\"\n          cy=\"50%\"\n          labelLine={false}\n          label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n          outerRadius={120}\n          fill=\"#8884d8\"\n          dataKey=\"value\"\n        >\n          {factorsData.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Pie>\n        <Tooltip \n          formatter={formatTooltip}\n          contentStyle={{\n            backgroundColor: 'hsl(var(--card))',\n            border: '1px solid hsl(var(--border))',\n            borderRadius: 'var(--radius)',\n          }}\n        />\n        <Legend \n          verticalAlign=\"middle\" \n          align=\"right\"\n          layout=\"vertical\"\n          iconType=\"rect\"\n          wrapperStyle={{ paddingLeft: '20px' }}\n        />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":1601},"client/src/components/charts/trend-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { TrendData } from \"@shared/schema\";\n\ninterface TrendChartProps {\n  period: 'day' | 'week' | 'month' | 'year';\n  rtsId?: string;\n  rtsFilter?: string;\n  ctpId?: string;\n}\n\nexport function TrendChart({ period, rtsId, rtsFilter, ctpId }: TrendChartProps) {\n  const { data: trendData, isLoading } = useQuery<TrendData[]>({\n    queryKey: ['/api/trends', period, rtsId, rtsFilter, ctpId],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (rtsId) params.set('rtsId', rtsId);\n      if (rtsFilter) params.set('rtsFilter', rtsFilter);\n      if (ctpId) params.set('ctpId', ctpId);\n      \n      const queryString = params.toString();\n      const url = `/api/trends/${period}${queryString ? `?${queryString}` : ''}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch trend data');\n      return response.json();\n    },\n  });\n\n  if (isLoading) {\n    return <Skeleton className=\"h-full w-full\" />;\n  }\n\n  if (!trendData || trendData.length === 0) {\n    return (\n      <div className=\"h-full flex items-center justify-center text-muted-foreground\">\n        Данные не найдены\n      </div>\n    );\n  }\n\n  const chartData = trendData.map(item => ({\n    date: new Date(item.date).toLocaleDateString('ru-RU', {\n      day: '2-digit',\n      month: '2-digit'\n    }),\n    value: item.value,\n  }));\n\n  const values = chartData.map(d => d.value);\n  const minValue = Math.min(...values);\n  const maxValue = Math.max(...values);\n  const padding = Math.abs(maxValue - minValue) * 0.1 || 10;\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart data={chartData} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n        <XAxis \n          dataKey=\"date\" \n          stroke=\"hsl(var(--muted-foreground))\"\n          fontSize={12}\n        />\n        <YAxis \n          stroke=\"hsl(var(--muted-foreground))\"\n          fontSize={12}\n          domain={[minValue - padding, maxValue + padding]}\n          tickFormatter={(value) => value.toFixed(0)}\n        />\n        <Tooltip \n          contentStyle={{\n            backgroundColor: 'hsl(var(--card))',\n            border: '1px solid hsl(var(--border))',\n            borderRadius: 'var(--radius)',\n          }}\n          formatter={(value: number) => [`${value.toFixed(1)} т/ч`, 'Подпитка']}\n        />\n        <Legend \n          verticalAlign=\"top\" \n          height={36}\n          formatter={() => 'Подпитка (т/ч)'}\n        />\n        <Line \n          type=\"monotone\" \n          dataKey=\"value\" \n          name=\"Подпитка\"\n          stroke=\"#2563eb\" \n          strokeWidth={3}\n          dot={{ r: 5, fill: '#2563eb' }}\n          activeDot={{ r: 7, fill: '#1d4ed8' }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":3103},"client/src/components/recommendations/recommendation-card.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { ClipboardCheck, BarChart3, History } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\nimport type { Recommendation } from \"@shared/schema\";\n\ninterface RecommendationCardProps {\n  recommendation: Recommendation;\n  mockData?: {\n    currentMakeupWater?: number;\n    ucl?: number;\n    lcl?: number;\n    cl?: number;\n    flowG1?: number;\n    excess?: number;\n    distanceToLimit?: number;\n    duration?: string;\n    trend?: string;\n  };\n}\n\nexport function RecommendationCard({ recommendation, mockData }: RecommendationCardProps) {\n  const [isAccepted, setIsAccepted] = useState(false);\n  const { toast } = useToast();\n\n  const handleAccept = () => {\n    setIsAccepted(true);\n    toast({\n      title: \"Рекомендация принята в работу\",\n      description: `${recommendation.title} добавлена в план работ`,\n    });\n  };\n\n  const handleShowAnalytics = () => {\n    toast({\n      title: \"Аналитика\",\n      description: \"Подробная аналитика будет открыта в отдельном окне\",\n    });\n  };\n\n  const handleShowHistory = () => {\n    toast({\n      title: \"История\",\n      description: \"История изменений параметров ЦТП\",\n    });\n  };\n\n  const getCardClass = () => {\n    switch (recommendation.priority) {\n      case 'critical': return 'recommendation-card meter-check border-l-red-500';\n      case 'warning': return 'recommendation-card inspection border-l-yellow-500';\n      default: return 'recommendation-card normal border-l-green-500';\n    }\n  };\n\n  const getStatusInfo = () => {\n    switch (recommendation.priority) {\n      case 'critical': return { status: 'critical' as const, label: 'Критично' };\n      case 'warning': return { status: 'warning' as const, label: 'Внимание' };\n      default: return { status: 'normal' as const, label: 'Норма' };\n    }\n  };\n\n  const statusInfo = getStatusInfo();\n\n  return (\n    <Card className={getCardClass()}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex justify-between items-start mb-3\">\n          <div>\n            <h5 className=\"font-semibold mb-1\">{recommendation.title}</h5>\n            <div className=\"text-sm text-muted-foreground\">{recommendation.description}</div>\n          </div>\n          <StatusBadge status={statusInfo.status}>\n            {statusInfo.label}\n          </StatusBadge>\n        </div>\n\n        {/* Parameters Display */}\n        {mockData && (\n          <div className=\"bg-muted p-4 rounded mb-3\">\n            <div className=\"grid grid-cols-4 gap-4 text-sm\">\n              {mockData.currentMakeupWater && (\n                <div>\n                  <div className=\"text-muted-foreground\">Текущая подпитка</div>\n                  <div className={cn(\n                    \"font-semibold font-mono\",\n                    recommendation.priority === 'critical' ? 'text-red-600' : \n                    recommendation.priority === 'warning' ? 'text-yellow-600' : 'text-foreground'\n                  )}>\n                    {mockData.currentMakeupWater} т/ч\n                  </div>\n                </div>\n              )}\n              \n              {mockData.ucl && (\n                <div>\n                  <div className=\"text-muted-foreground\">UCL</div>\n                  <div className=\"font-semibold font-mono\">{mockData.ucl} т/ч</div>\n                </div>\n              )}\n              \n              {mockData.excess && (\n                <div>\n                  <div className=\"text-muted-foreground\">Превышение</div>\n                  <div className=\"font-semibold text-red-600\">\n                    +{mockData.excess} т/ч ({((mockData.excess / mockData.ucl!) * 100).toFixed(1)}%)\n                  </div>\n                </div>\n              )}\n              \n              {mockData.flowG1 && (\n                <div>\n                  <div className=\"text-muted-foreground\">Расход G1</div>\n                  <div className=\"font-semibold font-mono\">{mockData.flowG1} т/ч</div>\n                </div>\n              )}\n              \n              {mockData.distanceToLimit && (\n                <div>\n                  <div className=\"text-muted-foreground\">До границы</div>\n                  <div className=\"font-semibold text-yellow-600\">+{mockData.distanceToLimit} т/ч</div>\n                </div>\n              )}\n              \n              {mockData.trend && (\n                <div>\n                  <div className=\"text-muted-foreground\">Тренд</div>\n                  <div className=\"font-semibold text-red-600\">↑ {mockData.trend}</div>\n                </div>\n              )}\n              \n              {mockData.duration && (\n                <div>\n                  <div className=\"text-muted-foreground\">Длительность</div>\n                  <div className=\"font-semibold\">{mockData.duration}</div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"text-sm mb-3\">\n          <strong>Рекомендации:</strong>\n          <ul className=\"mt-2 ml-6 space-y-1 leading-relaxed\">\n            {(() => {\n              if (!recommendation.actions) return null;\n              \n              try {\n                const parsedActions = JSON.parse(recommendation.actions);\n                if (Array.isArray(parsedActions)) {\n                  return parsedActions.map((action, index) => (\n                    <li key={index} className=\"list-disc\">{action}</li>\n                  ));\n                }\n              } catch {\n                return <li className=\"list-disc\">{recommendation.actions}</li>;\n              }\n              \n              return <li className=\"list-disc\">{recommendation.actions}</li>;\n            })()}\n          </ul>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={handleAccept}\n            disabled={isAccepted}\n            data-testid={`button-accept-${recommendation.id}`}\n          >\n            <ClipboardCheck className=\"w-4 h-4 mr-2\" />\n            {isAccepted ? 'Принято в работу' : 'Принять в работу'}\n          </Button>\n          <Button variant=\"outline\" onClick={handleShowAnalytics}>\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Подробная аналитика\n          </Button>\n          <Button variant=\"outline\" onClick={handleShowHistory}>\n            <History className=\"w-4 h-4 mr-2\" />\n            История\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6927},"client/src/components/tables/ctp-table.tsx":{"content":"import { StatusBadge } from \"@/components/ui/status-badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport type { CTPWithDetails } from \"@shared/schema\";\n\ninterface CTPTableProps {\n  data: CTPWithDetails[];\n  onRowClick?: (ctp: CTPWithDetails) => void;\n}\n\nexport function CTPTable({ data, onRowClick }: CTPTableProps) {\n  const getStatusInfo = (ctp: CTPWithDetails) => {\n    const measurement = ctp.latestMeasurement;\n    if (!measurement) return { status: 'normal', label: 'Нет данных' };\n\n    const criticalRec = ctp.recommendations.find(r => r.priority === 'critical');\n    const warningRec = ctp.recommendations.find(r => r.priority === 'warning');\n\n    if (criticalRec) {\n      return { status: 'critical', label: 'Критично' };\n    } else if (warningRec) {\n      return { status: 'warning', label: 'Внимание' };\n    } else {\n      return { status: 'normal', label: 'Норма' };\n    }\n  };\n\n  const getDeviation = (ctp: CTPWithDetails) => {\n    const measurement = ctp.latestMeasurement;\n    if (!measurement || !ctp.cl) return '—';\n\n    const deviation = measurement.makeupWater - ctp.cl;\n    const sign = deviation > 0 ? '+' : '';\n    return `${sign}${deviation.toFixed(1)}`;\n  };\n\n  const getRowBackgroundClass = (ctp: CTPWithDetails) => {\n    const measurement = ctp.latestMeasurement;\n    if (!measurement) return '';\n\n    const isAboveUCL = ctp.ucl && measurement.makeupWater > ctp.ucl;\n    const isBelowLCL = ctp.lcl && measurement.makeupWater < ctp.lcl;\n    const hasUndermix = measurement.undermix !== null && measurement.undermix < -2;\n\n    if (isAboveUCL) return 'bg-red-50 dark:bg-red-950/20';\n    if (isBelowLCL || hasUndermix) return 'bg-blue-50 dark:bg-blue-950/20';\n    return '';\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"data-table\">\n        <thead>\n          <tr>\n            <th>ЦТП</th>\n            <th>РТС</th>\n            <th>Микрорайон</th>\n            <th>Подпитка т/ч</th>\n            <th>Подмес т/ч</th>\n            <th>UCL</th>\n            <th>CL</th>\n            <th>LCL</th>\n            <th>Отклонение</th>\n            <th>Статус</th>\n            <th>Рекомендация</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((ctp) => {\n            const measurement = ctp.latestMeasurement;\n            const statusInfo = getStatusInfo(ctp);\n            const deviation = getDeviation(ctp);\n            const rowClass = getRowBackgroundClass(ctp);\n\n            return (\n              <tr \n                key={ctp.id} \n                className={cn(rowClass, onRowClick && \"cursor-pointer hover:bg-muted/50\")}\n                onClick={() => onRowClick?.(ctp)}\n                data-testid={`ctp-row-${ctp.id}`}\n              >\n                <td className=\"font-semibold\">{ctp.name}</td>\n                <td>{ctp.rts.code}</td>\n                <td>{ctp.district.name}</td>\n                <td className={cn(\n                  \"font-mono\",\n                  statusInfo.status === 'critical' && \"font-bold text-red-600\",\n                  statusInfo.status === 'warning' && \"font-semibold text-yellow-600\"\n                )}>\n                  {measurement?.makeupWater.toFixed(1) || '—'}\n                </td>\n                <td className={cn(\n                  \"font-mono\",\n                  measurement && measurement.undermix !== null && measurement.undermix < -2 && \"font-bold text-blue-600\"\n                )}>\n                  {measurement?.undermix?.toFixed(1) || '—'}\n                </td>\n                <td className=\"font-mono\">{ctp.ucl?.toFixed(1) || '—'}</td>\n                <td className=\"font-mono\">{ctp.cl?.toFixed(1) || '—'}</td>\n                <td className=\"font-mono\">{ctp.lcl?.toFixed(1) || '—'}</td>\n                <td className={cn(\n                  \"font-semibold\",\n                  statusInfo.status === 'critical' && \"text-red-600\",\n                  statusInfo.status === 'warning' && \"text-yellow-600\",\n                  statusInfo.status === 'normal' && \"text-green-600\"\n                )}>\n                  {deviation}\n                </td>\n                <td>\n                  <StatusBadge \n                    status={statusInfo.status as 'normal' | 'warning' | 'critical'}\n                  >\n                    {statusInfo.label}\n                  </StatusBadge>\n                </td>\n                <td>\n                  {ctp.recommendations.length > 0 ? (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        // Handle recommendation action\n                      }}\n                      data-testid={`recommendation-${ctp.id}`}\n                    >\n                      <Eye className=\"w-3 h-3 mr-1\" />\n                      {ctp.recommendations[0].type === 'inspection' ? 'Инспекция' :\n                       ctp.recommendations[0].type === 'meter_check' ? 'Проверка' : 'Мониторинг'}\n                    </Button>\n                  ) : '—'}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","size_bytes":5367},"client/src/components/tree/tree-node.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { \n  ChevronDown, \n  ChevronRight, \n  Building2, \n  MapPin, \n  Thermometer, \n  Search,\n  Eye,\n  Settings\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TreeNodeProps {\n  id: string;\n  icon: 'city' | 'building' | 'map' | 'thermometer';\n  name: string;\n  makeupWater: number;\n  weeklyChange?: number;\n  status: 'normal' | 'warning' | 'critical';\n  actionType?: string;\n  isRoot?: boolean;\n  isLeaf?: boolean;\n  children?: React.ReactNode;\n}\n\nconst iconMap = {\n  city: Building2,\n  building: Building2,\n  map: MapPin,\n  thermometer: Thermometer,\n};\n\nconst statusColorMap = {\n  normal: 'text-green-600',\n  warning: 'text-yellow-600', \n  critical: 'text-red-600',\n};\n\nexport function TreeNode({ \n  id, \n  icon, \n  name, \n  makeupWater, \n  weeklyChange, \n  status, \n  actionType,\n  isRoot = false,\n  isLeaf = false,\n  children \n}: TreeNodeProps) {\n  const [isExpanded, setIsExpanded] = useState(isRoot || !isLeaf);\n\n  const Icon = iconMap[icon];\n  const hasChildren = !!children;\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'critical': return 'Критично';\n      case 'warning': return 'Внимание';\n      default: return 'Норма';\n    }\n  };\n\n  const getBackgroundClass = (status: string) => {\n    switch (status) {\n      case 'critical': return 'bg-red-50 border-red-200 dark:bg-red-950/20 dark:border-red-800';\n      case 'warning': return 'bg-yellow-50 border-yellow-200 dark:bg-yellow-950/20 dark:border-yellow-800';\n      default: return '';\n    }\n  };\n\n  const toggleExpansion = () => {\n    if (hasChildren) {\n      setIsExpanded(!isExpanded);\n    }\n  };\n\n  return (\n    <div className=\"space-y-1\">\n      <div \n        className={cn(\n          \"tree-node p-4 cursor-pointer transition-all\",\n          getBackgroundClass(status),\n          isExpanded && hasChildren && \"expanded\"\n        )}\n        onClick={toggleExpansion}\n        data-testid={`tree-node-${id}`}\n      >\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center gap-3\">\n            {hasChildren && (\n              <>\n                {isExpanded ? (\n                  <ChevronDown className=\"w-4 h-4 text-muted-foreground transition-transform\" />\n                ) : (\n                  <ChevronRight className=\"w-4 h-4 text-muted-foreground transition-transform\" />\n                )}\n              </>\n            )}\n            <Icon className={cn(\"w-5 h-5\", statusColorMap[status])} />\n            <span className={cn(\"font-medium\", status === 'critical' && \"font-bold\")}>\n              {name}\n            </span>\n          </div>\n          \n          <div className=\"flex gap-4 text-sm items-center\">\n            <span className=\"text-muted-foreground\">\n              Подпитка: \n              <strong \n                className={cn(\n                  \"font-mono ml-1\",\n                  status === 'critical' && \"text-red-600 font-bold\",\n                  status === 'warning' && \"text-yellow-600 font-semibold\"\n                )}\n              >\n                {makeupWater.toFixed(1)} т/ч\n              </strong>\n            </span>\n            \n            {weeklyChange !== undefined && (\n              <span \n                className={cn(\n                  \"font-semibold\",\n                  weeklyChange < 0 ? \"text-green-600\" : \"text-red-600\"\n                )}\n              >\n                Δ неделя: <strong>{weeklyChange > 0 ? '+' : ''}{weeklyChange.toFixed(1)} т/ч</strong>\n              </span>\n            )}\n            \n            <StatusBadge status={status}>\n              {getStatusLabel(status)}\n            </StatusBadge>\n\n            {actionType && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Handle action click\n                }}\n                data-testid={`action-${id}`}\n              >\n                {actionType === 'Инспекция утечек' && <Search className=\"w-3 h-3 mr-1\" />}\n                {actionType === 'Мониторинг' && <Eye className=\"w-3 h-3 mr-1\" />}\n                {actionType === 'Проверка приборов' && <Settings className=\"w-3 h-3 mr-1\" />}\n                {actionType}\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {hasChildren && isExpanded && (\n        <div className=\"tree-children ml-6 border-l-2 border-border pl-4\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4715},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/status-badge.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface StatusBadgeProps {\n  status: 'normal' | 'warning' | 'critical' | 'info';\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function StatusBadge({ status, children, className }: StatusBadgeProps) {\n  const variants = {\n    normal: \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\",\n    warning: \"bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-400\", \n    critical: \"bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400\",\n    info: \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\",\n  };\n\n  return (\n    <span\n      className={cn(\n        \"inline-block px-3 py-1 rounded-full text-xs font-semibold\",\n        variants[status],\n        className\n      )}\n    >\n      {children}\n    </span>\n  );\n}\n","size_bytes":816},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db-storage.ts":{"content":"import { db } from './db';\nimport { \n  type RTS, type InsertRTS, type District, type InsertDistrict, \n  type CTP, type InsertCTP, type Measurement, type InsertMeasurement,\n  type StatisticalParams, type InsertStatisticalParams,\n  type Recommendation, type InsertRecommendation, \n  type UploadedFile, type InsertUploadedFile,\n  type CTPWithDetails, type RTSWithStats, type TrendData, type ControlChartData\n} from '@shared/schema';\nimport { type IStorage } from './storage';\n\nexport class DbStorage implements IStorage {\n  // RTS methods\n  async getRTSList(): Promise<RTS[]> {\n    return await db.rTS.findMany();\n  }\n\n  async getRTSById(id: string): Promise<RTS | undefined> {\n    const result = await db.rTS.findUnique({\n      where: { id }\n    });\n    return result || undefined;\n  }\n\n  async createRTS(data: InsertRTS): Promise<RTS> {\n    return await db.rTS.create({\n      data\n    });\n  }\n\n  async getRTSWithStats(): Promise<RTSWithStats[]> {\n    const rtsList = await this.getRTSList();\n    const stats: RTSWithStats[] = [];\n\n    for (const rts of rtsList) {\n      const ctpList = await db.cTP.findMany({\n        where: { rtsId: rts.id },\n        include: {\n          measurements: {\n            orderBy: { date: 'desc' },\n            take: 1\n          }\n        }\n      });\n      \n      let totalMakeupWater = 0;\n      let criticalCount = 0;\n      let warningCount = 0;\n      let normalCount = 0;\n\n      for (const ctp of ctpList) {\n        const latestMeasurement = ctp.measurements[0];\n\n        if (latestMeasurement) {\n          totalMakeupWater += latestMeasurement.makeupWater;\n          \n          if (ctp.ucl != null && ctp.cl != null) {\n            if (latestMeasurement.makeupWater > ctp.ucl) {\n              criticalCount++;\n            } else if (latestMeasurement.makeupWater > ctp.cl) {\n              warningCount++;\n            } else {\n              normalCount++;\n            }\n          } else {\n            normalCount++;\n          }\n        }\n      }\n\n      stats.push({\n        ...rts,\n        totalMakeupWater,\n        ctpCount: ctpList.length,\n        criticalCount,\n        warningCount,\n        normalCount,\n      });\n    }\n\n    return stats;\n  }\n\n  // District methods\n  async getDistrictsByRTS(rtsId: string): Promise<District[]> {\n    return await db.districts.findMany({\n      where: { rtsId }\n    });\n  }\n\n  async createDistrict(data: InsertDistrict): Promise<District> {\n    return await db.districts.create({\n      data\n    });\n  }\n\n  // CTP methods\n  async getCTPList(filters?: { rtsId?: string; districtId?: string; status?: string }): Promise<CTPWithDetails[]> {\n    const where: any = {};\n    \n    if (filters?.rtsId) {\n      where.rtsId = filters.rtsId;\n    }\n    if (filters?.districtId) {\n      where.districtId = filters.districtId;\n    }\n\n    const ctpList = await db.cTP.findMany({\n      where,\n      include: {\n        rts: true,\n        district: true,\n        measurements: {\n          orderBy: { date: 'desc' },\n          take: 1\n        },\n        statisticalParams: {\n          orderBy: { calculatedAt: 'desc' },\n          take: 1\n        },\n        recommendations: true\n      }\n    });\n\n    return ctpList.map((ctp: any) => ({\n      ...ctp,\n      rts: ctp.rts!,\n      district: ctp.district!,\n      latestMeasurement: ctp.measurements[0],\n      statisticalParams: ctp.statisticalParams[0],\n      recommendations: ctp.recommendations\n    }));\n  }\n\n  async getCTPById(id: string): Promise<CTPWithDetails | undefined> {\n    const ctp = await db.cTP.findUnique({\n      where: { id },\n      include: {\n        rts: true,\n        district: true,\n        measurements: {\n          orderBy: { date: 'desc' },\n          take: 1\n        },\n        statisticalParams: {\n          orderBy: { calculatedAt: 'desc' },\n          take: 1\n        },\n        recommendations: true\n      }\n    });\n\n    if (!ctp || !ctp.rts || !ctp.district) return undefined;\n\n    return {\n      ...ctp,\n      rts: ctp.rts,\n      district: ctp.district,\n      latestMeasurement: ctp.measurements[0],\n      statisticalParams: ctp.statisticalParams[0],\n      recommendations: ctp.recommendations\n    };\n  }\n\n  async createCTP(data: InsertCTP): Promise<CTP> {\n    return await db.cTP.create({\n      data\n    });\n  }\n\n  async updateCTPBoundaries(ctpId: string, boundaries: { ucl: number; cl: number; lcl: number }): Promise<void> {\n    await db.cTP.update({\n      where: { id: ctpId },\n      data: boundaries\n    });\n  }\n\n  // Measurements methods\n  async getMeasurements(ctpId: string, startDate?: Date, endDate?: Date): Promise<Measurement[]> {\n    const where: any = { ctpId };\n    \n    if (startDate || endDate) {\n      where.date = {};\n      if (startDate) where.date.gte = startDate;\n      if (endDate) where.date.lte = endDate;\n    }\n\n    return await db.measurements.findMany({\n      where,\n      orderBy: { date: 'asc' }\n    });\n  }\n\n  async createMeasurement(data: InsertMeasurement): Promise<Measurement> {\n    return await db.measurements.create({\n      data\n    });\n  }\n\n  async getLatestMeasurements(): Promise<Map<string, Measurement>> {\n    const latest = new Map<string, Measurement>();\n    \n    const ctpList = await db.cTP.findMany({\n      include: {\n        measurements: {\n          orderBy: { date: 'desc' },\n          take: 1\n        }\n      }\n    });\n    \n    for (const ctp of ctpList) {\n      if (ctp.measurements[0]) {\n        latest.set(ctp.id, ctp.measurements[0]);\n      }\n    }\n\n    return latest;\n  }\n\n  // Statistical methods\n  async getStatisticalParams(ctpId: string): Promise<StatisticalParams | undefined> {\n    const result = await db.statisticalParams.findFirst({\n      where: { ctpId },\n      orderBy: { calculatedAt: 'desc' }\n    });\n    \n    return result || undefined;\n  }\n\n  async updateStatisticalParams(data: InsertStatisticalParams): Promise<StatisticalParams> {\n    return await db.statisticalParams.create({\n      data\n    });\n  }\n\n  async calculateControlBoundaries(ctpId: string): Promise<{ ucl: number; cl: number; lcl: number }> {\n    const measurements = await this.getMeasurements(ctpId);\n    \n    if (measurements.length === 0) {\n      return { ucl: 0, cl: 0, lcl: 0 };\n    }\n\n    const values = measurements.map(m => m.makeupWater);\n    const sum = values.reduce((a, b) => a + b, 0);\n    const mean = sum / values.length;\n\n    const squaredDiffs = values.map(v => Math.pow(v - mean, 2));\n    const variance = squaredDiffs.reduce((a, b) => a + b, 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n\n    const ucl = mean + (3 * stdDev);\n    const lcl = Math.max(0, mean - (3 * stdDev));\n\n    return { ucl, cl: mean, lcl };\n  }\n\n  // Recommendations methods\n  async getRecommendations(filters?: { ctpId?: string; type?: string; priority?: string; status?: string }): Promise<Recommendation[]> {\n    const where: any = {};\n    \n    if (filters?.ctpId) where.ctpId = filters.ctpId;\n    if (filters?.type) where.type = filters.type;\n    if (filters?.priority) where.priority = filters.priority;\n    if (filters?.status) where.status = filters.status;\n\n    return await db.recommendations.findMany({\n      where,\n      orderBy: { createdAt: 'desc' }\n    });\n  }\n\n  async createRecommendation(data: InsertRecommendation): Promise<Recommendation> {\n    return await db.recommendations.create({\n      data\n    });\n  }\n\n  async updateRecommendationStatus(id: string, status: string): Promise<void> {\n    await db.recommendations.update({\n      where: { id },\n      data: { status, updatedAt: new Date() }\n    });\n  }\n\n  // Trends and Analytics\n  async getTrendData(period: 'day' | 'week' | 'month' | 'year', rtsId?: string, rtsFilter?: string, ctpId?: string): Promise<TrendData[]> {\n    const now = new Date();\n    let startDate = new Date();\n    \n    switch (period) {\n      case 'day':\n        startDate.setDate(now.getDate() - 1);\n        break;\n      case 'week':\n        startDate.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(now.getMonth() - 1);\n        break;\n      case 'year':\n        startDate.setFullYear(now.getFullYear() - 1);\n        break;\n    }\n\n    let ctpIds: string[] | undefined;\n    \n    if (ctpId) {\n      ctpIds = [ctpId];\n    } else if (rtsFilter) {\n      const locationMap: Record<string, string> = {\n        'right': 'Правый берег',\n        'left': 'Левый берег'\n      };\n      \n      const location = locationMap[rtsFilter];\n      \n      if (location) {\n        const rtsList = await db.rTS.findMany({\n          where: { location },\n          select: { id: true }\n        });\n        \n        const rtsIds = rtsList.map((r: { id: string }) => r.id);\n        \n        if (rtsIds.length > 0) {\n          const ctps = await db.cTP.findMany({\n            where: { rtsId: { in: rtsIds } },\n            select: { id: true }\n          });\n          ctpIds = ctps.map((c: { id: string }) => c.id);\n        }\n      }\n    } else if (rtsId) {\n      const ctps = await db.cTP.findMany({\n        where: { rtsId },\n        select: { id: true }\n      });\n      ctpIds = ctps.map((c: { id: string }) => c.id);\n    }\n\n    const where: any = {\n      date: { gte: startDate }\n    };\n    \n    if (ctpIds && ctpIds.length > 0) {\n      where.ctpId = { in: ctpIds };\n    }\n\n    const measurements = await db.measurements.findMany({\n      where,\n      orderBy: { date: 'asc' }\n    });\n\n    // Group by date and sum makeup water\n    const grouped = new Map<string, number>();\n    \n    for (const m of measurements) {\n      const dateKey = m.date.toISOString().split('T')[0];\n      const current = grouped.get(dateKey) || 0;\n      grouped.set(dateKey, current + m.makeupWater);\n    }\n\n    return Array.from(grouped.entries()).map(([date, value]) => ({\n      date,\n      value: Math.round(value),\n      rtsId,\n    }));\n  }\n\n  async getControlChartData(ctpId: string, period: number = 30): Promise<ControlChartData[]> {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(endDate.getDate() - period);\n\n    const measurements = await this.getMeasurements(ctpId, startDate, endDate);\n    const ctp = await db.cTP.findUnique({\n      where: { id: ctpId }\n    });\n    \n    if (!ctp) return [];\n\n    return measurements.map(m => {\n      const isAboveUCL = ctp.ucl !== null && m.makeupWater > ctp.ucl;\n      const isBelowLCL = ctp.lcl !== null && m.makeupWater < ctp.lcl;\n      \n      return {\n        date: m.date.toISOString().split('T')[0],\n        value: m.makeupWater,\n        ucl: ctp.ucl || 0,\n        cl: ctp.cl || 0,\n        lcl: ctp.lcl || 0,\n        isOutOfControl: !!(isAboveUCL || isBelowLCL),\n        controlType: isAboveUCL ? 'upper' as const : isBelowLCL ? 'lower' as const : 'normal' as const,\n      };\n    });\n  }\n\n  // File upload\n  async createUploadedFile(data: InsertUploadedFile): Promise<UploadedFile> {\n    return await db.uploadedFiles.create({\n      data\n    });\n  }\n\n  async getUploadHistory(): Promise<UploadedFile[]> {\n    return await db.uploadedFiles.findMany({\n      orderBy: { uploadedAt: 'desc' }\n    });\n  }\n\n  async updateFileStatus(id: string, status: string, recordsProcessed?: number, errors?: any[]): Promise<void> {\n    await db.uploadedFiles.update({\n      where: { id },\n      data: { \n        status, \n        recordsProcessed: recordsProcessed ?? undefined,\n        errors: errors ? JSON.stringify(errors) : undefined \n      }\n    });\n  }\n}\n","size_bytes":11352},"server/db.ts":{"content":"import { PrismaClient } from '@prisma/client';\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient({\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });\n};\n\ndeclare global {\n  var prisma: undefined | ReturnType<typeof prismaClientSingleton>;\n}\n\nexport const db = globalThis.prisma ?? prismaClientSingleton();\n\nif (process.env.NODE_ENV !== 'production') globalThis.prisma = db;\n","size_bytes":434},"server/excel-parser.ts":{"content":"import * as XLSX from 'xlsx';\n\nexport interface ParsedExcelData {\n  sheetName: string;\n  headers: string[];\n  rows: any[][];\n  metadata?: {\n    fileType: string;\n    lastModified?: Date;\n    source?: string;\n    rtsNumber?: string;\n    districtName?: string;\n  };\n}\n\nexport interface CTEMeasurementData {\n  ctpName: string;\n  ctpCode?: string;\n  rtsName?: string;\n  districtName?: string;\n  date: Date;\n  makeupWater: number;\n  undermix?: number;\n  flowG1?: number;\n  temperature?: number;\n  pressure?: number;\n}\n\nexport class ExcelParser {\n  static extractRTSNumber(filename: string): string | undefined {\n    const match = filename.match(/(\\d+)-РТС/i);\n    return match ? match[1] : undefined;\n  }\n\n  static extractDistrictFromFilename(filename: string): string | undefined {\n    // Формат: \"..., 3-РТС, Кировский, ...\"\n    // Ищем паттерн: число-РТС, затем название района после запятой\n    const match = filename.match(/\\d+-РТС,\\s*([^,]+)/i);\n    return match ? match[1].trim() : undefined;\n  }\n\n  static async parseFile(buffer: Buffer, filename: string): Promise<ParsedExcelData[]> {\n    try {\n      const workbook = XLSX.read(buffer, { type: 'buffer', cellDates: true });\n      const parsedSheets: ParsedExcelData[] = [];\n      const rtsNumber = this.extractRTSNumber(filename);\n      const districtName = this.extractDistrictFromFilename(filename);\n\n      console.log(`📄 Извлечено из имени файла: РТС=\"${rtsNumber}\", Район=\"${districtName}\"`);\n\n      for (const sheetName of workbook.SheetNames) {\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: null });\n\n        if (jsonData.length === 0) continue;\n\n        // Find the row with headers (look for row with \"Дата\" or multiple non-empty cells)\n        let headerRowIndex = -1;\n        for (let i = 0; i < Math.min(10, jsonData.length); i++) {\n          const row = jsonData[i] as any[];\n          const rowStr = row.map(cell => String(cell || '').toLowerCase()).join(' ');\n          \n          // Look for typical header keywords\n          if (rowStr.includes('дата') && (rowStr.includes('время') || rowStr.includes('подпит') || rowStr.includes('разность'))) {\n            headerRowIndex = i;\n            break;\n          }\n        }\n\n        if (headerRowIndex === -1) {\n          console.warn(`⚠️ Не найдена строка с заголовками в листе ${sheetName}`);\n          continue;\n        }\n\n        console.log(`✅ Найдена строка заголовков на позиции ${headerRowIndex + 1}`);\n\n        const headers = (jsonData[headerRowIndex] as any[]).map(h => String(h || '').trim());\n        const rows = jsonData.slice(headerRowIndex + 1).filter((row: any) => {\n          return Array.isArray(row) && row.some(cell => cell !== null && cell !== '');\n        }) as any[][];\n\n        console.log(`📋 Заголовки: ${headers.slice(0, 10).join(' | ')}`);\n        console.log(`📊 Найдено ${rows.length} строк данных`);\n\n        parsedSheets.push({\n          sheetName,\n          headers,\n          rows,\n          metadata: {\n            fileType: filename.split('.').pop() || 'unknown',\n            source: filename,\n            rtsNumber: rtsNumber,\n            districtName: districtName,\n          }\n        });\n      }\n\n      return parsedSheets;\n    } catch (error) {\n      throw new Error(`Ошибка парсинга файла: ${error}`);\n    }\n  }\n\n  static parseMeasurements(data: ParsedExcelData): CTEMeasurementData[] {\n    const measurements: CTEMeasurementData[] = [];\n    \n    const headers = data.headers.map(h => h.toLowerCase().trim());\n    \n    // Try to find column indices with various possible names\n    const ctpIndex = headers.findIndex(h => \n      h.includes('цтп') || h.includes('наименование') || h.includes('объект') || \n      h.includes('название') || h.includes('name') || h.includes('точка')\n    );\n    const ctpCodeIndex = headers.findIndex(h => \n      h.includes('код цтп') || h.includes('номер') || h.includes('код')\n    );\n    const rtsIndex = headers.findIndex(h => \n      h.includes('ртс') || h.includes('тэц') || h.includes('источник')\n    );\n    const districtIndex = headers.findIndex(h => \n      h.includes('район') || h.includes('микрорайон')\n    );\n    const dateIndex = headers.findIndex(h => \n      h.includes('дата') || h.includes('date')\n    );\n    const timeIndex = headers.findIndex(h => \n      h.includes('время') || h.includes('time')\n    );\n    \n    // Подпитка или разность масс\n    const makeupIndex = headers.findIndex(h => \n      h.includes('подпит') || h.includes('makeup') || h.includes('подачи')\n    );\n    const massDiffIndex = headers.findIndex(h => \n      h.includes('разность масс') || h.includes('масс')\n    );\n    \n    const undermixIndex = headers.findIndex(h => \n      h.includes('подмес') || h.includes('недомес')\n    );\n    const flowIndex = headers.findIndex(h => \n      h.includes('расход') || h.includes('g1') || h.includes('g-1')\n    );\n    const tempIndex = headers.findIndex(h => \n      h.includes('темпер') || h.includes('t1') || h.includes('t-1')\n    );\n    const pressureIndex = headers.findIndex(h => \n      h.includes('давлен') || h.includes('p1') || h.includes('p-1')\n    );\n\n    console.log(`🔍 Индексы колонок:`);\n    console.log(`   ЦТП: ${ctpIndex}, Дата: ${dateIndex}, Время: ${timeIndex}`);\n    console.log(`   Подпитка: ${makeupIndex}, Разность масс: ${massDiffIndex}`);\n\n    if (dateIndex === -1) {\n      throw new Error('Не найдена колонка с датой');\n    }\n    if (makeupIndex === -1 && massDiffIndex === -1) {\n      throw new Error('Не найдена колонка с данными подпитки или разности масс');\n    }\n\n    // Извлекаем имя ЦТП из метаданных (из названия файла)\n    const fileCtpName = data.metadata?.source ? this.extractCTPFromFilename(data.metadata.source) : undefined;\n    const fileRtsNumber = data.metadata?.rtsNumber;\n    const fileDistrictName = data.metadata?.districtName;\n\n    console.log(`📄 Из имени файла: ЦТП=\"${fileCtpName}\", РТС=\"${fileRtsNumber}\", Район=\"${fileDistrictName}\"`);\n\n    let processedCount = 0;\n    let skippedCount = 0;\n\n    data.rows.forEach((row, index) => {\n      try {\n        const ctpName = ctpIndex !== -1 ? String(row[ctpIndex] || '').trim() : '';\n        const ctpCode = ctpCodeIndex !== -1 ? String(row[ctpCodeIndex] || '').trim() : '';\n        const dateValue = row[dateIndex];\n        const timeValue = timeIndex !== -1 ? row[timeIndex] : null;\n\n        // Если в строке нет даты, пропускаем\n        if (!dateValue) {\n          skippedCount++;\n          return;\n        }\n\n        // Определяем значение подпитки\n        let makeupValue = null;\n        if (makeupIndex !== -1) {\n          const val = row[makeupIndex];\n          // Если в столбце подпитки стоит \"-\", берем из разности масс\n          if (val === '-' || val === '—' || val === null || val === '') {\n            if (massDiffIndex !== -1) {\n              makeupValue = row[massDiffIndex];\n              console.log(`  Строка ${index + 2}: Подпитка=\"-\", взято из \"Разность масс\": ${makeupValue}`);\n            }\n          } else {\n            makeupValue = val;\n          }\n        } else if (massDiffIndex !== -1) {\n          makeupValue = row[massDiffIndex];\n        }\n\n        if (makeupValue === null || makeupValue === '' || makeupValue === '-' || makeupValue === '—') {\n          skippedCount++;\n          return;\n        }\n\n        let parsedDate: Date;\n        if (dateValue instanceof Date) {\n          parsedDate = dateValue;\n        } else {\n          parsedDate = new Date(dateValue);\n          if (isNaN(parsedDate.getTime())) {\n            console.warn(`⚠️ Строка ${index + 2}: некорректная дата \"${dateValue}\"`);\n            skippedCount++;\n            return;\n          }\n        }\n\n        // Если есть время, добавляем его к дате\n        if (timeValue) {\n          if (timeValue instanceof Date) {\n            parsedDate.setHours(timeValue.getHours(), timeValue.getMinutes(), timeValue.getSeconds());\n          } else if (typeof timeValue === 'number') {\n            // Excel time format (fraction of day)\n            const hours = Math.floor(timeValue * 24);\n            const minutes = Math.floor((timeValue * 24 * 60) % 60);\n            parsedDate.setHours(hours, minutes, 0);\n          }\n        }\n\n        const makeupWater = parseFloat(String(makeupValue).replace(',', '.'));\n        if (isNaN(makeupWater)) {\n          console.warn(`⚠️ Строка ${index + 2}: некорректное значение подпитки \"${makeupValue}\"`);\n          skippedCount++;\n          return;\n        }\n\n        // Используем имя ЦТП из файла, если не найдено в таблице\n        const finalCtpName = ctpName || fileCtpName || `ЦТП-${ctpCode || 'Unknown'}`;\n        const finalRtsName = fileRtsNumber ? `РТС-${fileRtsNumber}` : (rtsIndex !== -1 ? String(row[rtsIndex] || '').trim() : undefined);\n        const finalDistrictName = fileDistrictName || (districtIndex !== -1 ? String(row[districtIndex] || '').trim() : undefined);\n\n        const measurement: CTEMeasurementData = {\n          ctpName: finalCtpName,\n          ctpCode: ctpCode || undefined,\n          rtsName: finalRtsName,\n          districtName: finalDistrictName,\n          date: parsedDate,\n          makeupWater: Math.abs(makeupWater),\n          undermix: undermixIndex !== -1 ? parseFloat(String(row[undermixIndex] || '0').replace(',', '.')) : undefined,\n          flowG1: flowIndex !== -1 ? parseFloat(String(row[flowIndex] || '').replace(',', '.')) : undefined,\n          temperature: tempIndex !== -1 ? parseFloat(String(row[tempIndex] || '').replace(',', '.')) : undefined,\n          pressure: pressureIndex !== -1 ? parseFloat(String(row[pressureIndex] || '').replace(',', '.')) : undefined,\n        };\n\n        measurements.push(measurement);\n        processedCount++;\n      } catch (error) {\n        console.warn(`⚠️ Ошибка обработки строки ${index + 2}:`, error);\n        skippedCount++;\n      }\n    });\n\n    console.log(`✅ Обработано ${processedCount} измерений, пропущено ${skippedCount} строк`);\n\n    return measurements;\n  }\n\n  static extractCTPFromFilename(filename: string): string | undefined {\n    // Ищем паттерн типа \"ЦТП К04\" или \"ЦТП-104\"\n    const match = filename.match(/ЦТП[\\s-]?([КкAa]?\\d+)/i);\n    return match ? `ЦТП ${match[1]}` : undefined;\n  }\n\n  static detectFileType(filename: string): 'measurements' | 'summary' | 'model' | 'unknown' {\n    const name = filename.toLowerCase();\n    \n    if (name.includes('одпу') || name.includes('показания') || name.includes('архив')) {\n      return 'measurements';\n    } else if (name.includes('свод') || name.includes('ведомость')) {\n      return 'summary';\n    } else if (name.includes('модель') || name.includes('model')) {\n      return 'model';\n    }\n    \n    return 'unknown';\n  }\n\n  static validateMeasurementData(data: CTEMeasurementData[]): {\n    valid: CTEMeasurementData[];\n    errors: string[];\n  } {\n    const valid: CTEMeasurementData[] = [];\n    const errors: string[] = [];\n    \n    data.forEach((measurement, index) => {\n      if (!measurement.ctpName && !measurement.ctpCode) {\n        errors.push(`Строка ${index + 1}: отсутствует название или код ЦТП`);\n        return;\n      }\n      \n      if (isNaN(measurement.makeupWater) || measurement.makeupWater < 0) {\n        errors.push(`Строка ${index + 1}: некорректное значение подпитки`);\n        return;\n      }\n      \n      if (measurement.makeupWater > 1000) {\n        errors.push(`Строка ${index + 1}: подозрительно высокое значение подпитки (${measurement.makeupWater} т/ч)`);\n      }\n      \n      valid.push(measurement);\n    });\n    \n    return { valid, errors };\n  }\n}\n","size_bytes":12684},"server/seed.ts":{"content":"import { DbStorage } from './db-storage';\n\nasync function seed() {\n  const storage = new DbStorage();\n\n  console.log('Seeding database...');\n\n  // Create RTS (Regional Thermal Stations)\n  const rts1 = await storage.createRTS({\n    name: \"ТЭЦ-5\",\n    code: \"РТС-1\",\n    location: \"Правый берег\",\n  });\n\n  const rts2 = await storage.createRTS({\n    name: \"ТЭЦ-3\",\n    code: \"РТС-2\",\n    location: \"Левый берег\",\n  });\n\n  const rts3 = await storage.createRTS({\n    name: \"ТЭЦ-2\",\n    code: \"РТС-3\",\n    location: \"Правый берег\",\n  });\n\n  const rts4 = await storage.createRTS({\n    name: \"ТЭЦ-4\",\n    code: \"РТС-4\",\n    location: \"Левый берег\",\n  });\n\n  const rts5 = await storage.createRTS({\n    name: \"КРК\",\n    code: \"РТС-5\",\n    location: \"Правый берег\",\n  });\n\n  console.log('Created 5 RTS');\n\n  // Create Districts\n  const district1 = await storage.createDistrict({\n    name: \"Ленинский микрорайон\",\n    rtsId: rts1.id,\n  });\n\n  const district2 = await storage.createDistrict({\n    name: \"Советский микрорайон\",\n    rtsId: rts2.id,\n  });\n\n  const district3 = await storage.createDistrict({\n    name: \"Кировский микрорайон\",\n    rtsId: rts4.id,\n  });\n\n  console.log('Created 3 districts');\n\n  // Create CTPs with control boundaries\n  const ctp125 = await storage.createCTP({\n    name: \"ЦТП-125\",\n    code: \"125\",\n    rtsId: rts1.id,\n    districtId: district1.id,\n    ucl: 36.1,\n    cl: 32.5,\n    lcl: 28.2,\n    hasMeter: true,\n    meterStatus: \"working\",\n  });\n\n  const ctp156 = await storage.createCTP({\n    name: \"ЦТП-156\",\n    code: \"156\",\n    rtsId: rts4.id,\n    districtId: district3.id,\n    ucl: 42.5,\n    cl: 38.2,\n    lcl: 33.5,\n    hasMeter: true,\n    meterStatus: \"working\",\n  });\n\n  const ctp234 = await storage.createCTP({\n    name: \"ЦТП-234\",\n    code: \"234\",\n    rtsId: rts2.id,\n    districtId: district2.id,\n    ucl: 24.8,\n    cl: 21.2,\n    lcl: 17.9,\n    hasMeter: true,\n    meterStatus: \"working\",\n  });\n\n  console.log('Created 3 CTPs');\n\n  // Create some historical measurements\n  const baseDate = new Date('2025-09-25');\n  const ctps = [ctp125, ctp156, ctp234];\n  \n  for (let dayOffset = 0; dayOffset < 30; dayOffset++) {\n    const measurementDate = new Date(baseDate);\n    measurementDate.setDate(baseDate.getDate() + dayOffset);\n    \n    for (const ctp of ctps) {\n      const baseMakeup = ctp.cl || 30;\n      const variation = (Math.random() - 0.5) * 10;\n      \n      await storage.createMeasurement({\n        ctpId: ctp.id,\n        date: measurementDate,\n        makeupWater: baseMakeup + variation,\n        undermix: (Math.random() - 0.5) * 4,\n        flowG1: 45 + (Math.random() - 0.5) * 10,\n        temperature: 70 + (Math.random() - 0.5) * 10,\n        pressure: 6 + (Math.random() - 0.5) * 2,\n      });\n    }\n  }\n\n  console.log('Created 90 measurements (30 days × 3 CTPs)');\n\n  // Calculate and save statistical parameters\n  for (const ctp of ctps) {\n    const boundaries = await storage.calculateControlBoundaries(ctp.id);\n    \n    await storage.updateStatisticalParams({\n      ctpId: ctp.id,\n      mean: boundaries.cl,\n      stdDev: (boundaries.ucl - boundaries.cl) / 3,\n      ucl: boundaries.ucl,\n      cl: boundaries.cl,\n      lcl: boundaries.lcl,\n      sampleSize: 30,\n    });\n    \n    // Update CTP with calculated boundaries\n    await storage.updateCTPBoundaries(ctp.id, boundaries);\n  }\n\n  console.log('Calculated statistical parameters for all CTPs');\n\n  // Create some recommendations\n  await storage.createRecommendation({\n    ctpId: ctp125.id,\n    type: 'leak_inspection',\n    priority: 'critical',\n    title: 'ЦТП-125 (РТС-1, Ленинский)',\n    description: 'Устойчивое превышение подпитки за пределами верхней контрольной границы',\n    actions: JSON.stringify([\n      'Провести инспекцию на предмет утечек теплоносителя',\n      'Проверить работоспособность приборов учета',\n      'Проверить параметры работы подпиточных насосов',\n      'При выявлении утечек - организовать устранение'\n    ]),\n    status: 'new',\n  });\n\n  await storage.createRecommendation({\n    ctpId: ctp156.id,\n    type: 'meter_check',\n    priority: 'warning',\n    title: 'ЦТП-156 (РТС-4, Кировский)',\n    description: 'Превышение подпитки сопоставимое с расходом G1',\n    actions: JSON.stringify([\n      'ПРИОРИТЕТ: Проверить приборы учета расхода теплоносителя',\n      'Провести поверку счетчиков',\n      'Проверить корректность передачи данных в АСКУЭ',\n      'При необходимости - восстановить работоспособность приборов учета'\n    ]),\n    status: 'new',\n  });\n\n  console.log('Created 2 recommendations');\n\n  // Create upload history entry\n  await storage.createUploadedFile({\n    filename: 'seed_data.xlsx',\n    originalName: 'Показания ОДПУ 25.09.2025 - 25.10.2025.xlsx',\n    fileType: 'xlsx',\n    size: Math.round(1024 * 1024 * 2.8),\n    status: 'completed',\n    recordsProcessed: 90,\n  });\n\n  console.log('Created upload history entry');\n  console.log('Database seeded successfully!');\n  process.exit(0);\n}\n\nseed().catch((error) => {\n  console.error('Error seeding database:', error);\n  process.exit(1);\n});\n","size_bytes":5658},"server/trends-calculator.ts":{"content":"import { type IStorage } from './storage';\n\nexport interface TrendChange {\n  ctpId: string;\n  ctpName: string;\n  change: number;\n  changePercent: number;\n}\n\nexport interface RTSTrendChange {\n  rtsId: string;\n  rtsName: string;\n  change: number;\n  changePercent: number;\n}\n\nexport class TrendsCalculator {\n  constructor(private storage: IStorage) {}\n\n  async calculateCTPWeeklyChange(ctpId: string): Promise<number> {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(endDate.getDate() - 7);\n    \n    const previousStart = new Date(startDate);\n    previousStart.setDate(previousStart.getDate() - 7);\n\n    const currentWeek = await this.storage.getMeasurements(ctpId, startDate, endDate);\n    const previousWeek = await this.storage.getMeasurements(ctpId, previousStart, startDate);\n\n    if (currentWeek.length === 0 || previousWeek.length === 0) {\n      return 0;\n    }\n\n    const currentAvg = currentWeek.reduce((sum, m) => sum + m.makeupWater, 0) / currentWeek.length;\n    const previousAvg = previousWeek.reduce((sum, m) => sum + m.makeupWater, 0) / previousWeek.length;\n\n    return currentAvg - previousAvg;\n  }\n\n  async calculateRTSWeeklyChange(rtsId: string): Promise<number> {\n    const ctpList = await this.storage.getCTPList({ rtsId });\n    let totalChange = 0;\n\n    for (const ctp of ctpList) {\n      const change = await this.calculateCTPWeeklyChange(ctp.id);\n      totalChange += change;\n    }\n\n    return totalChange;\n  }\n\n  async calculateOverallChange(period: 'week' | 'month' | 'year'): Promise<number> {\n    const ctpList = await this.storage.getCTPList();\n    let currentTotal = 0;\n    let previousTotal = 0;\n    let currentCount = 0;\n    let previousCount = 0;\n\n    const endDate = new Date();\n    const startDate = new Date();\n    \n    switch (period) {\n      case 'week':\n        startDate.setDate(endDate.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(endDate.getMonth() - 1);\n        break;\n      case 'year':\n        startDate.setFullYear(endDate.getFullYear() - 1);\n        break;\n    }\n\n    const previousStart = new Date(startDate);\n    switch (period) {\n      case 'week':\n        previousStart.setDate(previousStart.getDate() - 7);\n        break;\n      case 'month':\n        previousStart.setMonth(previousStart.getMonth() - 1);\n        break;\n      case 'year':\n        previousStart.setFullYear(previousStart.getFullYear() - 1);\n        break;\n    }\n\n    for (const ctp of ctpList) {\n      const currentPeriod = await this.storage.getMeasurements(ctp.id, startDate, endDate);\n      const previousPeriod = await this.storage.getMeasurements(ctp.id, previousStart, startDate);\n\n      if (currentPeriod.length > 0) {\n        currentTotal += currentPeriod.reduce((sum, m) => sum + m.makeupWater, 0);\n        currentCount += currentPeriod.length;\n      }\n\n      if (previousPeriod.length > 0) {\n        previousTotal += previousPeriod.reduce((sum, m) => sum + m.makeupWater, 0);\n        previousCount += previousPeriod.length;\n      }\n    }\n\n    if (currentCount === 0 || previousCount === 0) {\n      return 0;\n    }\n\n    const currentAvg = currentTotal / currentCount;\n    const previousAvg = previousTotal / previousCount;\n\n    return currentAvg - previousAvg;\n  }\n\n  async getTopChanges(period: 'week' | 'month' | 'year', limit: number = 3): Promise<{\n    increases: TrendChange[];\n    decreases: TrendChange[];\n  }> {\n    const ctpList = await this.storage.getCTPList();\n    const changes: TrendChange[] = [];\n\n    const endDate = new Date();\n    const startDate = new Date();\n    \n    switch (period) {\n      case 'week':\n        startDate.setDate(endDate.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(endDate.getMonth() - 1);\n        break;\n      case 'year':\n        startDate.setFullYear(endDate.getFullYear() - 1);\n        break;\n    }\n\n    const previousStart = new Date(startDate);\n    switch (period) {\n      case 'week':\n        previousStart.setDate(previousStart.getDate() - 7);\n        break;\n      case 'month':\n        previousStart.setMonth(previousStart.getMonth() - 1);\n        break;\n      case 'year':\n        previousStart.setFullYear(previousStart.getFullYear() - 1);\n        break;\n    }\n\n    for (const ctp of ctpList) {\n      const currentPeriod = await this.storage.getMeasurements(ctp.id, startDate, endDate);\n      const previousPeriod = await this.storage.getMeasurements(ctp.id, previousStart, startDate);\n\n      if (currentPeriod.length > 0 && previousPeriod.length > 0) {\n        const currentAvg = currentPeriod.reduce((sum, m) => sum + m.makeupWater, 0) / currentPeriod.length;\n        const previousAvg = previousPeriod.reduce((sum, m) => sum + m.makeupWater, 0) / previousPeriod.length;\n        const change = currentAvg - previousAvg;\n        const changePercent = previousAvg > 0 ? (change / previousAvg) * 100 : 0;\n\n        changes.push({\n          ctpId: ctp.id,\n          ctpName: ctp.name,\n          change,\n          changePercent,\n        });\n      }\n    }\n\n    changes.sort((a, b) => Math.abs(b.change) - Math.abs(a.change));\n\n    const increases = changes.filter(c => c.change > 0).slice(0, limit);\n    const decreases = changes.filter(c => c.change < 0).slice(0, limit);\n\n    return { increases, decreases };\n  }\n\n  async getRTSStats(period: 'week' | 'month' | 'year'): Promise<RTSTrendChange[]> {\n    const rtsList = await this.storage.getRTSList();\n    const stats: RTSTrendChange[] = [];\n\n    const endDate = new Date();\n    const startDate = new Date();\n    \n    switch (period) {\n      case 'week':\n        startDate.setDate(endDate.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(endDate.getMonth() - 1);\n        break;\n      case 'year':\n        startDate.setFullYear(endDate.getFullYear() - 1);\n        break;\n    }\n\n    const previousStart = new Date(startDate);\n    switch (period) {\n      case 'week':\n        previousStart.setDate(previousStart.getDate() - 7);\n        break;\n      case 'month':\n        previousStart.setMonth(previousStart.getMonth() - 1);\n        break;\n      case 'year':\n        previousStart.setFullYear(previousStart.getFullYear() - 1);\n        break;\n    }\n\n    for (const rts of rtsList) {\n      const ctpList = await this.storage.getCTPList({ rtsId: rts.id });\n      let currentTotal = 0;\n      let previousTotal = 0;\n      let currentCount = 0;\n      let previousCount = 0;\n\n      for (const ctp of ctpList) {\n        const currentPeriod = await this.storage.getMeasurements(ctp.id, startDate, endDate);\n        const previousPeriod = await this.storage.getMeasurements(ctp.id, previousStart, startDate);\n\n        if (currentPeriod.length > 0) {\n          currentTotal += currentPeriod.reduce((sum, m) => sum + m.makeupWater, 0);\n          currentCount += currentPeriod.length;\n        }\n\n        if (previousPeriod.length > 0) {\n          previousTotal += previousPeriod.reduce((sum, m) => sum + m.makeupWater, 0);\n          previousCount += previousPeriod.length;\n        }\n      }\n\n      if (currentCount > 0 && previousCount > 0) {\n        const currentAvg = currentTotal / currentCount;\n        const previousAvg = previousTotal / previousCount;\n        const change = currentAvg - previousAvg;\n        const changePercent = previousAvg > 0 ? (change / previousAvg) * 100 : 0;\n\n        stats.push({\n          rtsId: rts.id,\n          rtsName: `${rts.code} (${rts.name})`,\n          change,\n          changePercent,\n        });\n      }\n    }\n\n    stats.sort((a, b) => Math.abs(b.change) - Math.abs(a.change));\n\n    return stats;\n  }\n}\n","size_bytes":7584},"server/model-parser.ts":{"content":"import * as XLSX from 'xlsx';\nimport { db } from './db.js';\nimport type { InsertCTP, InsertVyvod, InsertRTS, InsertDistrict, InsertMeasurement } from '@shared/schema';\n\ninterface ParsedCTP {\n  name: string;\n  code: string;\n  fullName: string | null;\n  city: string | null;\n  address: string | null;\n  yearBuilt: number | null;\n  vyvodName: string | null;\n  districtName: string | null;\n  rtsCode: string | null;\n  status: string | null;\n  commentPTU: string | null;\n  commentRTS: string | null;\n  commentSKIPiA: string | null;\n  av365G1: number | null;\n  av365G2: number | null;\n  min730: number | null;\n  min365: number | null;\n  min30: number | null;\n  min7: number | null;\n  percentFromG1: number | null;\n  normativMinenergo: number | null;\n  ucl: number | null;\n  lcl: number | null;\n  measurements: Array<{ date: Date; value: number }>;\n}\n\nexport class ModelParser {\n  private workbook: XLSX.WorkBook;\n  \n  constructor(buffer: Buffer) {\n    this.workbook = XLSX.read(buffer, { type: 'buffer' });\n  }\n\n  /**\n   * Парсит лист \"data ЦТП\" и извлекает все данные\n   */\n  async parseAndImport(): Promise<{ \n    ctpCount: number; \n    measurementCount: number; \n    vyvodCount: number;\n    errors: string[];\n  }> {\n    const errors: string[] = [];\n    \n    try {\n      console.log('📊 Начало парсинга Model_2.5.20.xlsm...');\n      \n      // Проверяем наличие листа \"data ЦТП\"\n      if (!this.workbook.SheetNames.includes('data ЦТП')) {\n        throw new Error('Лист \"data ЦТП\" не найден в файле');\n      }\n\n      const dataSheet = this.workbook.Sheets['data ЦТП'];\n      const dataArray = XLSX.utils.sheet_to_json(dataSheet, { header: 1, defval: null }) as any[][];\n\n      console.log(`Найдено ${dataArray.length} строк в листе \"data ЦТП\"`);\n\n      // Находим строку с заголовками (строка 3, индекс 2)\n      const headerRow = dataArray[2];\n      if (!headerRow) {\n        throw new Error('Не найдена строка с заголовками');\n      }\n\n      // Маппинг колонок\n      const columnMap = this.createColumnMap(headerRow);\n      console.log('Найдены колонки:', Object.keys(columnMap).slice(0, 20).join(', '));\n\n      // Извлекаем данные ЦТП (начиная со строки 4, индекс 3)\n      const parsedCTPs: ParsedCTP[] = [];\n      \n      for (let i = 3; i < dataArray.length; i++) {\n        const row = dataArray[i];\n        if (!row || !row[columnMap.цтп]) continue; // Пропускаем пустые строки\n        \n        try {\n          const parsed = this.parseCtpRow(row, columnMap, headerRow);\n          if (parsed) {\n            parsedCTPs.push(parsed);\n          }\n        } catch (err) {\n          const error = `Ошибка в строке ${i + 1}: ${err instanceof Error ? err.message : String(err)}`;\n          errors.push(error);\n          console.warn(error);\n        }\n      }\n\n      console.log(`✅ Распарсено ${parsedCTPs.length} ЦТП`);\n\n      // Импортируем данные в БД\n      const result = await this.importToDatabase(parsedCTPs);\n\n      return {\n        ...result,\n        errors\n      };\n\n    } catch (err) {\n      const error = `Критическая ошибка парсинга: ${err instanceof Error ? err.message : String(err)}`;\n      errors.push(error);\n      console.error(error);\n      throw err;\n    }\n  }\n\n  /**\n   * Создает маппинг колонок по заголовкам\n   */\n  private createColumnMap(headerRow: any[]): Record<string, number> {\n    const map: Record<string, number> = {};\n    \n    headerRow.forEach((header, index) => {\n      if (header !== null && header !== '') {\n        const key = String(header).trim();\n        // Сохраняем как есть и lowercase версию для case-insensitive поиска\n        map[key] = index;\n        map[key.toLowerCase()] = index;\n      }\n    });\n    \n    return map;\n  }\n\n  /**\n   * Парсит одну строку ЦТП\n   */\n  private parseCtpRow(row: any[], columnMap: Record<string, number>, headerRow: any[]): ParsedCTP | null {\n    // Пробуем разные варианты названия колонки (с заглавной и строчной)\n    const ctpCode = this.cleanString(\n      row[columnMap['ЦТП']] || row[columnMap['цтп']] || row[columnMap['Цтп']]\n    );\n    if (!ctpCode) return null;\n\n    // Извлекаем основные данные\n    const fullName = this.cleanString(row[columnMap['Полное наименование']]);\n    const city = this.cleanString(row[columnMap['Город']]);\n    const address = this.cleanString(row[columnMap['Адрес']]);\n    const yearBuilt = this.parseNumber(row[columnMap['Год постройки']]);\n    const vyvodName = this.cleanString(row[columnMap['Вывод']]);\n    \n    // Извлекаем номер РТС из столбца \"Микрорайон отчет\" (формат: \"3-РТС\" или \"РТС-3\")\n    const microraionRaw = this.cleanString(row[columnMap['Микрорайон отчет']]);\n    const rtsCode = this.extractRTSCode(microraionRaw);\n    const districtName = microraionRaw; // Сохраняем полное значение как название района\n    \n    const status = this.cleanString(row[columnMap['Статус']]);\n    const commentPTU = this.cleanString(row[columnMap['Комментарий ПТУ']]);\n    const commentRTS = this.cleanString(row[columnMap['Комментарий РТС']]);\n    const commentSKIPiA = this.cleanString(row[columnMap['Комментарий СКИПиА']]);\n\n    // Расширенная статистика\n    const av365G1 = this.parseNumber(row[columnMap['av 365 G1']]);\n    const av365G2 = this.parseNumber(row[columnMap['av 365 G2']]);\n    const min730 = this.parseNumber(row[columnMap['min 730']]);\n    const min365 = this.parseNumber(row[columnMap['min 365']]);\n    const min30 = this.parseNumber(row[columnMap['min 30']]);\n    const min7 = this.parseNumber(row[columnMap['min 7']]);\n    const percentFromG1 = this.parseNumber(row[columnMap['% от G1']]);\n    const normativMinenergo = this.parseNumber(row[columnMap['Норматив подпитки Минэнерго 0,25% Vсети']]);\n\n    // Контрольные границы\n    const ucl = this.parseNumber(row[columnMap['max.stat.sign.sample']]);\n    const lcl = this.parseNumber(row[columnMap['min.stat.sign.sample']]);\n\n    // Извлекаем исторические измерения\n    const measurements: Array<{ date: Date; value: number }> = [];\n    \n    // Колонки с датами начинаются после основных полей (примерно с колонки 40+)\n    // Заголовки - это номера дат в формате Excel (45200, 45201 и т.д.)\n    for (let colIndex = 0; colIndex < headerRow.length; colIndex++) {\n      const header = headerRow[colIndex];\n      \n      // Проверяем, является ли заголовок числом (датой в формате Excel)\n      if (typeof header === 'number' && header > 40000 && header < 50000) {\n        const value = this.parseNumber(row[colIndex]);\n        \n        if (value !== null && value !== 0) {\n          // Конвертируем Excel дату в JavaScript Date\n          const date = this.excelDateToJSDate(header);\n          measurements.push({ date, value });\n        }\n      }\n    }\n\n    return {\n      name: ctpCode,\n      code: ctpCode,\n      fullName,\n      city,\n      address,\n      yearBuilt,\n      vyvodName,\n      districtName,\n      rtsCode,\n      status,\n      commentPTU,\n      commentRTS,\n      commentSKIPiA,\n      av365G1,\n      av365G2,\n      min730,\n      min365,\n      min30,\n      min7,\n      percentFromG1,\n      normativMinenergo,\n      ucl,\n      lcl,\n      measurements\n    };\n  }\n\n  /**\n   * Импортирует распарсенные данные в БД\n   */\n  private async importToDatabase(parsedCTPs: ParsedCTP[]): Promise<{\n    ctpCount: number;\n    measurementCount: number;\n    vyvodCount: number;\n  }> {\n    console.log('🗄️  Начало импорта в базу данных...');\n\n    // 1. Собираем уникальные РТС\n    const uniqueRTSCodes = new Set<string>();\n    parsedCTPs.forEach(ctp => {\n      if (ctp.rtsCode) uniqueRTSCodes.add(ctp.rtsCode);\n    });\n\n    console.log(`Найдено ${uniqueRTSCodes.size} уникальных РТС`);\n\n    // Создаем или получаем РТС\n    const rtsMap = new Map<string, string>(); // code -> id\n    for (const rtsCode of Array.from(uniqueRTSCodes)) {\n      const existing = await db.rTS.findUnique({ where: { code: rtsCode } });\n      \n      if (existing) {\n        rtsMap.set(rtsCode, existing.id);\n      } else {\n        const created = await db.rTS.create({\n          data: {\n            name: `РТС-${rtsCode}`,  // Правильный формат названия: \"РТС-3\"\n            code: rtsCode,           // Только номер: \"3\"\n            location: 'Новосибирск'\n          }\n        });\n        rtsMap.set(rtsCode, created.id);\n        console.log(`✓ Создан РТС-${rtsCode}`);\n      }\n    }\n\n    // 2. Собираем уникальные районы\n    const uniqueDistricts = new Set<string>();\n    parsedCTPs.forEach(ctp => {\n      if (ctp.districtName) uniqueDistricts.add(ctp.districtName);\n    });\n\n    console.log(`Найдено ${uniqueDistricts.size} уникальных районов`);\n\n    // Создаем или получаем районы\n    const districtMap = new Map<string, string>(); // name -> id\n    for (const districtName of Array.from(uniqueDistricts)) {\n      const existing = await db.districts.findFirst({ where: { name: districtName } });\n      \n      if (existing) {\n        districtMap.set(districtName, existing.id);\n      } else {\n        const created = await db.districts.create({\n          data: {\n            name: districtName,\n            rtsId: null\n          }\n        });\n        districtMap.set(districtName, created.id);\n        console.log(`✓ Создан район: ${districtName}`);\n      }\n    }\n\n    // 3. Собираем уникальные выводы\n    const uniqueVyvods = new Set<string>();\n    parsedCTPs.forEach(ctp => {\n      if (ctp.vyvodName) uniqueVyvods.add(ctp.vyvodName);\n    });\n\n    console.log(`Найдено ${uniqueVyvods.size} уникальных выводов`);\n\n    // Создаем или получаем выводы\n    const vyvodMap = new Map<string, string>(); // name -> id\n    for (const vyvodName of Array.from(uniqueVyvods)) {\n      const vyvodCode = this.generateVyvodCode(vyvodName);\n      const existing = await db.vyvod.findUnique({ where: { code: vyvodCode } });\n      \n      if (existing) {\n        vyvodMap.set(vyvodName, existing.id);\n      } else {\n        const created = await db.vyvod.create({\n          data: {\n            name: vyvodName,\n            code: vyvodCode\n          }\n        });\n        vyvodMap.set(vyvodName, created.id);\n        console.log(`✓ Создан вывод: ${vyvodName}`);\n      }\n    }\n\n    // 4. Импортируем ЦТП батчами\n    let ctpCount = 0;\n    let measurementCount = 0;\n    const batchSize = 50;\n\n    for (let i = 0; i < parsedCTPs.length; i += batchSize) {\n      const batch = parsedCTPs.slice(i, i + batchSize);\n      \n      for (const parsedCTP of batch) {\n        try {\n          // Проверяем, существует ли ЦТП\n          const existing = await db.cTP.findUnique({ where: { code: parsedCTP.code } });\n          \n          const ctpData: any = {\n            name: parsedCTP.name,\n            code: parsedCTP.code,\n            fullName: parsedCTP.fullName,\n            city: parsedCTP.city,\n            address: parsedCTP.address,\n            yearBuilt: parsedCTP.yearBuilt,\n            rtsId: parsedCTP.rtsCode ? rtsMap.get(parsedCTP.rtsCode) : null,\n            districtId: parsedCTP.districtName ? districtMap.get(parsedCTP.districtName) : null,\n            vyvodId: parsedCTP.vyvodName ? vyvodMap.get(parsedCTP.vyvodName) : null,\n            status: parsedCTP.status,\n            commentPTU: parsedCTP.commentPTU,\n            commentRTS: parsedCTP.commentRTS,\n            commentSKIPiA: parsedCTP.commentSKIPiA,\n            av365G1: parsedCTP.av365G1,\n            av365G2: parsedCTP.av365G2,\n            min730: parsedCTP.min730,\n            min365: parsedCTP.min365,\n            min30: parsedCTP.min30,\n            min7: parsedCTP.min7,\n            percentFromG1: parsedCTP.percentFromG1,\n            normativMinenergo: parsedCTP.normativMinenergo,\n            ucl: parsedCTP.ucl,\n            lcl: parsedCTP.lcl,\n          };\n\n          let ctp;\n          if (existing) {\n            // Обновляем существующую ЦТП\n            ctp = await db.cTP.update({\n              where: { id: existing.id },\n              data: ctpData\n            });\n          } else {\n            // Создаем новую ЦТП\n            ctp = await db.cTP.create({\n              data: ctpData\n            });\n          }\n\n          ctpCount++;\n\n          // Импортируем измерения батчами\n          if (parsedCTP.measurements.length > 0) {\n            const measurementBatchSize = 100;\n            \n            for (let j = 0; j < parsedCTP.measurements.length; j += measurementBatchSize) {\n              const measurementBatch = parsedCTP.measurements.slice(j, j + measurementBatchSize);\n              \n              await db.measurements.createMany({\n                data: measurementBatch.map(m => ({\n                  ctpId: ctp.id,\n                  date: m.date,\n                  makeupWater: m.value,\n                  undermix: 0,\n                  flowG1: null,\n                  temperature: null,\n                  pressure: null\n                }))\n              });\n\n              measurementCount += measurementBatch.length;\n            }\n          }\n\n        } catch (err) {\n          console.error(`Ошибка импорта ЦТП ${parsedCTP.code}:`, err);\n        }\n      }\n\n      console.log(`Импортировано ${Math.min(i + batchSize, parsedCTPs.length)}/${parsedCTPs.length} ЦТП...`);\n    }\n\n    console.log(`✅ Импорт завершен: ${ctpCount} ЦТП, ${measurementCount} измерений, ${vyvodMap.size} выводов`);\n\n    return {\n      ctpCount,\n      measurementCount,\n      vyvodCount: vyvodMap.size\n    };\n  }\n\n  /**\n   * Очищает строку от null, undefined, \"-\"\n   */\n  private cleanString(value: any): string | null {\n    if (value === null || value === undefined || value === '' || value === '-') {\n      return null;\n    }\n    return String(value).trim();\n  }\n\n  /**\n   * Парсит число из различных форматов\n   */\n  private parseNumber(value: any): number | null {\n    if (value === null || value === undefined || value === '' || value === '-') {\n      return null;\n    }\n    \n    const num = typeof value === 'number' ? value : parseFloat(String(value));\n    return isNaN(num) ? null : num;\n  }\n\n  /**\n   * Конвертирует Excel дату в JavaScript Date\n   */\n  private excelDateToJSDate(excelDate: number): Date {\n    // Excel даты считаются от 1 января 1900\n    const millisecondsPerDay = 24 * 60 * 60 * 1000;\n    const excelEpoch = new Date(1899, 11, 30); // 30 декабря 1899\n    return new Date(excelEpoch.getTime() + excelDate * millisecondsPerDay);\n  }\n\n  /**\n   * Извлекает номер РТС из строки \"Микрорайон отчет\"\n   * Примеры: \"3-РТС\" -> \"3\", \"РТС-3\" -> \"3\", \"5 РТС\" -> \"5\"\n   */\n  private extractRTSCode(microraionValue: string | null): string | null {\n    if (!microraionValue) return null;\n    \n    // Ищем паттерны: \"число-РТС\", \"РТС-число\", \"число РТС\"\n    const patterns = [\n      /(\\d+)\\s*-?\\s*РТС/i,  // \"3-РТС\" или \"3 РТС\"\n      /РТС\\s*-?\\s*(\\d+)/i   // \"РТС-3\" или \"РТС 3\"\n    ];\n    \n    for (const pattern of patterns) {\n      const match = microraionValue.match(pattern);\n      if (match && match[1]) {\n        return match[1]; // Возвращаем только номер (например, \"3\")\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Генерирует код вывода из названия\n   */\n  private generateVyvodCode(name: string): string {\n    // Убираем спецсимволы и оставляем только буквы, цифры, тире\n    return name\n      .replace(/[^\\w\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .toLowerCase()\n      .substring(0, 100);\n  }\n}\n","size_bytes":16937},"design_guidelines.md":{"content":"# Design Guidelines: Heating Network Monitoring Dashboard\n\n## Design Approach\n**System Selected**: Carbon Design System (IBM) - purpose-built for data-intensive industrial applications\n**Rationale**: Enterprise-grade framework optimized for information density, technical workflows, and operational clarity\n\n## Core Design Principles\n1. **Data Primacy**: Information architecture prioritizes rapid data comprehension\n2. **Industrial Precision**: Technical aesthetic with engineering-grade clarity\n3. **Operational Efficiency**: Minimize cognitive load for time-critical decision-making\n\n---\n\n## Color System\n\n### Functional Data States\n- **Normal Operations**: `142 76% 36%` (green) - stable parameters\n- **Important Data**: `210 100% 45%` (blue) - key metrics requiring attention  \n- **Critical Alerts**: `0 84% 60%` (red) - immediate action required\n- **Warning State**: `38 92% 50%` (amber) - threshold approaching\n\n### Dark Mode Foundation\n- **Background Primary**: `220 13% 9%` \n- **Background Secondary**: `220 13% 13%`\n- **Background Elevated**: `220 13% 18%`\n- **Border/Divider**: `220 13% 25%`\n- **Text Primary**: `210 17% 98%`\n- **Text Secondary**: `210 11% 71%`\n- **Text Muted**: `210 9% 53%`\n\n---\n\n## Typography\n\n**Font Stack**: IBM Plex Sans (technical precision) via Google Fonts CDN\n\n### Hierarchy\n- **Dashboard Titles**: 24px/700 (section headers)\n- **Card Headers**: 18px/600 (data module titles)\n- **Data Labels**: 14px/500 (metric identifiers)\n- **Primary Data**: 32px/700 mono (key numerical values)\n- **Table Content**: 13px/400 (dense information)\n- **Metadata**: 11px/400 (timestamps, units)\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Tailwind units of 1, 2, 4, 6, 8, 12, 16\n- Grid gaps: `gap-4` (component separation)\n- Card padding: `p-6` (internal spacing)\n- Section margins: `mb-8` (vertical rhythm)\n- Dense tables: `p-2` (compact data)\n\n**Grid Structure**:\n- 12-column responsive grid\n- Sidebar: 280px fixed (navigation tree)\n- Main content: fluid with `max-w-screen-2xl`\n- Card layouts: `grid-cols-1 lg:grid-cols-2 xl:grid-cols-3`\n\n---\n\n## Component Library\n\n### Navigation\n**Hierarchical Sidebar Tree**:\n- Three-level structure (РТС → Микрорайоны → ЦТП)\n- Expandable nodes with chevron indicators\n- Active state: blue left border (4px) + background tint\n- Compact mode toggle for screen space\n\n### Data Visualization Cards\n**Statistics Cards** (grid layout):\n- Value display: Large mono numerals with unit labels\n- Status indicator: 8px dot (green/blue/red) top-right\n- Trend arrows: ↑↓ with 24-hour delta percentage\n- Subtle shadow: `shadow-lg` on dark background\n\n**Shewhart Control Charts**:\n- Canvas-based rendering (Chart.js/D3)\n- UCL/LCL lines: dashed white `opacity-40`\n- Data points: 6px circles, color-coded by state\n- Real-time update indicator: pulsing dot\n\n### Data Tables\n**Dense Information Grid**:\n- Zebra striping: alternate `bg-opacity-5` rows\n- Fixed header on scroll: `sticky top-0`\n- Sortable columns: arrow indicators\n- Inline status badges: pill-shaped, 6px height\n- Compact cells: `px-3 py-2`\n- Monospace for numerical columns\n\n### Action Components\n**Toolbar Controls**:\n- Time range selector: segmented button group\n- Filter dropdowns: dark themed select menus\n- Export button: icon + label, secondary style\n- Refresh indicator: animated spinner when active\n\n**Alert Panel** (top-right):\n- Toast-style notifications\n- Critical alerts: red left accent (4px)\n- Auto-dismiss: 8 seconds (non-critical)\n- Action buttons: compact, high contrast\n\n---\n\n## Accessibility & Dark Mode\n\n### Contrast Requirements\n- All data text: minimum 7:1 contrast ratio\n- Interactive elements: 4.5:1 minimum\n- Status indicators: shape + color redundancy\n\n### Form Inputs (Dark Consistent)\n- Input backgrounds: `220 13% 13%`\n- Borders: `220 13% 25%` default, blue on focus\n- Placeholder text: `210 9% 53%`\n- Active state: blue glow `shadow-[0_0_0_3px_rgba(56,139,253,0.25)]`\n\n---\n\n## Special Features\n\n### Real-Time Updates\n- WebSocket status indicator: connection dot (green/red)\n- Data refresh animations: subtle fade-in\n- Change highlighting: brief yellow flash on value update\n\n### Responsive Breakpoints\n- **Mobile** (< 768px): Single column, collapsible sidebar\n- **Tablet** (768-1024px): 2-column grids\n- **Desktop** (> 1024px): Full 3-column layouts\n- **Wide** (> 1920px): 4-column option for statistics\n\n---\n\n## Images\n**No hero images required** - Dashboard interface focused on data density. Use:\n- System diagrams: Network topology visualizations (SVG icons for RTS/CTP nodes)\n- Equipment icons: Minimal line-art style for hierarchy tree\n- Status icons: Heroicons for UI controls (settings, filters, export)","size_bytes":4678}},"version":1}