import { sql } from "drizzle-orm";
import { pgTable, text, varchar, real, integer, timestamp, boolean, jsonb } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// RTS (Regional Thermal Stations)
export const rts = pgTable("rts", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  code: text("code").notNull().unique(),
  location: text("location").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

// Districts/Microdistricts
export const districts = pgTable("districts", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  rtsId: varchar("rts_id").references(() => rts.id),
  createdAt: timestamp("created_at").defaultNow(),
});

// CTP (Central Thermal Points)
export const ctp = pgTable("ctp", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  code: text("code").notNull().unique(),
  rtsId: varchar("rts_id").references(() => rts.id),
  districtId: varchar("district_id").references(() => districts.id),
  // Control boundaries
  ucl: real("ucl"), // Upper Control Limit
  cl: real("cl"),   // Central Line
  lcl: real("lcl"), // Lower Control Limit
  // Meter information
  hasMeter: boolean("has_meter").default(true),
  meterStatus: text("meter_status").default("working"), // working, broken, needs_check
  createdAt: timestamp("created_at").defaultNow(),
});

// Daily measurements
export const measurements = pgTable("measurements", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  ctpId: varchar("ctp_id").references(() => ctp.id).notNull(),
  date: timestamp("date").notNull(),
  makeupWater: real("makeup_water").notNull(), // подпитка т/ч
  undermix: real("undermix").default(0), // подмес т/ч
  flowG1: real("flow_g1"), // расход G1
  temperature: real("temperature"),
  pressure: real("pressure"),
  createdAt: timestamp("created_at").defaultNow(),
});

// Statistical parameters calculated for each CTP
export const statisticalParams = pgTable("statistical_params", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  ctpId: varchar("ctp_id").references(() => ctp.id).notNull(),
  mean: real("mean").notNull(),
  stdDev: real("std_dev").notNull(),
  ucl: real("ucl").notNull(),
  cl: real("cl").notNull(),
  lcl: real("lcl").notNull(),
  sampleSize: integer("sample_size").notNull(),
  calculatedAt: timestamp("calculated_at").defaultNow(),
});

// Recommendations generated by the system
export const recommendations = pgTable("recommendations", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  ctpId: varchar("ctp_id").references(() => ctp.id).notNull(),
  type: text("type").notNull(), // inspection, meter_check, monitoring
  priority: text("priority").notNull(), // critical, warning, normal
  title: text("title").notNull(),
  description: text("description").notNull(),
  actions: jsonb("actions"), // Array of recommended actions
  status: text("status").default("open"), // open, in_progress, completed
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Uploaded files tracking
export const uploadedFiles = pgTable("uploaded_files", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  filename: text("filename").notNull(),
  originalName: text("original_name").notNull(),
  fileType: text("file_type").notNull(), // xlsm, xlsx, xlsb
  size: integer("size").notNull(),
  status: text("status").default("processing"), // processing, completed, error
  recordsProcessed: integer("records_processed").default(0),
  errors: jsonb("errors"),
  uploadedAt: timestamp("uploaded_at").defaultNow(),
});

// Zod schemas
export const insertRtsSchema = createInsertSchema(rts).omit({ id: true, createdAt: true });
export const insertDistrictSchema = createInsertSchema(districts).omit({ id: true, createdAt: true });
export const insertCtpSchema = createInsertSchema(ctp).omit({ id: true, createdAt: true });
export const insertMeasurementSchema = createInsertSchema(measurements).omit({ id: true, createdAt: true });
export const insertStatisticalParamsSchema = createInsertSchema(statisticalParams).omit({ id: true, calculatedAt: true });
export const insertRecommendationSchema = createInsertSchema(recommendations).omit({ id: true, createdAt: true, updatedAt: true });
export const insertUploadedFileSchema = createInsertSchema(uploadedFiles).omit({ id: true, uploadedAt: true });

// Types
export type RTS = typeof rts.$inferSelect;
export type InsertRTS = z.infer<typeof insertRtsSchema>;

export type District = typeof districts.$inferSelect;
export type InsertDistrict = z.infer<typeof insertDistrictSchema>;

export type CTP = typeof ctp.$inferSelect;
export type InsertCTP = z.infer<typeof insertCtpSchema>;

export type Measurement = typeof measurements.$inferSelect;
export type InsertMeasurement = z.infer<typeof insertMeasurementSchema>;

export type StatisticalParams = typeof statisticalParams.$inferSelect;
export type InsertStatisticalParams = z.infer<typeof insertStatisticalParamsSchema>;

export type Recommendation = typeof recommendations.$inferSelect;
export type InsertRecommendation = z.infer<typeof insertRecommendationSchema>;

export type UploadedFile = typeof uploadedFiles.$inferSelect;
export type InsertUploadedFile = z.infer<typeof insertUploadedFileSchema>;

// Extended types for API responses
export type CTPWithDetails = CTP & {
  rts: RTS;
  district: District;
  latestMeasurement?: Measurement;
  statisticalParams?: StatisticalParams;
  recommendations: Recommendation[];
};

export type RTSWithStats = RTS & {
  totalMakeupWater: number;
  ctpCount: number;
  criticalCount: number;
  warningCount: number;
  normalCount: number;
};

export type TrendData = {
  date: string;
  value: number;
  rtsId?: string;
  ctpId?: string;
};

export type ControlChartData = {
  date: string;
  value: number;
  ucl: number;
  cl: number;
  lcl: number;
  isOutOfControl: boolean;
  controlType: 'normal' | 'upper' | 'lower';
};
