generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model RTS {
  id        String   @id @default(uuid())
  name      String   @db.NVarChar(4000)
  code      String   @unique @db.NVarChar(255)
  location  String   @db.NVarChar(4000)
  createdAt DateTime @default(now()) @map("created_at")

  districts Districts[]
  ctps      CTP[]

  @@map("rts")
}

model Districts {
  id        String   @id @default(uuid())
  name      String   @db.NVarChar(4000)
  rtsId     String?  @map("rts_id")
  createdAt DateTime @default(now()) @map("created_at")

  rts  RTS?  @relation(fields: [rtsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ctps CTP[]

  @@map("districts")
}

model Vyvod {
  id        String   @id @default(uuid())
  name      String   @db.NVarChar(4000)
  code      String   @unique @db.NVarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  ctps CTP[]

  @@map("vyvod")
}

model CTP {
  id                String   @id @default(uuid())
  name              String   @db.NVarChar(4000)
  code              String   @unique @db.NVarChar(255)
  fullName          String?  @map("full_name") @db.NVarChar(4000)
  city              String?  @db.NVarChar(4000)
  address           String?  @db.NVarChar(4000)
  yearBuilt         Int?     @map("year_built")
  rtsId             String?  @map("rts_id")
  districtId        String?  @map("district_id")
  vyvodId           String?  @map("vyvod_id")
  ucl               Float?
  cl                Float?
  lcl               Float?
  hasMeter          Boolean  @default(true) @map("has_meter")
  meterStatus       String   @default("working") @map("meter_status")
  status            String?  @db.NVarChar(4000)
  commentPTU        String?  @map("comment_ptu") @db.NVarChar(4000)
  commentRTS        String?  @map("comment_rts") @db.NVarChar(4000)
  commentSKIPiA     String?  @map("comment_skipia") @db.NVarChar(4000)
  av365G1           Float?   @map("av_365_g1")
  av365G2           Float?   @map("av_365_g2")
  min730            Float?   @map("min_730")
  min365            Float?   @map("min_365")
  min30             Float?   @map("min_30")
  min7              Float?   @map("min_7")
  percentFromG1     Float?   @map("percent_from_g1")
  normativMinenergo Float?   @map("normativ_minenergo")
  createdAt         DateTime @default(now()) @map("created_at")

  rts               RTS?                @relation(fields: [rtsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  district          Districts?          @relation(fields: [districtId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vyvod             Vyvod?              @relation(fields: [vyvodId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  measurements      Measurements[]
  statisticalParams StatisticalParams[]
  recommendations   Recommendations[]

  @@map("ctp")
}

model Measurements {
  id          String   @id @default(uuid())
  ctpId       String   @map("ctp_id")
  date        DateTime
  makeupWater Float    @map("makeup_water")
  undermix    Float    @default(0)
  flowG1      Float?   @map("flow_g1")
  temperature Float?
  pressure    Float?
  createdAt   DateTime @default(now()) @map("created_at")

  ctp CTP @relation(fields: [ctpId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("measurements")
}

model StatisticalParams {
  id           String   @id @default(uuid())
  ctpId        String   @map("ctp_id")
  mean         Float
  stdDev       Float    @map("std_dev")
  ucl          Float
  cl           Float
  lcl          Float
  sampleSize   Int      @map("sample_size")
  calculatedAt DateTime @default(now()) @map("calculated_at")

  ctp CTP @relation(fields: [ctpId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("statistical_params")
}

model Recommendations {
  id          String   @id @default(uuid())
  ctpId       String   @map("ctp_id")
  type        String
  priority    String
  title       String   @db.NVarChar(4000)
  description String   @db.NVarChar(4000)
  actions     String?  @db.NVarChar(4000)
  status      String   @default("open")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  ctp CTP @relation(fields: [ctpId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("recommendations")
}

model UploadedFiles {
  id               String   @id @default(uuid())
  filename         String   @db.NVarChar(4000)
  originalName     String   @map("original_name") @db.NVarChar(4000)
  fileType         String   @map("file_type")
  size             Int
  status           String   @default("processing")
  recordsProcessed Int      @default(0) @map("records_processed")
  errors           String?  @db.NVarChar(4000)
  uploadedAt       DateTime @default(now()) @map("uploaded_at")

  @@map("uploaded_files")
}
