import * as XLSX from 'xlsx';
import { db } from './db.js';
import type { InsertCTP, InsertVyvod, InsertRTS, InsertDistrict, InsertMeasurement } from '@shared/schema';

interface ParsedCTP {
  name: string;
  code: string;
  fullName: string | null;
  city: string | null;
  address: string | null;
  yearBuilt: number | null;
  vyvodName: string | null;
  districtName: string | null;
  rtsCode: string | null;
  status: string | null;
  commentPTU: string | null;
  commentRTS: string | null;
  commentSKIPiA: string | null;
  av365G1: number | null;
  av365G2: number | null;
  min730: number | null;
  min365: number | null;
  min30: number | null;
  min7: number | null;
  percentFromG1: number | null;
  normativMinenergo: number | null;
  ucl: number | null;
  lcl: number | null;
  measurements: Array<{ date: Date; value: number }>;
}

export class ModelParser {
  private workbook: XLSX.WorkBook;
  
  constructor(buffer: Buffer) {
    this.workbook = XLSX.read(buffer, { type: 'buffer' });
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –ª–∏—Å—Ç "data –¶–¢–ü" –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
   */
  async parseAndImport(): Promise<{ 
    ctpCount: number; 
    measurementCount: number; 
    vyvodCount: number;
    errors: string[];
  }> {
    const errors: string[] = [];
    
    try {
      console.log('üìä –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Model_2.5.20.xlsm...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—Å—Ç–∞ "data –¶–¢–ü"
      if (!this.workbook.SheetNames.includes('data –¶–¢–ü')) {
        throw new Error('–õ–∏—Å—Ç "data –¶–¢–ü" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ');
      }

      const dataSheet = this.workbook.Sheets['data –¶–¢–ü'];
      const dataArray = XLSX.utils.sheet_to_json(dataSheet, { header: 1, defval: null }) as any[][];

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${dataArray.length} —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ "data –¶–¢–ü"`);

      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (—Å—Ç—Ä–æ–∫–∞ 3, –∏–Ω–¥–µ–∫—Å 2)
      const headerRow = dataArray[2];
      if (!headerRow) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏');
      }

      // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
      const columnMap = this.createColumnMap(headerRow);
      console.log('–ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏:', Object.keys(columnMap).slice(0, 20).join(', '));

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¶–¢–ü (–Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ 4, –∏–Ω–¥–µ–∫—Å 3)
      const parsedCTPs: ParsedCTP[] = [];
      
      for (let i = 3; i < dataArray.length; i++) {
        const row = dataArray[i];
        if (!row || !row[columnMap.—Ü—Ç–ø]) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        
        try {
          const parsed = this.parseCtpRow(row, columnMap, headerRow);
          if (parsed) {
            parsedCTPs.push(parsed);
          }
        } catch (err) {
          const error = `–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}: ${err instanceof Error ? err.message : String(err)}`;
          errors.push(error);
          console.warn(error);
        }
      }

      console.log(`‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${parsedCTPs.length} –¶–¢–ü`);

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
      const result = await this.importToDatabase(parsedCTPs);

      return {
        ...result,
        errors
      };

    } catch (err) {
      const error = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${err instanceof Error ? err.message : String(err)}`;
      errors.push(error);
      console.error(error);
      throw err;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
   */
  private createColumnMap(headerRow: any[]): Record<string, number> {
    const map: Record<string, number> = {};
    
    headerRow.forEach((header, index) => {
      if (header !== null && header !== '') {
        const key = String(header).trim();
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏ lowercase –≤–µ—Ä—Å–∏—é –¥–ª—è case-insensitive –ø–æ–∏—Å–∫–∞
        map[key] = index;
        map[key.toLowerCase()] = index;
      }
    });
    
    return map;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¶–¢–ü
   */
  private parseCtpRow(row: any[], columnMap: Record<string, number>, headerRow: any[]): ParsedCTP | null {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –∏ —Å—Ç—Ä–æ—á–Ω–æ–π)
    const ctpCode = this.cleanString(
      row[columnMap['–¶–¢–ü']] || row[columnMap['—Ü—Ç–ø']] || row[columnMap['–¶—Ç–ø']]
    );
    if (!ctpCode) return null;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const fullName = this.cleanString(row[columnMap['–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']]);
    const city = this.cleanString(row[columnMap['–ì–æ—Ä–æ–¥']]);
    const address = this.cleanString(row[columnMap['–ê–¥—Ä–µ—Å']]);
    const yearBuilt = this.parseNumber(row[columnMap['–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏']]);
    const vyvodName = this.cleanString(row[columnMap['–í—ã–≤–æ–¥']]);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –†–¢–° –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ "–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –æ—Ç—á–µ—Ç" (—Ñ–æ—Ä–º–∞—Ç: "3-–†–¢–°" –∏–ª–∏ "–†–¢–°-3")
    const microraionRaw = this.cleanString(row[columnMap['–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –æ—Ç—á–µ—Ç']]);
    const rtsCode = this.extractRTSCode(microraionRaw);
    const districtName = microraionRaw; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
    
    const status = this.cleanString(row[columnMap['–°—Ç–∞—Ç—É—Å']]);
    const commentPTU = this.cleanString(row[columnMap['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ü–¢–£']]);
    const commentRTS = this.cleanString(row[columnMap['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –†–¢–°']]);
    const commentSKIPiA = this.cleanString(row[columnMap['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –°–ö–ò–ü–∏–ê']]);

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const av365G1 = this.parseNumber(row[columnMap['av 365 G1']]);
    const av365G2 = this.parseNumber(row[columnMap['av 365 G2']]);
    const min730 = this.parseNumber(row[columnMap['min 730']]);
    const min365 = this.parseNumber(row[columnMap['min 365']]);
    const min30 = this.parseNumber(row[columnMap['min 30']]);
    const min7 = this.parseNumber(row[columnMap['min 7']]);
    const percentFromG1 = this.parseNumber(row[columnMap['% –æ—Ç G1']]);
    const normativMinenergo = this.parseNumber(row[columnMap['–ù–æ—Ä–º–∞—Ç–∏–≤ –ø–æ–¥–ø–∏—Ç–∫–∏ –ú–∏–Ω—ç–Ω–µ—Ä–≥–æ 0,25% V—Å–µ—Ç–∏']]);

    // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    const ucl = this.parseNumber(row[columnMap['max.stat.sign.sample']]);
    const lcl = this.parseNumber(row[columnMap['min.stat.sign.sample']]);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    const measurements: Array<{ date: Date; value: number }> = [];
    
    // –ö–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å –∫–æ–ª–æ–Ω–∫–∏ 40+)
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ - —ç—Ç–æ –Ω–æ–º–µ—Ä–∞ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (45200, 45201 –∏ —Ç.–¥.)
    for (let colIndex = 0; colIndex < headerRow.length; colIndex++) {
      const header = headerRow[colIndex];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∏—Å–ª–æ–º (–¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel)
      if (typeof header === 'number' && header > 40000 && header < 50000) {
        const value = this.parseNumber(row[colIndex]);
        
        if (value !== null && value !== 0) {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Excel –¥–∞—Ç—É –≤ JavaScript Date
          const date = this.excelDateToJSDate(header);
          measurements.push({ date, value });
        }
      }
    }

    return {
      name: ctpCode,
      code: ctpCode,
      fullName,
      city,
      address,
      yearBuilt,
      vyvodName,
      districtName,
      rtsCode,
      status,
      commentPTU,
      commentRTS,
      commentSKIPiA,
      av365G1,
      av365G2,
      min730,
      min365,
      min30,
      min7,
      percentFromG1,
      normativMinenergo,
      ucl,
      lcl,
      measurements
    };
  }

  /**
   * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
   */
  private async importToDatabase(parsedCTPs: ParsedCTP[]): Promise<{
    ctpCount: number;
    measurementCount: number;
    vyvodCount: number;
  }> {
    console.log('üóÑÔ∏è  –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');

    // 1. –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –†–¢–°
    const uniqueRTSCodes = new Set<string>();
    parsedCTPs.forEach(ctp => {
      if (ctp.rtsCode) uniqueRTSCodes.add(ctp.rtsCode);
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${uniqueRTSCodes.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –†–¢–°`);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –†–¢–°
    const rtsMap = new Map<string, string>(); // code -> id
    for (const rtsCode of Array.from(uniqueRTSCodes)) {
      const existing = await db.rTS.findUnique({ where: { code: rtsCode } });
      
      if (existing) {
        rtsMap.set(rtsCode, existing.id);
      } else {
        const created = await db.rTS.create({
          data: {
            name: `–†–¢–°-${rtsCode}`,  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è: "–†–¢–°-3"
            code: rtsCode,           // –¢–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä: "3"
            location: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'
          }
        });
        rtsMap.set(rtsCode, created.id);
        console.log(`‚úì –°–æ–∑–¥–∞–Ω –†–¢–°-${rtsCode}`);
      }
    }

    // 2. –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã
    const uniqueDistricts = new Set<string>();
    parsedCTPs.forEach(ctp => {
      if (ctp.districtName) uniqueDistricts.add(ctp.districtName);
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${uniqueDistricts.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤`);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–π–æ–Ω—ã
    const districtMap = new Map<string, string>(); // name -> id
    for (const districtName of Array.from(uniqueDistricts)) {
      const existing = await db.districts.findFirst({ where: { name: districtName } });
      
      if (existing) {
        districtMap.set(districtName, existing.id);
      } else {
        const created = await db.districts.create({
          data: {
            name: districtName,
            rtsId: null
          }
        });
        districtMap.set(districtName, created.id);
        console.log(`‚úì –°–æ–∑–¥–∞–Ω —Ä–∞–π–æ–Ω: ${districtName}`);
      }
    }

    // 3. –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    const uniqueVyvods = new Set<string>();
    parsedCTPs.forEach(ctp => {
      if (ctp.vyvodName) uniqueVyvods.add(ctp.vyvodName);
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${uniqueVyvods.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤`);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥—ã
    const vyvodMap = new Map<string, string>(); // name -> id
    for (const vyvodName of Array.from(uniqueVyvods)) {
      const vyvodCode = this.generateVyvodCode(vyvodName);
      const existing = await db.vyvod.findUnique({ where: { code: vyvodCode } });
      
      if (existing) {
        vyvodMap.set(vyvodName, existing.id);
      } else {
        const created = await db.vyvod.create({
          data: {
            name: vyvodName,
            code: vyvodCode
          }
        });
        vyvodMap.set(vyvodName, created.id);
        console.log(`‚úì –°–æ–∑–¥–∞–Ω –≤—ã–≤–æ–¥: ${vyvodName}`);
      }
    }

    // 4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¶–¢–ü –±–∞—Ç—á–∞–º–∏
    let ctpCount = 0;
    let measurementCount = 0;
    const batchSize = 50;

    for (let i = 0; i < parsedCTPs.length; i += batchSize) {
      const batch = parsedCTPs.slice(i, i + batchSize);
      
      for (const parsedCTP of batch) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¶–¢–ü
          const existing = await db.cTP.findUnique({ where: { code: parsedCTP.code } });
          
          const ctpData: any = {
            name: parsedCTP.name,
            code: parsedCTP.code,
            fullName: parsedCTP.fullName,
            city: parsedCTP.city,
            address: parsedCTP.address,
            yearBuilt: parsedCTP.yearBuilt,
            rtsId: parsedCTP.rtsCode ? rtsMap.get(parsedCTP.rtsCode) : null,
            districtId: parsedCTP.districtName ? districtMap.get(parsedCTP.districtName) : null,
            vyvodId: parsedCTP.vyvodName ? vyvodMap.get(parsedCTP.vyvodName) : null,
            status: parsedCTP.status,
            commentPTU: parsedCTP.commentPTU,
            commentRTS: parsedCTP.commentRTS,
            commentSKIPiA: parsedCTP.commentSKIPiA,
            av365G1: parsedCTP.av365G1,
            av365G2: parsedCTP.av365G2,
            min730: parsedCTP.min730,
            min365: parsedCTP.min365,
            min30: parsedCTP.min30,
            min7: parsedCTP.min7,
            percentFromG1: parsedCTP.percentFromG1,
            normativMinenergo: parsedCTP.normativMinenergo,
            ucl: parsedCTP.ucl,
            lcl: parsedCTP.lcl,
          };

          let ctp;
          if (existing) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¶–¢–ü
            ctp = await db.cTP.update({
              where: { id: existing.id },
              data: ctpData
            });
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¶–¢–ü
            ctp = await db.cTP.create({
              data: ctpData
            });
          }

          ctpCount++;

          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏
          if (parsedCTP.measurements.length > 0) {
            const measurementBatchSize = 100;
            
            for (let j = 0; j < parsedCTP.measurements.length; j += measurementBatchSize) {
              const measurementBatch = parsedCTP.measurements.slice(j, j + measurementBatchSize);
              
              await db.measurements.createMany({
                data: measurementBatch.map(m => ({
                  ctpId: ctp.id,
                  date: m.date,
                  makeupWater: m.value,
                  undermix: 0,
                  flowG1: null,
                  temperature: null,
                  pressure: null
                }))
              });

              measurementCount += measurementBatch.length;
            }
          }

        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¶–¢–ü ${parsedCTP.code}:`, err);
        }
      }

      console.log(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${Math.min(i + batchSize, parsedCTPs.length)}/${parsedCTPs.length} –¶–¢–ü...`);
    }

    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${ctpCount} –¶–¢–ü, ${measurementCount} –∏–∑–º–µ—Ä–µ–Ω–∏–π, ${vyvodMap.size} –≤—ã–≤–æ–¥–æ–≤`);

    return {
      ctpCount,
      measurementCount,
      vyvodCount: vyvodMap.size
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç null, undefined, "-"
   */
  private cleanString(value: any): string | null {
    if (value === null || value === undefined || value === '' || value === '-') {
      return null;
    }
    return String(value).trim();
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
   */
  private parseNumber(value: any): number | null {
    if (value === null || value === undefined || value === '' || value === '-') {
      return null;
    }
    
    const num = typeof value === 'number' ? value : parseFloat(String(value));
    return isNaN(num) ? null : num;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Excel –¥–∞—Ç—É –≤ JavaScript Date
   */
  private excelDateToJSDate(excelDate: number): Date {
    // Excel –¥–∞—Ç—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Ç 1 —è–Ω–≤–∞—Ä—è 1900
    const millisecondsPerDay = 24 * 60 * 60 * 1000;
    const excelEpoch = new Date(1899, 11, 30); // 30 –¥–µ–∫–∞–±—Ä—è 1899
    return new Date(excelEpoch.getTime() + excelDate * millisecondsPerDay);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –†–¢–° –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –æ—Ç—á–µ—Ç"
   * –ü—Ä–∏–º–µ—Ä—ã: "3-–†–¢–°" -> "3", "–†–¢–°-3" -> "3", "5 –†–¢–°" -> "5"
   */
  private extractRTSCode(microraionValue: string | null): string | null {
    if (!microraionValue) return null;
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã: "—á–∏—Å–ª–æ-–†–¢–°", "–†–¢–°-—á–∏—Å–ª–æ", "—á–∏—Å–ª–æ –†–¢–°"
    const patterns = [
      /(\d+)\s*-?\s*–†–¢–°/i,  // "3-–†–¢–°" –∏–ª–∏ "3 –†–¢–°"
      /–†–¢–°\s*-?\s*(\d+)/i   // "–†–¢–°-3" –∏–ª–∏ "–†–¢–° 3"
    ];
    
    for (const pattern of patterns) {
      const match = microraionValue.match(pattern);
      if (match && match[1]) {
        return match[1]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "3")
      }
    }
    
    return null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –≤—ã–≤–æ–¥–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
   */
  private generateVyvodCode(name: string): string {
    // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–∏—Ä–µ
    return name
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '-')
      .toLowerCase()
      .substring(0, 100);
  }
}
