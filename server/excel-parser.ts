import * as XLSX from 'xlsx';

export interface ParsedExcelData {
  sheetName: string;
  headers: string[];
  rows: any[][];
  metadata?: {
    fileType: string;
    lastModified?: Date;
    source?: string;
    rtsNumber?: string;
    districtName?: string;
  };
}

export interface CTEMeasurementData {
  ctpName: string;
  ctpCode?: string;
  rtsName?: string;
  districtName?: string;
  date: Date;
  makeupWater: number;
  undermix?: number;
  flowG1?: number;
  temperature?: number;
  pressure?: number;
}

export class ExcelParser {
  static extractRTSNumber(filename: string): string | undefined {
    const match = filename.match(/(\d+)-–†–¢–°/i);
    return match ? match[1] : undefined;
  }

  static extractDistrictFromFilename(filename: string): string | undefined {
    // –§–æ—Ä–º–∞—Ç: "..., 3-–†–¢–°, –ö–∏—Ä–æ–≤—Å–∫–∏–π, ..."
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: —á–∏—Å–ª–æ-–†–¢–°, –∑–∞—Ç–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    const match = filename.match(/\d+-–†–¢–°,\s*([^,]+)/i);
    return match ? match[1].trim() : undefined;
  }

  static async parseFile(buffer: Buffer, filename: string): Promise<ParsedExcelData[]> {
    try {
      const workbook = XLSX.read(buffer, { type: 'buffer', cellDates: true });
      const parsedSheets: ParsedExcelData[] = [];
      const rtsNumber = this.extractRTSNumber(filename);
      const districtName = this.extractDistrictFromFilename(filename);

      console.log(`üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: –†–¢–°="${rtsNumber}", –†–∞–π–æ–Ω="${districtName}"`);

      for (const sheetName of workbook.SheetNames) {
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: null });

        if (jsonData.length === 0) continue;

        // Find the row with headers (look for row with "–î–∞—Ç–∞" or multiple non-empty cells)
        let headerRowIndex = -1;
        for (let i = 0; i < Math.min(10, jsonData.length); i++) {
          const row = jsonData[i] as any[];
          const rowStr = row.map(cell => String(cell || '').toLowerCase()).join(' ');
          
          // Look for typical header keywords
          if (rowStr.includes('–¥–∞—Ç–∞') && (rowStr.includes('–≤—Ä–µ–º—è') || rowStr.includes('–ø–æ–¥–ø–∏—Ç') || rowStr.includes('—Ä–∞–∑–Ω–æ—Å—Ç—å'))) {
            headerRowIndex = i;
            break;
          }
        }

        if (headerRowIndex === -1) {
          console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ –ª–∏—Å—Ç–µ ${sheetName}`);
          continue;
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${headerRowIndex + 1}`);

        const headers = (jsonData[headerRowIndex] as any[]).map(h => String(h || '').trim());
        const rows = jsonData.slice(headerRowIndex + 1).filter((row: any) => {
          return Array.isArray(row) && row.some(cell => cell !== null && cell !== '');
        }) as any[][];

        console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${headers.slice(0, 10).join(' | ')}`);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);

        parsedSheets.push({
          sheetName,
          headers,
          rows,
          metadata: {
            fileType: filename.split('.').pop() || 'unknown',
            source: filename,
            rtsNumber: rtsNumber,
            districtName: districtName,
          }
        });
      }

      return parsedSheets;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞: ${error}`);
    }
  }

  static parseMeasurements(data: ParsedExcelData): CTEMeasurementData[] {
    const measurements: CTEMeasurementData[] = [];
    
    const headers = data.headers.map(h => h.toLowerCase().trim());
    
    // Try to find column indices with various possible names
    const ctpIndex = headers.findIndex(h => 
      h.includes('—Ü—Ç–ø') || h.includes('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ') || h.includes('–æ–±—ä–µ–∫—Ç') || 
      h.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') || h.includes('name') || h.includes('—Ç–æ—á–∫–∞')
    );
    const ctpCodeIndex = headers.findIndex(h => 
      h.includes('–∫–æ–¥ —Ü—Ç–ø') || h.includes('–Ω–æ–º–µ—Ä') || h.includes('–∫–æ–¥')
    );
    const rtsIndex = headers.findIndex(h => 
      h.includes('—Ä—Ç—Å') || h.includes('—Ç—ç—Ü') || h.includes('–∏—Å—Ç–æ—á–Ω–∏–∫')
    );
    const districtIndex = headers.findIndex(h => 
      h.includes('—Ä–∞–π–æ–Ω') || h.includes('–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω')
    );
    const dateIndex = headers.findIndex(h => 
      h.includes('–¥–∞—Ç–∞') || h.includes('date')
    );
    const timeIndex = headers.findIndex(h => 
      h.includes('–≤—Ä–µ–º—è') || h.includes('time')
    );
    
    // –ü–æ–¥–ø–∏—Ç–∫–∞ –∏–ª–∏ —Ä–∞–∑–Ω–æ—Å—Ç—å –º–∞—Å—Å
    const makeupIndex = headers.findIndex(h => 
      h.includes('–ø–æ–¥–ø–∏—Ç') || h.includes('makeup') || h.includes('–ø–æ–¥–∞—á–∏')
    );
    const massDiffIndex = headers.findIndex(h => 
      h.includes('—Ä–∞–∑–Ω–æ—Å—Ç—å –º–∞—Å—Å') || h.includes('–º–∞—Å—Å')
    );
    
    const undermixIndex = headers.findIndex(h => 
      h.includes('–ø–æ–¥–º–µ—Å') || h.includes('–Ω–µ–¥–æ–º–µ—Å')
    );
    const flowIndex = headers.findIndex(h => 
      h.includes('—Ä–∞—Å—Ö–æ–¥') || h.includes('g1') || h.includes('g-1')
    );
    const tempIndex = headers.findIndex(h => 
      h.includes('—Ç–µ–º–ø–µ—Ä') || h.includes('t1') || h.includes('t-1')
    );
    const pressureIndex = headers.findIndex(h => 
      h.includes('–¥–∞–≤–ª–µ–Ω') || h.includes('p1') || h.includes('p-1')
    );

    console.log(`üîç –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫:`);
    console.log(`   –¶–¢–ü: ${ctpIndex}, –î–∞—Ç–∞: ${dateIndex}, –í—Ä–µ–º—è: ${timeIndex}`);
    console.log(`   –ü–æ–¥–ø–∏—Ç–∫–∞: ${makeupIndex}, –†–∞–∑–Ω–æ—Å—Ç—å –º–∞—Å—Å: ${massDiffIndex}`);

    if (dateIndex === -1) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π');
    }
    if (makeupIndex === -1 && massDiffIndex === -1) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Ç–∫–∏ –∏–ª–∏ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –º–∞—Å—Å');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –¶–¢–ü –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞)
    const fileCtpName = data.metadata?.source ? this.extractCTPFromFilename(data.metadata.source) : undefined;
    const fileRtsNumber = data.metadata?.rtsNumber;
    const fileDistrictName = data.metadata?.districtName;

    console.log(`üìÑ –ò–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: –¶–¢–ü="${fileCtpName}", –†–¢–°="${fileRtsNumber}", –†–∞–π–æ–Ω="${fileDistrictName}"`);

    let processedCount = 0;
    let skippedCount = 0;

    data.rows.forEach((row, index) => {
      try {
        const ctpName = ctpIndex !== -1 ? String(row[ctpIndex] || '').trim() : '';
        const ctpCode = ctpCodeIndex !== -1 ? String(row[ctpCodeIndex] || '').trim() : '';
        const dateValue = row[dateIndex];
        const timeValue = timeIndex !== -1 ? row[timeIndex] : null;

        // –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –¥–∞—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (!dateValue) {
          skippedCount++;
          return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Ç–∫–∏
        let makeupValue = null;
        if (makeupIndex !== -1) {
          const val = row[makeupIndex];
          // –ï—Å–ª–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ –ø–æ–¥–ø–∏—Ç–∫–∏ —Å—Ç–æ–∏—Ç "-", –±–µ—Ä–µ–º –∏–∑ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –º–∞—Å—Å
          if (val === '-' || val === '‚Äî' || val === null || val === '') {
            if (massDiffIndex !== -1) {
              makeupValue = row[massDiffIndex];
              console.log(`  –°—Ç—Ä–æ–∫–∞ ${index + 2}: –ü–æ–¥–ø–∏—Ç–∫–∞="-", –≤–∑—è—Ç–æ –∏–∑ "–†–∞–∑–Ω–æ—Å—Ç—å –º–∞—Å—Å": ${makeupValue}`);
            }
          } else {
            makeupValue = val;
          }
        } else if (massDiffIndex !== -1) {
          makeupValue = row[massDiffIndex];
        }

        if (makeupValue === null || makeupValue === '' || makeupValue === '-' || makeupValue === '‚Äî') {
          skippedCount++;
          return;
        }

        let parsedDate: Date;
        if (dateValue instanceof Date) {
          parsedDate = dateValue;
        } else {
          parsedDate = new Date(dateValue);
          if (isNaN(parsedDate.getTime())) {
            console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${index + 2}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ "${dateValue}"`);
            skippedCount++;
            return;
          }
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –¥–∞—Ç–µ
        if (timeValue) {
          if (timeValue instanceof Date) {
            parsedDate.setHours(timeValue.getHours(), timeValue.getMinutes(), timeValue.getSeconds());
          } else if (typeof timeValue === 'number') {
            // Excel time format (fraction of day)
            const hours = Math.floor(timeValue * 24);
            const minutes = Math.floor((timeValue * 24 * 60) % 60);
            parsedDate.setHours(hours, minutes, 0);
          }
        }

        const makeupWater = parseFloat(String(makeupValue).replace(',', '.'));
        if (isNaN(makeupWater)) {
          console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${index + 2}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Ç–∫–∏ "${makeupValue}"`);
          skippedCount++;
          return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¶–¢–ü –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ
        const finalCtpName = ctpName || fileCtpName || `–¶–¢–ü-${ctpCode || 'Unknown'}`;
        const finalRtsName = fileRtsNumber ? `–†–¢–°-${fileRtsNumber}` : (rtsIndex !== -1 ? String(row[rtsIndex] || '').trim() : undefined);
        const finalDistrictName = fileDistrictName || (districtIndex !== -1 ? String(row[districtIndex] || '').trim() : undefined);

        const measurement: CTEMeasurementData = {
          ctpName: finalCtpName,
          ctpCode: ctpCode || undefined,
          rtsName: finalRtsName,
          districtName: finalDistrictName,
          date: parsedDate,
          makeupWater: Math.abs(makeupWater),
          undermix: undermixIndex !== -1 ? parseFloat(String(row[undermixIndex] || '0').replace(',', '.')) : undefined,
          flowG1: flowIndex !== -1 ? parseFloat(String(row[flowIndex] || '').replace(',', '.')) : undefined,
          temperature: tempIndex !== -1 ? parseFloat(String(row[tempIndex] || '').replace(',', '.')) : undefined,
          pressure: pressureIndex !== -1 ? parseFloat(String(row[pressureIndex] || '').replace(',', '.')) : undefined,
        };

        measurements.push(measurement);
        processedCount++;
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${index + 2}:`, error);
        skippedCount++;
      }
    });

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∏–∑–º–µ—Ä–µ–Ω–∏–π, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount} —Å—Ç—Ä–æ–∫`);

    return measurements;
  }

  static extractCTPFromFilename(filename: string): string | undefined {
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–∏–ø–∞ "–¶–¢–ü –ö04" –∏–ª–∏ "–¶–¢–ü-104"
    const match = filename.match(/–¶–¢–ü[\s-]?([–ö–∫Aa]?\d+)/i);
    return match ? `–¶–¢–ü ${match[1]}` : undefined;
  }

  static detectFileType(filename: string): 'measurements' | 'summary' | 'model' | 'unknown' {
    const name = filename.toLowerCase();
    
    if (name.includes('–æ–¥–ø—É') || name.includes('–ø–æ–∫–∞–∑–∞–Ω–∏—è') || name.includes('–∞—Ä—Ö–∏–≤')) {
      return 'measurements';
    } else if (name.includes('—Å–≤–æ–¥') || name.includes('–≤–µ–¥–æ–º–æ—Å—Ç—å')) {
      return 'summary';
    } else if (name.includes('–º–æ–¥–µ–ª—å') || name.includes('model')) {
      return 'model';
    }
    
    return 'unknown';
  }

  static validateMeasurementData(data: CTEMeasurementData[]): {
    valid: CTEMeasurementData[];
    errors: string[];
  } {
    const valid: CTEMeasurementData[] = [];
    const errors: string[] = [];
    
    data.forEach((measurement, index) => {
      if (!measurement.ctpName && !measurement.ctpCode) {
        errors.push(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–¥ –¶–¢–ü`);
        return;
      }
      
      if (isNaN(measurement.makeupWater) || measurement.makeupWater < 0) {
        errors.push(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Ç–∫–∏`);
        return;
      }
      
      if (measurement.makeupWater > 1000) {
        errors.push(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Ç–∫–∏ (${measurement.makeupWater} —Ç/—á)`);
      }
      
      valid.push(measurement);
    });
    
    return { valid, errors };
  }
}
